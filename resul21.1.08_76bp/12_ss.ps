%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAACGUCAGUUGCCCACGGCAAACAAUGACGUUCCGUCAGUGAUCAACUCCUUGUUCCUACAUCACAUAACGAGUGAUGUAUGGUCGUAACCGUACGACC\
) } def
/len { sequence length } bind def

/coor [
[77.35339355 117.15866852]
[63.43045044 122.74004364]
[49.50751114 128.32141113]
[35.58456802 133.90278625]
[21.66162872 139.48416138]
[7.73868704 145.06552124]
[-6.18425417 150.64689636]
[-20.10719490 156.22827148]
[-34.03013611 161.80964661]
[-47.95307922 167.39100647]
[-61.69933319 173.39437866]
[-75.25611115 179.81417847]
[-88.81289673 186.23396301]
[-102.27020264 192.85974121]
[-115.62489319 199.68997192]
[-128.97959900 206.52020264]
[-140.32818604 219.11567688]
[-155.57301331 211.69735718]
[-152.66481018 194.99470520]
[-135.80982971 193.16551208]
[-122.45513153 186.33528137]
[-109.10043335 179.50505066]
[-104.50057220 173.55599976]
[-95.23268127 172.67718506]
[-81.67590332 166.25738525]
[-68.11911774 159.83760071]
[-65.65628052 155.56390381]
[-60.39951324 152.88511658]
[-53.53445053 153.46807861]
[-39.61150742 147.88670349]
[-25.68856621 142.30532837]
[-11.76562595 136.72395325]
[2.15731525 131.14259338]
[16.08025551 125.56121063]
[30.00319672 119.97984314]
[43.92613983 114.39846802]
[57.84907913 108.81710052]
[71.77201843 103.23572540]
[71.35155487 88.48941803]
[78.71435547 74.34451294]
[93.01457977 64.89072418]
[88.07582092 50.72708130]
[83.13706207 36.56344604]
[69.37377930 28.32016373]
[67.38026428 12.40145111]
[78.68576813 1.01877904]
[94.61766815 2.90396047]
[102.95439148 16.61084557]
[97.30070496 31.62468529]
[102.23946381 45.78832245]
[107.17822266 59.95196152]
[109.63446045 45.15443039]
[107.76145172 30.27182961]
[114.82192230 17.03741455]
[128.22628784 10.30518913]
[143.05822754 12.54434395]
[153.87779236 22.93361855]
[156.71667480 37.66252518]
[150.53367615 51.32892227]
[137.59465027 58.92079163]
[127.36418152 69.89063263]
[141.60148621 65.16844177]
[155.83879089 60.44624710]
[170.07609558 55.72405624]
[184.31340027 51.00186157]
[198.55070496 46.27967072]
[212.78802490 41.55747604]
[227.02532959 36.83528519]
[232.62615967 22.23512459]
[246.32644653 14.69615078]
[261.65731812 17.77803612]
[271.38003540 30.02560616]
[270.90380859 45.65593719]
[260.45349121 57.28886032]
[244.96340942 59.43166733]
[231.74751282 51.07259369]
[217.51020813 55.79478455]
[203.27290344 60.51697540]
[189.03559875 65.23916626]
[174.79829407 69.96136475]
[160.56098938 74.68355560]
[146.32366943 79.40574646]
[132.08636475 84.12793732]
[131.82420349 104.23793793]
[121.28302765 118.82343292]
[129.49732971 131.37434387]
[137.71162415 143.92524719]
[145.92591858 156.47615051]
[154.14022827 169.02706909]
[162.35452271 181.57797241]
[170.56881714 194.12887573]
[185.44293213 201.03488159]
[186.62950134 217.39105225]
[172.90788269 226.37155151]
[158.39370728 218.73802185]
[158.01791382 202.34318542]
[149.80361938 189.79226685]
[141.58930969 177.24136353]
[133.37501526 164.69046021]
[125.16071320 152.13954163]
[116.94641876 139.58863831]
[108.73211670 127.03772736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 26]
[12 25]
[13 24]
[14 22]
[15 21]
[16 20]
[41 51]
[42 50]
[43 49]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
