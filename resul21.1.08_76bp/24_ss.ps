%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGAAGCUACUGAAAAGUACGAUAUUCUUCUAACCUGGAUGGACAUACUGUAUUCCAAUCAUCUGAUUGGAAACCGUCAUGCACAUGACGG\
) } def
/len { sequence length } bind def

/coor [
[78.58288574 118.20678711]
[64.97651672 124.52080536]
[51.37015533 130.83482361]
[37.76379013 137.14884949]
[24.15742683 143.46287537]
[10.55106354 149.77688599]
[-3.05530000 156.09091187]
[-8.68510151 175.17323303]
[-26.12199211 184.12113953]
[-44.34671402 177.76292419]
[-57.25273895 185.40716553]
[-70.15876007 193.05142212]
[-83.06478882 200.69566345]
[-90.62968445 215.24574280]
[-107.02256775 215.69895935]
[-115.37984467 201.58911133]
[-107.10426331 187.43118286]
[-90.70903778 187.78964233]
[-77.80300903 180.14540100]
[-64.89698792 172.50114441]
[-51.99096298 164.85690308]
[-52.19696426 154.24694824]
[-47.84716034 144.47775269]
[-39.70046997 137.42457581]
[-29.25163460 134.47343445]
[-18.45723343 136.24914551]
[-9.36932182 142.48454285]
[4.23704243 136.17053223]
[17.84340668 129.85650635]
[31.44976997 123.54248810]
[45.05613327 117.22846222]
[58.66249847 110.91444397]
[72.26885986 104.60041809]
[70.95108032 90.58716583]
[76.82614136 76.55979919]
[89.47707367 66.21335602]
[82.71192169 52.82557678]
[67.98095703 46.47118759]
[63.90360260 30.95491409]
[73.60765839 18.17951202]
[89.64900208 17.94517899]
[99.72208405 30.43167114]
[96.09970093 46.06042480]
[102.86485291 59.44820786]
[103.34632111 44.45593643]
[98.71872711 30.18760109]
[102.36012268 15.63630486]
[113.16262054 5.22928238]
[127.83954620 2.13287187]
[141.92544556 7.28915691]
[151.13468933 19.12933731]
[152.66535950 34.05103683]
[146.05174255 47.51432037]
[133.30537415 55.42317581]
[123.99361420 67.18290710]
[137.80335999 61.32706451]
[151.61311340 55.47122574]
[165.42285156 49.61538696]
[179.23260498 43.75954819]
[193.04235840 37.90370941]
[206.85209656 32.04787064]
[220.66184998 26.19202995]
[230.09858704 12.78009033]
[246.40560913 14.51586437]
[252.80766296 29.61373711]
[242.71885681 42.54231262]
[226.51768494 40.00177765]
[212.70794678 45.85761642]
[198.89819336 51.71345520]
[185.08843994 57.56929779]
[171.27870178 63.42513657]
[157.46894836 69.28097534]
[143.65919495 75.13681030]
[129.84945679 80.99265289]
[131.71012878 101.56606293]
[122.10794067 117.36141968]
[131.00563049 129.43746948]
[139.90333557 141.51351929]
[148.80102539 153.58956909]
[157.69873047 165.66561890]
[166.59642029 177.74166870]
[175.49412537 189.81771851]
[190.72831726 195.88822937]
[192.82012939 212.15341187]
[179.61767578 221.88105774]
[164.70249939 215.06419373]
[163.41807556 198.71542358]
[154.52037048 186.63937378]
[145.62268066 174.56332397]
[136.72497559 162.48727417]
[127.82728577 150.41120911]
[118.92958832 138.33515930]
[110.03189087 126.25911713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 21]
[11 20]
[12 19]
[13 18]
[36 44]
[37 43]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
