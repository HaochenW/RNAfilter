%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUCCCAAGCCUAUGCUAGCAGCUAGGCUUGGGAACGCCGUCAAGUACGAAGUCCUGGAUCCGAAUAAUGGGAUCCCGUAACCCUAGAGGUUAC\
) } def
/len { sequence length } bind def

/coor [
[76.26351166 115.03786469]
[61.90940475 119.39213562]
[47.55530167 123.74640656]
[33.20119476 128.10067749]
[18.84709167 132.45494080]
[4.49298573 136.80921936]
[-9.86111927 141.16348267]
[-24.21522331 145.51776123]
[-38.56932831 149.87202454]
[-52.92343521 154.22630310]
[-67.27754211 158.58056641]
[-81.63164520 162.93482971]
[-95.98574829 167.28910828]
[-110.33985138 171.64337158]
[-117.81601715 177.23260498]
[-125.23526764 175.89698792]
[-139.72415161 179.77926636]
[-154.21304321 183.66156006]
[-167.94755554 193.60134888]
[-181.30099487 183.15518188]
[-174.95965576 167.43182373]
[-158.09532166 169.17266846]
[-143.60644531 165.29039001]
[-129.11755371 161.40809631]
[-114.69412231 157.28927612]
[-100.34001923 152.93499756]
[-85.98591614 148.58073425]
[-71.63181305 144.22645569]
[-57.27770615 139.87219238]
[-42.92359924 135.51791382]
[-28.56949425 131.16365051]
[-14.21538925 126.80937958]
[0.13871570 122.45510864]
[14.49282074 118.10083771]
[28.84692574 113.74656677]
[43.20103073 109.39230347]
[57.55513763 105.03803253]
[71.90924072 100.68376160]
[73.92929077 79.39585876]
[92.04685974 62.47319794]
[89.12050629 47.76142120]
[86.19415283 33.04964066]
[73.70735931 22.97692299]
[73.94122314 6.93557405]
[86.71633911 -2.76885486]
[102.23273468 1.30804288]
[108.58755493 16.03882027]
[100.90592957 30.12328529]
[103.83228302 44.83506393]
[106.75863647 59.54684448]
[113.19160461 63.40261459]
[111.19878387 48.53558350]
[121.57966614 37.70796585]
[136.51742554 39.07298660]
[144.76390076 51.60277557]
[140.10946655 65.86238098]
[126.05753326 71.11415863]
[132.49049377 74.96992493]
[146.84460449 70.61565399]
[161.19871521 66.26138306]
[175.55281067 61.90711594]
[189.90692139 57.55284500]
[204.26101685 53.19857407]
[209.21746826 38.49438095]
[221.88967896 29.53923225]
[237.40493774 29.77656555]
[249.79730225 39.11512375]
[254.30168152 53.96403885]
[249.18601990 68.61360168]
[236.41740417 77.43075562]
[220.90563965 77.02512360]
[208.61529541 67.55268097]
[194.26118469 71.90695190]
[179.90708923 76.26122284]
[165.55297852 80.61549377]
[151.19886780 84.96976471]
[136.84477234 89.32402802]
[132.46629333 107.08181000]
[121.28067780 118.34914398]
[129.61422729 130.82118225]
[137.94778442 143.29322815]
[146.28134155 155.76527405]
[154.61489868 168.23731995]
[162.94844055 180.70936584]
[178.33940125 185.23684692]
[184.26210022 200.14662170]
[176.17314148 214.00117493]
[160.27770996 216.17247009]
[148.76939392 204.99490356]
[150.47639465 189.04292297]
[142.14285278 176.57087708]
[133.80929565 164.09883118]
[125.47573853 151.62678528]
[117.14218903 139.15473938]
[108.80863190 126.68269348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[16 24]
[17 23]
[18 22]
[40 50]
[41 49]
[42 48]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
