%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAACAGAGCACGAACUCGUGCAGUUGUUAGGCUCCCCCCGUGGGAAUGUUGGACCGCUGCUCGGAUCUGGGUGAUACCCAGA\
) } def
/len { sequence length } bind def

/coor [
[77.08776093 115.33060455]
[62.82191467 119.96585846]
[48.55606842 124.60111237]
[34.29021835 129.23637390]
[20.02437210 133.87162781]
[5.75852442 138.50688171]
[-8.50732327 143.14213562]
[-22.77317047 147.77738953]
[-34.62232208 161.72505188]
[-51.59646606 157.69941711]
[-65.68128967 162.85864258]
[-79.76612091 168.01788330]
[-93.85094452 173.17710876]
[-107.93576813 178.33634949]
[-118.03018951 191.26054382]
[-134.23023987 188.71296692]
[-139.87071228 173.31436157]
[-129.14916992 160.90548706]
[-113.09500122 164.25152588]
[-99.01017761 159.09228516]
[-84.92535400 153.93305969]
[-70.84053040 148.77381897]
[-56.75570297 143.61459351]
[-51.27794266 132.66075134]
[-39.39124298 128.32957458]
[-27.40842628 133.51153564]
[-13.14257812 128.87628174]
[1.12326968 124.24102783]
[15.38911724 119.60577393]
[29.65496445 114.97052002]
[43.92081451 110.33526611]
[58.18666077 105.70001221]
[72.45250702 101.06475830]
[74.97203827 78.86106873]
[95.10078430 62.36451340]
[93.44099426 47.45662689]
[91.78120422 32.54874039]
[90.12141418 17.64085197]
[78.54006958 6.53895807]
[80.14246368 -9.42387104]
[93.69937134 -18.00231743]
[108.81109619 -12.61573315]
[113.88521576 2.60375690]
[105.02929688 15.98106194]
[106.68908691 30.88894844]
[108.34887695 45.79683685]
[110.00866699 60.70472336]
[116.07630157 65.11311340]
[121.76691437 51.23446655]
[125.95874023 36.83208084]
[140.15116882 31.97669411]
[152.28649902 40.79337692]
[152.05468750 55.79158401]
[139.65243530 64.22904968]
[128.21154785 73.92989349]
[134.27917480 78.33827972]
[148.97032166 75.31004333]
[163.66146851 72.28180695]
[173.64741516 59.72551727]
[189.69000244 59.84820938]
[199.48272705 72.55577087]
[195.51345825 88.10004425]
[180.82707214 94.55679321]
[166.68971252 86.97295380]
[151.99856567 90.00119019]
[137.30741882 93.02942657]
[131.95195007 107.23368835]
[122.27589417 116.24137878]
[131.53506470 128.04255676]
[140.79425049 139.84373474]
[150.05342102 151.64489746]
[159.31259155 163.44607544]
[168.57176208 175.24725342]
[177.83093262 187.04841614]
[192.36502075 195.77751160]
[188.00050354 212.16003418]
[171.04998779 212.50122070]
[166.02976990 196.30760193]
[156.77058411 184.50642395]
[147.51141357 172.70524597]
[138.25224304 160.90406799]
[128.99307251 149.10290527]
[119.73389435 137.30172729]
[110.47472382 125.50054932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[35 47]
[36 46]
[37 45]
[38 44]
[56 66]
[57 65]
[58 64]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
