%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCGCGAUGAAAAGCUCGCUUUUCCGACCGCGGUACUCGUGAAGCGGCUCUCUAGCCCCCACGACGUUGAGUGGGGGCAUUAGCUCGGUCAGAGCUAA\
) } def
/len { sequence length } bind def

/coor [
[77.80940247 117.77484894]
[64.04308319 123.73206329]
[50.27676773 129.68928528]
[36.51044846 135.64649963]
[22.74412727 141.60371399]
[8.97780800 147.56094360]
[-4.78851175 153.51815796]
[-10.92709637 171.28944397]
[-27.74230576 178.97225952]
[-44.61154175 172.21356201]
[-57.97663879 179.02342224]
[-71.34173584 185.83326721]
[-84.70683289 192.64312744]
[-98.07192993 199.45298767]
[-111.43702698 206.26284790]
[-119.90998840 220.30352783]
[-136.29859924 219.71559143]
[-143.74365234 205.10385132]
[-134.58631897 191.49960327]
[-118.24688721 192.89775085]
[-104.88179016 186.08789062]
[-91.51669312 179.27803040]
[-78.15159607 172.46817017]
[-64.78649902 165.65830994]
[-51.42139816 158.84846497]
[-50.28220749 147.28544617]
[-43.56518555 137.65686035]
[-32.88886642 132.48959351]
[-20.92845345 133.20986938]
[-10.74573040 139.75183105]
[3.02058935 133.79461670]
[16.78690910 127.83740234]
[30.55322838 121.88018036]
[44.31954575 115.92296600]
[58.08586884 109.96574402]
[71.85218811 104.00852966]
[70.87101746 83.65209961]
[84.82714844 64.75312042]
[78.44046021 51.18070984]
[72.05376434 37.60830688]
[65.66707611 24.03590012]
[53.45221329 12.27863026]
[61.36859131 -2.71360993]
[77.96640015 0.74312878]
[79.23948669 17.64920998]
[85.62617493 31.22161674]
[92.01286316 44.79402161]
[98.39955139 58.36642838]
[105.49519348 60.79580688]
[100.44564056 46.67128754]
[108.34014130 33.91680527]
[123.23412323 32.13651276]
[133.91236877 42.67097092]
[132.33415222 57.58771515]
[119.68647003 65.65457153]
[126.78211212 68.08395386]
[140.14721680 61.27409363]
[153.51231384 54.46423721]
[166.87741089 47.65437698]
[180.24250793 40.84452057]
[193.60760498 34.03466415]
[206.97270203 27.22480583]
[220.33779907 20.41494751]
[222.63211060 5.06842422]
[233.53268433 -5.97498989]
[248.84803772 -8.46887684]
[262.68911743 -1.45428574]
[269.73370361 12.37152958]
[267.27307129 27.69226074]
[256.25332642 38.61677551]
[240.91181946 40.94437408]
[227.14765930 33.78004456]
[213.78256226 40.58990479]
[200.41746521 47.39976120]
[187.05236816 54.20961761]
[173.68725586 61.01947403]
[160.32215881 67.82933044]
[146.95706177 74.63919067]
[133.59196472 81.44905090]
[133.28089905 102.85189056]
[122.18750000 117.77870941]
[131.00427246 129.91397095]
[139.82106018 142.04922485]
[148.63783264 154.18447876]
[157.45462036 166.31973267]
[166.27139282 178.45498657]
[175.08816528 190.59024048]
[190.64500427 194.50999451]
[197.14848328 209.17575073]
[189.60971069 223.33718872]
[173.81176758 226.13085938]
[161.87350464 215.41371155]
[162.95291138 199.40701294]
[154.13613892 187.27175903]
[145.31936646 175.13650513]
[136.50257874 163.00125122]
[127.68579865 150.86599731]
[118.86902618 138.73074341]
[110.05224609 126.59548950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[38 48]
[39 47]
[40 46]
[41 45]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
