%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUAUAUCUAGCAUUGGCUUCUGAUUAUAUUAACAUCCGAGAGAGGACCAUAGACUCACGGAGGUGUGAGAGCGGGAUGCCAUCCCGC\
) } def
/len { sequence length } bind def

/coor [
[74.83017731 116.48646545]
[60.62969208 121.31827545]
[46.42921448 126.15007782]
[32.22873306 130.98188782]
[18.02825165 135.81369019]
[3.82777190 140.64549255]
[-10.37270832 145.47731018]
[-24.57318878 150.30911255]
[-38.68815231 155.38531494]
[-52.71339798 160.70437622]
[-64.48633575 176.88905334]
[-83.39331055 173.50547791]
[-97.01816559 179.77949524]
[-110.64302063 186.05351257]
[-119.66659546 199.74684143]
[-136.01895142 198.50888062]
[-142.87818909 183.61315918]
[-133.18811035 170.38308716]
[-116.91703796 172.42866516]
[-103.29218292 166.15464783]
[-89.66732025 159.88063049]
[-86.89868164 149.77310181]
[-78.77821350 142.80220032]
[-67.92638397 141.54498291]
[-58.03247070 146.67913818]
[-44.00722885 141.36006165]
[-38.75798035 135.92855835]
[-29.40499496 136.10862732]
[-15.20451546 131.27682495]
[-1.00403476 126.44501495]
[13.19644547 121.61321259]
[27.39692688 116.78140259]
[41.59740829 111.94960022]
[55.79788589 107.11779022]
[69.99836731 102.28598785]
[69.66689301 86.10520172]
[78.24697876 70.51669312]
[94.82341766 60.42201614]
[92.75861359 45.56480789]
[90.69380951 30.70760155]
[77.93699646 21.37811852]
[75.59609985 5.74815607]
[85.05993652 -6.90930796]
[100.71377563 -9.08482361]
[113.27046967 0.51230329]
[115.28036499 16.18826866]
[105.55101776 28.64279938]
[107.61582184 43.50000763]
[109.68062592 58.35721207]
[115.92562103 62.51052475]
[114.63243866 47.56637192]
[125.50984192 37.23767090]
[140.36712646 39.30195236]
[148.01670837 52.20481110]
[142.69845581 66.23036194]
[128.41561890 70.81714630]
[134.66061401 74.97045898]
[149.16061401 71.12987518]
[163.66061401 67.28928375]
[178.16059875 63.44869995]
[192.66059875 59.60811234]
[207.16059875 55.76752853]
[218.40202332 43.82757950]
[234.29873657 47.85580444]
[238.49755859 63.70830917]
[226.67910767 75.07740021]
[211.00119019 70.26752472]
[196.50119019 74.10810852]
[182.00119019 77.94869995]
[167.50119019 81.78928375]
[153.00120544 85.62986755]
[138.50120544 89.47045898]
[134.19409180 107.47617340]
[123.06214142 119.32514191]
[131.79492188 131.52098083]
[140.52770996 143.71682739]
[149.26048279 155.91267395]
[157.99327087 168.10850525]
[166.72604370 180.30435181]
[175.45883179 192.50019836]
[189.59614563 201.85820007]
[184.51745605 218.03359985]
[167.56828308 217.63116455]
[163.26298523 201.23297119]
[154.53019714 189.03713989]
[145.79742432 176.84129333]
[137.06463623 164.64544678]
[128.33186340 152.44961548]
[119.59908295 140.25376892]
[110.86630249 128.05792236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 26]
[10 25]
[12 21]
[13 20]
[14 19]
[38 49]
[39 48]
[40 47]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
