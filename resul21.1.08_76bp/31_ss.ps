%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCGUAGGCGUCUUAAUAUAAGACGACCAGUACGGGUCAGCGACCUGCGAAAUUCGACUAGCUACAGAUAGCUAGCAGUUAACUCCGGUUAACU\
) } def
/len { sequence length } bind def

/coor [
[75.74534607 113.73712921]
[61.18570328 117.34500122]
[46.62606049 120.95288086]
[32.06641769 124.56075287]
[17.50677109 128.16862488]
[2.94712734 131.77650452]
[-11.61251736 135.38438416]
[-26.17216110 138.99224854]
[-40.60734177 143.06970215]
[-54.90291214 147.61245728]
[-69.12305450 152.38609314]
[-83.26402283 157.38938904]
[-97.40499878 162.39266968]
[-111.54597473 167.39595032]
[-125.68694305 172.39924622]
[-139.82791138 177.40252686]
[-153.96888733 182.40582275]
[-166.88417053 193.38906860]
[-181.01350403 184.01899719]
[-175.92100525 167.84794617]
[-158.97218323 168.26484680]
[-144.83120728 163.26155090]
[-130.69023132 158.25827026]
[-116.54925537 153.25498962]
[-102.40828705 148.25169373]
[-88.26731110 143.24841309]
[-74.12633514 138.24511719]
[-68.76895905 132.94558716]
[-59.44566345 133.31687927]
[-45.15009308 128.77412415]
[-42.12869644 124.85099030]
[-36.53226852 122.90074158]
[-29.78003502 124.43260956]
[-15.22039127 120.82472992]
[-0.66074711 117.21685791]
[13.89889717 113.60898590]
[28.45854187 110.00110626]
[43.01818466 106.39323425]
[57.57783127 102.78536224]
[72.13747406 99.17748260]
[74.85037231 78.53936768]
[92.87137604 62.42185211]
[90.45291138 47.61810303]
[78.32006073 37.12173843]
[79.10569000 21.09793282]
[92.20712280 11.83877754]
[107.57406616 16.44710350]
[113.41831207 31.38779640]
[105.25666046 45.19963837]
[107.67512512 60.00338745]
[114.00237274 64.03028870]
[118.97726440 49.87930298]
[119.66580200 34.89511490]
[131.25141907 25.36759949]
[146.08648682 27.58583641]
[154.37844849 40.08557510]
[150.65379333 54.61578369]
[137.37008667 61.58519745]
[126.65686798 72.08409119]
[132.98411560 76.11099243]
[147.41929626 72.03354645]
[161.85447693 67.95609283]
[176.28965759 63.87863922]
[190.72483826 59.80118942]
[205.16000366 55.72373962]
[219.59518433 51.64628601]
[230.63963318 39.52390671]
[246.60017395 43.29134369]
[251.05795288 59.07298660]
[239.42720032 70.63403320]
[223.67263794 66.08146667]
[209.23745728 70.15892029]
[194.80227661 74.23636627]
[180.36709595 78.31381989]
[165.93193054 82.39127350]
[151.49674988 86.46871948]
[137.06156921 90.54617310]
[132.28877258 107.10616302]
[121.62164307 117.59265137]
[130.28047180 129.84111023]
[138.93930054 142.08955383]
[147.59814453 154.33801270]
[156.25697327 166.58647156]
[164.91580200 178.83491516]
[173.57463074 191.08337402]
[188.68669128 197.45187378]
[190.45867920 213.75500488]
[177.06773376 223.22151184]
[162.28930664 216.11305237]
[161.32617188 199.74220276]
[152.66734314 187.49375916]
[144.00851440 175.24530029]
[135.34968567 162.99684143]
[126.69085693 150.74838257]
[118.03202057 138.49993896]
[109.37319183 126.25148010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 30]
[10 29]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[42 50]
[43 49]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
