%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUACUCGGGUGGACAGUCUUCACAGGUGAAGACUUGACUCACCCGAGUAGUCUAUGCGUGCGGCGGGGAGAUUACCGAAUCCAAUAAUUCGGUACAUUACAUACUUGUAAU\
) } def
/len { sequence length } bind def

/coor [
[70.29375458 109.15034485]
[55.31652832 109.97666168]
[40.33930588 110.80297852]
[25.36208344 111.62929535]
[10.38486099 112.45561218]
[-4.59236145 113.28192902]
[-19.56958389 114.10824585]
[-34.54680634 114.93456268]
[-49.52402878 115.76087952]
[-64.50125122 116.58719635]
[-79.47847748 117.41350555]
[-94.45569611 118.23982239]
[-109.43292236 119.06613922]
[-124.39733887 120.09874725]
[-137.51142883 128.94921875]
[-150.83418274 122.28936005]
[-165.78294373 123.52805328]
[-180.71322632 124.97259521]
[-195.62217712 126.62271881]
[-210.53114319 128.27284241]
[-225.44010925 129.92297363]
[-240.34906006 131.57308960]
[-255.25802612 133.22320557]
[-270.16699219 134.87333679]
[-283.05319214 145.01618958]
[-298.17773438 138.67741394]
[-299.98178101 122.37779999]
[-286.60949707 112.88498688]
[-271.81710815 119.96437836]
[-256.90814209 118.31425476]
[-241.99919128 116.66413116]
[-227.09022522 115.01400757]
[-212.18127441 113.36388397]
[-197.27230835 111.71376038]
[-182.36334229 110.06363678]
[-175.97320557 106.14599609]
[-167.02163696 108.57928467]
[-152.07286072 107.34059143]
[-140.02799988 98.57871246]
[-125.63602448 105.14997864]
[-119.14035797 101.40989685]
[-110.25923920 104.08892059]
[-95.28201294 103.26260376]
[-80.30479431 102.43628693]
[-65.32756805 101.60997009]
[-50.35034561 100.78365326]
[-35.37312317 99.95733643]
[-20.39590073 99.13101959]
[-5.41867781 98.30470276]
[9.55854511 97.47838593]
[24.53576851 96.65206909]
[39.51298904 95.82575226]
[54.49021149 94.99943542]
[69.46743774 94.17312622]
[72.01148224 81.40997314]
[80.00315857 69.92523956]
[92.73959351 62.05619431]
[108.52382660 59.74414444]
[112.60537720 45.31012726]
[106.06257629 30.66187286]
[113.56333923 16.48026276]
[129.35372925 13.64421368]
[141.32070923 24.32929802]
[140.28422546 40.33883667]
[127.03939819 49.39167786]
[122.95784760 63.82569885]
[127.48245239 69.80715942]
[137.98439026 59.09691620]
[145.32244873 46.01437378]
[160.28755188 44.99176025]
[169.33702087 56.95449829]
[164.28152466 71.07689667]
[149.69541931 74.57870483]
[136.53167725 81.77008820]
[141.05628967 87.75155640]
[156.05628967 87.75155640]
[171.05628967 87.75155640]
[186.05628967 87.75155640]
[201.05628967 87.75155640]
[216.05628967 87.75155640]
[231.05628967 87.75155640]
[246.05628967 87.75155640]
[257.05297852 76.40041351]
[272.85638428 76.23332214]
[284.09060669 87.34941101]
[284.09060669 103.15369415]
[272.85638428 114.26978302]
[257.05297852 114.10269165]
[246.05628967 102.75155640]
[231.05628967 102.75155640]
[216.05628967 102.75155640]
[201.05628967 102.75155640]
[186.05628967 102.75155640]
[171.05628967 102.75155640]
[156.05628967 102.75155640]
[141.05628967 102.75155640]
[132.31726074 116.12324524]
[120.31250763 123.52853394]
[127.08550262 136.91235352]
[133.85850525 150.29615784]
[140.63150024 163.67997742]
[147.40451050 177.06379700]
[154.17750549 190.44760132]
[168.19479370 198.95922852]
[167.56169128 215.34614563]
[152.92948914 222.75091553]
[139.35052490 213.55612183]
[140.79370117 197.22061157]
[134.02069092 183.83679199]
[127.24769592 170.45297241]
[120.47469330 157.06916809]
[113.70169067 143.68534851]
[106.92869568 130.30154419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 40]
[16 38]
[17 37]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[58 66]
[59 65]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
