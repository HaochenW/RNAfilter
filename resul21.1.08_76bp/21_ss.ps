%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCAAUUACACAGCCGCUGUGUAUAACCGUUUUAUGUACGGGAUAGGAGAAACAAAUAGUCUCUGCAGGGACUAUACCAUAUAGGCUAUAUGG\
) } def
/len { sequence length } bind def

/coor [
[112.39243317 163.91372681]
[103.48240662 165.01084900]
[94.50616455 164.87182617]
[85.63438416 163.49934387]
[77.03575134 160.91944885]
[68.87376404 157.18124390]
[61.30361938 152.35577393]
[54.46925354 146.53480530]
[48.50061798 139.82901001]
[43.51119995 132.36590576]
[29.72374344 138.27404785]
[15.93628788 144.18218994]
[2.14883232 150.09031677]
[-11.63862324 155.99845886]
[-25.42607880 161.90658569]
[-39.21353531 167.81472778]
[-51.39078140 179.61096191]
[-66.09700775 171.17512512]
[-62.06193161 154.70834351]
[-45.12166977 154.02726746]
[-31.33421516 148.11914062]
[-17.54675865 142.21099854]
[-3.75930405 136.30285645]
[10.02815151 130.39472961]
[23.81560707 124.48658752]
[37.60306168 118.57845306]
[34.94656754 102.56667328]
[36.33328247 86.39536285]
[41.67702103 71.06961823]
[50.64565659 57.54195404]
[40.47703171 46.51475525]
[30.30840683 35.48756027]
[20.13978004 24.46036530]
[4.52881289 25.37233925]
[-7.98515701 15.99499607]
[-11.49341488 0.75602853]
[-4.33946848 -13.14918900]
[10.09880733 -19.15503693]
[25.00409889 -14.42573833]
[33.33858490 -1.19432330]
[31.16697693 14.29173851]
[41.33560181 25.31893539]
[51.50422668 36.34613037]
[61.67285538 47.37332535]
[68.28454590 43.14345169]
[75.35721588 39.73997879]
[82.78806305 37.21237183]
[90.46908569 35.59737015]
[98.28863525 34.91844940]
[106.13306427 35.18547821]
[113.88834381 36.39456940]
[121.44176483 38.52815628]
[128.68353271 41.55522156]
[135.50839233 45.43177414]
[141.81713867 50.10146332]
[147.51808167 55.49641800]
[152.52836609 61.53822327]
[156.77514648 68.13906097]
[160.19671631 75.20299530]
[174.63189697 71.12554169]
[189.06707764 67.04809570]
[203.50225830 62.97064209]
[217.93743896 58.89319229]
[232.37261963 54.81573868]
[246.80780029 50.73828888]
[261.24298096 46.66083908]
[272.28741455 34.53845596]
[288.24795532 38.30589676]
[292.70574951 54.08753967]
[281.07498169 65.64858246]
[265.32043457 61.09601593]
[250.88525391 65.17346954]
[236.45007324 69.25092316]
[222.01489258 73.32836914]
[207.57971191 77.40582275]
[193.14453125 81.48327637]
[178.70935059 85.56072235]
[164.27416992 89.63817596]
[161.01594543 122.70662689]
[141.86306763 149.86000061]
[150.12074280 162.38241577]
[158.37840271 174.90484619]
[166.63606262 187.42726135]
[174.89372253 199.94969177]
[183.15138245 212.47210693]
[191.40904236 224.99452209]
[205.17631531 234.88890076]
[199.47976685 250.85717773]
[182.55857849 249.80371094]
[178.88662720 233.25218201]
[170.62896729 220.72976685]
[162.37130737 208.20735168]
[154.11363220 195.68492126]
[145.85597229 183.16250610]
[137.59831238 170.64009094]
[129.34065247 158.11766052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[30 44]
[31 43]
[32 42]
[33 41]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
