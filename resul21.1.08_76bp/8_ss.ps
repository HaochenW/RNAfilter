%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAAAUACUACUCGCGUAGCUACAAUUUCGCCAGGGCGACCGGCCAUUUCCCUAGCUUUCCAAGUAUAAAGCUAUAUAAGUUUGACGAACUUAU\
) } def
/len { sequence length } bind def

/coor [
[76.70222473 119.16827393]
[63.11331558 125.51977539]
[49.52440643 131.87127686]
[35.93549728 138.22277832]
[22.34659004 144.57427979]
[8.75768280 150.92578125]
[-4.83122540 157.27728271]
[-18.42013359 163.62878418]
[-29.43104935 183.02262878]
[-50.93333435 181.36659241]
[-63.58782959 189.42039490]
[-76.24232483 197.47419739]
[-88.89682007 205.52799988]
[-95.99168396 220.31295776]
[-112.36163330 221.29115295]
[-121.16666412 207.45628357]
[-113.34892273 193.04049683]
[-96.95062256 192.87350464]
[-84.29612732 184.81970215]
[-71.64163208 176.76589966]
[-58.98713684 168.71209717]
[-58.94507599 160.41413879]
[-55.48149872 152.76856995]
[-49.12837982 147.13827515]
[-40.93986130 144.56147766]
[-32.31776047 145.56088257]
[-24.77163506 150.03987122]
[-11.18272781 143.68836975]
[2.40618062 137.33686829]
[15.99508858 130.98536682]
[29.58399773 124.63386536]
[43.17290497 118.28236389]
[56.76181412 111.93086243]
[70.35072327 105.57936096]
[67.91053772 90.88584900]
[72.99772644 75.37052917]
[85.68310547 62.93207169]
[79.55248260 49.24209595]
[73.42185974 35.55211639]
[59.00471115 28.51468468]
[55.65863800 12.82445335]
[65.95046234 0.51762658]
[81.98516846 1.03494895]
[91.46231079 13.97957420]
[87.11183167 29.42149544]
[93.24245453 43.11147308]
[99.37307739 56.80144882]
[106.44356537 59.30309296]
[101.53839874 45.12778473]
[109.56264496 32.45452881]
[124.47401428 30.82633972]
[135.04417419 41.46925354]
[133.31375122 56.36910629]
[120.58454132 64.30638123]
[127.65502930 66.80802155]
[141.03112793 60.01981735]
[154.40724182 53.23160934]
[167.78335571 46.44340515]
[181.15945435 39.65520096]
[194.53556824 32.86699295]
[207.91166687 26.07878876]
[210.23083496 10.73600006]
[221.14927673 -0.28974727]
[236.46865845 -2.75882959]
[250.29833984 4.27816629]
[257.32055664 18.11537170]
[254.83508301 33.43209839]
[243.79768372 44.33875275]
[228.45242310 46.64150238]
[214.69987488 39.45489502]
[201.32377625 46.24310303]
[187.94766235 53.03130722]
[174.57154846 59.81951141]
[161.19544983 66.60771942]
[147.81933594 73.39591980]
[134.44323730 80.18412781]
[134.85525513 102.61454010]
[123.61356354 118.77787781]
[132.66448975 130.73951721]
[141.71539307 142.70115662]
[150.76631165 154.66279602]
[159.81723022 166.62445068]
[168.86814880 178.58609009]
[177.91906738 190.54772949]
[186.96998596 202.50936890]
[201.34884644 211.49183655]
[196.69787598 227.79536438]
[179.74398804 227.83941650]
[175.00834656 211.56028748]
[165.95742798 199.59864807]
[156.90650940 187.63700867]
[147.85559082 175.67535400]
[138.80467224 163.71371460]
[129.75375366 151.75207520]
[120.70284271 139.79043579]
[111.65192413 127.82879639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 21]
[11 20]
[12 19]
[13 18]
[37 47]
[38 46]
[39 45]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
