%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAUUGUCCACAGUGGUCCCUUGGUACUAAUUCCACAUAUUUCGUGUUUCGACAGUUUACGAAACAAUAUAUAACAACGUUAUAUA\
) } def
/len { sequence length } bind def

/coor [
[90.68829346 144.97077942]
[74.93870544 138.48388672]
[64.81027222 149.54801941]
[54.68184280 160.61213684]
[44.55341339 171.67626953]
[34.42498398 182.74040222]
[24.29655266 193.80451965]
[14.16812229 204.86865234]
[11.15679169 220.98895264]
[-4.39731312 226.18527222]
[-16.49346352 215.11210632]
[-12.68817520 199.16055298]
[3.10399580 194.74021912]
[13.23242569 183.67608643]
[23.36085510 172.61196899]
[33.48928452 161.54783630]
[43.61771774 150.48371887]
[53.74614716 139.41958618]
[63.87457657 128.35545349]
[58.62137985 119.92205048]
[55.30496979 110.55615997]
[54.08057404 100.69618225]
[55.00550461 90.80361176]
[58.03646469 81.34149170]
[45.50953674 73.09066772]
[32.98261261 64.83983612]
[18.50848389 70.43262482]
[3.51998878 66.41706848]
[-6.21948957 54.33724594]
[-6.96492338 38.83808517]
[1.57032132 25.87933540]
[16.10426903 20.44389725]
[31.04832077 24.62180901]
[40.65618134 36.80657959]
[41.23343658 52.31291199]
[53.76036453 60.56373978]
[66.28729248 68.81455994]
[71.60697937 63.90409088]
[77.63224792 59.89062119]
[84.21337891 56.87389755]
[91.18680573 54.92887878]
[98.37924957 54.10390472]
[105.61196899 54.41947556]
[112.70523071 55.86775208]
[119.48275757 58.41273499]
[125.77613068 61.99119186]
[131.42893982 66.51418304]
[143.34266663 57.40027618]
[155.25637817 48.28636932]
[167.17008972 39.17245865]
[179.08381653 30.05854988]
[190.99752808 20.94464111]
[202.91125488 11.83073330]
[202.39326477 -3.67769432]
[211.11769104 -16.50984001]
[225.72981262 -21.73148346]
[240.61096191 -17.33479500]
[250.03904724 -5.01039171]
[250.38876343 10.50274277]
[241.52565002 23.23949051]
[226.85774231 28.30231285]
[212.02516174 23.74444962]
[200.11143494 32.85836029]
[188.19772339 41.97226715]
[176.28401184 51.08617783]
[164.37028503 60.20008469]
[152.45657349 69.31399536]
[140.54284668 78.42790222]
[145.66743469 104.85417175]
[135.10221863 129.61271667]
[144.83386230 141.02738953]
[154.56552124 152.44207764]
[164.29716492 163.85676575]
[174.02882385 175.27143860]
[183.76046753 186.68612671]
[193.49212646 198.10079956]
[203.22377014 209.51548767]
[218.10096741 217.64601135]
[214.40661621 234.19255066]
[197.48402405 235.22311401]
[191.80909729 219.24713135]
[182.07743835 207.83245850]
[172.34579468 196.41777039]
[162.61413574 185.00309753]
[152.88249207 173.58840942]
[143.15083313 162.17373657]
[133.41918945 150.75904846]
[123.68753052 139.34436035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[24 37]
[25 36]
[26 35]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
