%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUCUCUUACCGCGUUGGACUUCCAACUUCAUAAGAGAAUGACAGCGCCUGCCGCCAAACAAGCAGCUGCCUGCUGCCGCGUUAGCUUGGCUAACGC\
) } def
/len { sequence length } bind def

/coor [
[75.14006805 110.26183319]
[60.22887039 111.89161682]
[45.31767273 113.52140045]
[30.40647697 115.15118408]
[15.49527836 116.78096771]
[0.58408117 118.41075134]
[-14.32711601 120.04052734]
[-29.23831367 121.67031097]
[-44.14950943 123.30009460]
[-59.06070709 124.92987823]
[-73.97190857 126.55966187]
[-88.88310242 128.18943787]
[-95.14010620 142.14642334]
[-107.46167755 151.03886414]
[-122.48010254 152.55982971]
[-136.15188599 146.40043640]
[-144.84642029 134.30618286]
[-159.75762939 135.93597412]
[-174.66882324 137.56575012]
[-189.58001709 139.19554138]
[-204.49121094 140.82531738]
[-217.39125061 150.95057678]
[-232.50714111 144.59117126]
[-234.28894043 128.28910828]
[-220.90370178 118.81455994]
[-206.12100220 125.91412354]
[-191.20979309 124.28433990]
[-176.29859924 122.65455627]
[-161.38740540 121.02477264]
[-146.47621155 119.39498901]
[-140.59953308 105.70812988]
[-128.58106995 96.74081421]
[-113.58869171 94.98160553]
[-99.63711548 101.00242615]
[-90.51288605 113.27824402]
[-75.60168457 111.64846039]
[-60.69049072 110.01867676]
[-45.77929306 108.38890076]
[-30.86809540 106.75911713]
[-15.95689869 105.12933350]
[-1.04570103 103.49954987]
[13.86549664 101.86976624]
[28.77669334 100.23998260]
[43.68789291 98.61020660]
[58.59909058 96.98042297]
[73.51028442 95.35063934]
[78.89041138 75.19780731]
[99.49385834 61.75925827]
[101.81732941 46.94030380]
[104.14080048 32.12134552]
[95.89073944 18.36213303]
[101.63904572 3.38426447]
[116.97611237 -1.32251954]
[130.13665771 7.85242224]
[131.02503967 23.87085915]
[118.95976257 34.44482040]
[116.63629150 49.26377487]
[114.31281281 64.08273315]
[119.65719604 69.34463501]
[128.80082703 57.45370865]
[136.87976074 44.81524277]
[151.62538147 47.56597137]
[154.60423279 62.26721191]
[142.09324646 70.54099274]
[130.34594727 79.86843872]
[135.69033813 85.13034058]
[150.47135925 82.57668304]
[165.25239563 80.02303314]
[180.03343201 77.46937561]
[194.81445312 74.91572571]
[205.19949341 62.68745804]
[221.22981262 63.32661438]
[230.60832214 76.34288025]
[226.14062500 91.75129700]
[211.25396729 97.73184204]
[197.36810303 89.69675446]
[182.58708191 92.25040436]
[167.80604553 94.80406189]
[153.02502441 97.35771179]
[138.24398804 99.91136932]
[130.79205322 110.61190796]
[121.14581299 116.61854553]
[129.88693237 128.80841064]
[138.62803650 140.99829102]
[147.36915588 153.18815613]
[156.11027527 165.37802124]
[164.85139465 177.56788635]
[173.59249878 189.75776672]
[182.33361816 201.94763184]
[196.47734070 211.29597473]
[191.40969849 227.47483826]
[174.46025085 227.08399963]
[170.14375305 210.68875122]
[161.40263367 198.49887085]
[152.66151428 186.30900574]
[143.92041016 174.11914062]
[135.17929077 161.92927551]
[126.43817139 149.73939514]
[117.69705963 137.54953003]
[108.95594025 125.35966492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[48 58]
[49 57]
[50 56]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
