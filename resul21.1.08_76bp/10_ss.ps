%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAUGUAGGAGGGCCCUGCCCUCCAUAACAUAUCUCGCAUACAUUGCAUGGGAUAAUGAAUUCACCAGUGAGAAUUCAACCUUUCAACAAUGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[78.28438568 118.16227722]
[64.63990784 124.39350891]
[50.99542618 130.62472534]
[37.35094833 136.85595703]
[23.70646667 143.08718872]
[10.06198692 149.31840515]
[-3.58249259 155.54963684]
[-14.30086613 172.47625732]
[-33.39997482 170.26855469]
[-46.62177277 177.35261536]
[-59.84357452 184.43669128]
[-73.06537628 191.52075195]
[-86.28717804 198.60481262]
[-99.50897980 205.68888855]
[-112.73077393 212.77294922]
[-123.83672333 225.58288574]
[-139.22047424 218.45710754]
[-136.63180542 201.70195007]
[-119.81484222 199.55114746]
[-106.59304047 192.46708679]
[-93.37123871 185.38301086]
[-80.14944458 178.29895020]
[-66.92764282 171.21488953]
[-53.70584106 164.13081360]
[-40.48403931 157.04675293]
[-38.34267426 146.82592773]
[-30.69978905 139.38813782]
[-19.98788643 137.44604492]
[-9.81371784 141.90515137]
[3.83076215 135.67391968]
[17.47524261 129.44270325]
[31.11972237 123.21147919]
[44.76420212 116.98024750]
[58.40868378 110.74902344]
[72.05316162 104.51779938]
[70.93291473 89.98822021]
[77.45610046 75.65988922]
[91.01335144 65.54296112]
[84.99938965 51.80133438]
[78.98543549 38.05970764]
[64.62866974 30.89989853]
[61.41617203 15.18177509]
[71.81230164 2.96293330]
[87.84203339 3.61662364]
[97.20872498 16.64139175]
[92.72705841 32.04574966]
[98.74102020 45.78737640]
[104.75497437 59.52900314]
[106.06531525 44.58634567]
[103.40873718 29.82346725]
[109.72933960 16.22016144]
[122.72547150 8.73012543]
[137.66453552 10.08088303]
[149.10639954 19.78055000]
[152.88449097 34.29695892]
[147.62298584 48.34389877]
[135.23832703 56.80599594]
[125.50794983 68.22176361]
[139.52017212 62.86847305]
[153.53237915 57.51518250]
[167.54460144 52.16188812]
[181.55682373 46.80859375]
[195.56903076 41.45529938]
[209.58125305 36.10200882]
[213.49096680 21.08555794]
[225.50178528 11.26110649]
[240.99530029 10.40635490]
[254.01394653 18.84997177]
[259.55178833 33.34521484]
[255.47938538 48.31836700]
[243.36270142 58.01194382]
[227.86082458 58.69857407]
[214.93455505 50.11422348]
[200.92233276 55.46751785]
[186.91011047 60.82081223]
[172.89788818 66.17410278]
[158.88568115 71.52739716]
[144.87345886 76.88069153]
[130.86123657 82.23398590]
[131.83401489 102.83103180]
[121.65723419 118.23185730]
[130.16313171 130.58700562]
[138.66902161 142.94215393]
[147.17492676 155.29730225]
[155.68081665 167.65245056]
[164.18672180 180.00759888]
[172.69261169 192.36274719]
[187.72433472 198.91862488]
[189.29351807 215.24252319]
[175.78593445 224.54182434]
[161.09701538 217.25019836]
[160.33746338 200.86865234]
[151.83157349 188.51350403]
[143.32566833 176.15835571]
[134.81977844 163.80320740]
[126.31388092 151.44805908]
[117.80798340 139.09291077]
[109.30208588 126.73775482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[38 48]
[39 47]
[40 46]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
