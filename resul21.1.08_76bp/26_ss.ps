%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUGGCCUCACUUGUGUAUAGACACAGGUAUUGAGGCCAUGGCUCUCCUAAAUGGUCAUUGCUGUAGGACGGGUCCUACCCCGGAGCGGGCGCUCCGG\
) } def
/len { sequence length } bind def

/coor [
[71.40797424 111.60250092]
[56.55467987 113.69522858]
[41.70138168 115.78795624]
[26.84808159 117.88069153]
[11.99478340 119.97341919]
[-2.85851526 122.06614685]
[-17.71181488 124.15888214]
[-32.56511307 126.25160980]
[-47.41841125 128.34434509]
[-62.27170944 130.43707275]
[-77.12500763 132.52980042]
[-91.86454010 135.31301880]
[-106.45821381 138.78065491]
[-121.05189514 142.24830627]
[-135.64556885 145.71595764]
[-150.23924255 149.18359375]
[-164.83293152 152.65124512]
[-179.42660522 156.11888123]
[-194.02027893 159.58653259]
[-205.56407166 171.23440552]
[-221.35231018 166.80001831]
[-225.14340210 150.84509277]
[-213.03739929 139.78268433]
[-197.48793030 144.99285889]
[-182.89425659 141.52520752]
[-168.30056763 138.05755615]
[-153.70689392 134.58992004]
[-139.11322021 131.12226868]
[-124.51953888 127.65462494]
[-109.92585754 124.18698120]
[-95.33218384 120.71933746]
[-93.14319611 117.74219513]
[-89.31917572 115.75939178]
[-84.38475800 115.56717682]
[-79.21773529 117.67649841]
[-64.36444092 115.58377075]
[-49.51114273 113.49104309]
[-34.65784454 111.39830780]
[-19.80454445 109.30558014]
[-4.95124531 107.21285248]
[9.90205288 105.12011719]
[24.75535202 103.02738953]
[39.60865021 100.93466187]
[54.46194839 98.84193420]
[69.31524658 96.74919891]
[70.53207397 84.27446747]
[76.95464325 72.41295624]
[88.21090698 63.35868454]
[103.00817871 59.07436371]
[105.33164978 44.25540543]
[97.08158875 30.49619102]
[102.82989502 15.51832390]
[118.16696167 10.81153965]
[131.32751465 19.98648262]
[132.21588135 36.00492096]
[120.15061188 46.57887650]
[117.82713318 61.39783478]
[123.08903503 66.74221802]
[132.23266602 54.85128784]
[137.70960999 40.88694000]
[152.40481567 37.87845993]
[162.92883301 48.56700516]
[159.69277954 63.21377563]
[145.64453125 68.47338104]
[133.61283875 77.43097687]
[138.87474060 82.77535248]
[153.72804260 80.68262482]
[168.58134460 78.58988953]
[183.43463135 76.49716187]
[198.28793335 74.40443420]
[213.14123535 72.31170654]
[225.72013855 61.79014969]
[241.02648926 67.67637634]
[243.31442261 83.91513824]
[230.23031616 93.80139160]
[215.23396301 87.16500092]
[200.38066101 89.25772858]
[185.52737427 91.35046387]
[170.67407227 93.44319153]
[155.82077026 95.53591919]
[140.96746826 97.62865448]
[133.90963745 111.92768860]
[122.90509796 120.67554474]
[131.26287842 133.13136292]
[139.62066650 145.58718872]
[147.97845459 158.04299927]
[156.33622742 170.49882507]
[164.69401550 182.95465088]
[173.05180359 195.41046143]
[188.00418091 202.14533997]
[189.37835693 218.48680115]
[175.76071167 227.62417603]
[161.15989685 220.15769958]
[160.59597778 203.76824951]
[152.23820496 191.31242371]
[143.88041687 178.85661316]
[135.52262878 166.40078735]
[127.16484833 153.94497681]
[118.80706024 141.48915100]
[110.44927979 129.03332520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[49 57]
[50 56]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
