%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCGGACUUUCCACGAGUGCAUGAAGUCCGCCGGCGCACUUGCUGCAUUGGGAUUAAGUUUCAGAAACUUAAAGGACUGAUAACAUCAGUCC\
) } def
/len { sequence length } bind def

/coor [
[77.04309082 116.28391266]
[62.93830109 121.38831329]
[48.83351135 126.49270630]
[34.72872162 131.59710693]
[20.62392998 136.70150757]
[6.51913929 141.80589294]
[-7.58565140 146.91029358]
[-21.69044304 152.01469421]
[-35.79523468 157.11909485]
[-49.90002441 162.22349548]
[-64.00481415 167.32789612]
[-78.10960388 172.43228149]
[-90.14743805 188.43476868]
[-109.00276947 184.72276306]
[-122.73936462 190.74819946]
[-132.01023865 204.27531433]
[-148.33740234 202.74044800]
[-154.92486572 187.72254944]
[-144.99601746 174.67073059]
[-128.76480103 177.01159668]
[-115.02819824 170.98616028]
[-112.08448792 160.94837952]
[-103.86120605 154.12962341]
[-93.01001740 153.05084229]
[-83.21400452 158.32749939]
[-69.10921478 153.22309875]
[-55.00442123 148.11869812]
[-40.89963150 143.01429749]
[-26.79483986 137.90991211]
[-12.69004917 132.80551147]
[1.41474164 127.70111084]
[15.51953220 122.59671021]
[29.62432289 117.49231720]
[43.72911453 112.38791656]
[57.83390427 107.28351593]
[71.93869781 102.17912292]
[72.26990509 81.56251526]
[87.91257477 63.49464417]
[83.51382446 49.15410614]
[79.11507416 34.81356812]
[65.67388916 26.05490303]
[64.28474426 10.07210445]
[76.01326752 -0.87418973]
[91.86233521 1.61308014]
[99.67390442 15.62589359]
[93.45560455 30.41481781]
[97.85435486 44.75535583]
[102.25310516 59.09589386]
[109.07065582 62.22175598]
[105.45693970 47.66355896]
[114.58573914 35.76124954]
[129.58305359 35.47729111]
[139.15586853 47.02550507]
[136.09584045 61.71006012]
[122.70575714 68.47348022]
[129.52330017 71.59934998]
[143.25990295 65.57391357]
[156.99650574 59.54848480]
[170.73310852 53.52305222]
[184.46971130 47.49762344]
[198.20629883 41.47219086]
[211.94290161 35.44675827]
[225.67950439 29.42132759]
[237.75576782 17.52174377]
[252.53335571 25.83193398]
[248.63877869 42.33249664]
[231.70494080 43.15792847]
[217.96833801 49.18336105]
[204.23173523 55.20878983]
[190.49513245 61.23422241]
[176.75852966 67.25965118]
[163.02194214 73.28508759]
[149.28533936 79.31051636]
[135.54873657 85.33594513]
[133.04354858 104.12590790]
[122.58099365 116.80130768]
[131.79418945 128.63841248]
[141.00737000 140.47552490]
[150.22056580 152.31263733]
[159.43376160 164.14973450]
[168.64694214 175.98684692]
[177.86013794 187.82395935]
[187.07333374 199.66105652]
[201.57333374 208.44662476]
[197.14512634 224.81205750]
[180.19340515 225.08729553]
[175.23622131 208.87425232]
[166.02302551 197.03713989]
[156.80984497 185.20004272]
[147.59664917 173.36293030]
[138.38345337 161.52581787]
[129.17027283 149.68872070]
[119.95707703 137.85160828]
[110.74388885 126.01450348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[14 21]
[15 20]
[38 48]
[39 47]
[40 46]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
