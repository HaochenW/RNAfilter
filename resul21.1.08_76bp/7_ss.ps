%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUGGCAGACAGAUACAGGGUGUAUCGGUUCCUGCCACAGUCGAUGGGCCACAUAAACAAUCCAUGUACUCUCUACAUGGUCCAUGUAUCAUACAUGG\
) } def
/len { sequence length } bind def

/coor [
[73.16645050 113.15634918]
[58.47198868 116.16845703]
[43.77752686 119.18056488]
[29.08306313 122.19267273]
[14.38860130 125.20477295]
[-0.30586049 128.21688843]
[-15.00032234 131.22898865]
[-29.69478416 134.24108887]
[-44.38924789 137.25320435]
[-59.08370972 140.26530457]
[-73.67738342 143.73295593]
[-88.15616608 147.65278625]
[-99.45487976 158.72750854]
[-113.76182556 154.58497620]
[-128.24060059 158.50480652]
[-142.71937561 162.42463684]
[-157.19815063 166.34446716]
[-171.67692566 170.26429749]
[-186.15570068 174.18412781]
[-199.86441040 184.15948486]
[-213.24487305 173.74797058]
[-206.94432068 158.00822449]
[-190.07553101 159.70535278]
[-175.59675598 155.78552246]
[-161.11798096 151.86569214]
[-146.63920593 147.94586182]
[-132.16043091 144.02603149]
[-117.68165588 140.10620117]
[-107.41855621 129.31184387]
[-92.07598877 133.17401123]
[-77.59721375 129.25418091]
[-74.41443634 125.47784424]
[-68.75775146 123.77148438]
[-62.09581375 125.57084656]
[-47.40135193 122.55873871]
[-32.70689011 119.54663086]
[-18.01242828 116.53452301]
[-3.31796670 113.52242279]
[11.37649536 110.51031494]
[26.07095718 107.49820709]
[40.76541901 104.48609924]
[55.45988083 101.47399139]
[70.15434265 98.46189117]
[71.70758057 82.50472260]
[81.96268463 68.10235596]
[99.50705719 59.97922516]
[99.97355652 44.98648071]
[100.44004822 29.99373627]
[90.54625702 17.36470604]
[94.39139557 1.78926134]
[109.02580261 -4.78445005]
[123.22321320 2.68636084]
[126.09259033 18.47072792]
[115.43279266 30.46023369]
[114.96630096 45.45298004]
[114.49980164 60.44572067]
[120.16097260 65.36518860]
[120.79383850 50.37854385]
[132.90536499 41.52919388]
[147.37551880 45.48073959]
[153.30819702 59.25764847]
[146.23608398 72.48584747]
[131.48332214 75.20411682]
[137.14448547 80.12358093]
[151.92552185 77.56992340]
[166.70654297 75.01627350]
[181.48757935 72.46262360]
[196.26861572 69.90896606]
[211.04963684 67.35531616]
[225.83067322 64.80165863]
[236.21571350 52.57339859]
[252.24603271 53.21255112]
[261.62454224 66.22882080]
[257.15682983 81.63723755]
[242.27017212 87.61778259]
[228.38432312 79.58268738]
[213.60328674 82.13634491]
[198.82226562 84.68999481]
[184.04122925 87.24365234]
[169.26020813 89.79730225]
[154.47917175 92.35095978]
[139.69813538 94.90460968]
[133.23690796 110.82254028]
[121.71871948 120.52866364]
[129.68508911 133.23838806]
[137.65145874 145.94810486]
[145.61782837 158.65782166]
[153.58418274 171.36755371]
[161.55055237 184.07727051]
[169.51692200 196.78698730]
[183.05209351 206.99656677]
[176.98843384 222.82907104]
[160.09606934 221.38523865]
[156.80720520 204.75335693]
[148.84083557 192.04364014]
[140.87446594 179.33390808]
[132.90809631 166.62419128]
[124.94173431 153.91447449]
[116.97536469 141.20475769]
[109.00900269 128.49502563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 31]
[12 30]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[46 56]
[47 55]
[48 54]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
