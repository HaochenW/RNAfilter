%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUAAAUGAACCGGUCCUAGACCGGGCGAAUUUAAAGAGUCCCGGAGACCCCCCUAAUCGAAAGUCGAUCAGUAGAUAGGUAAUCUACU\
) } def
/len { sequence length } bind def

/coor [
[76.05240631 113.15876007]
[61.42848969 116.49657440]
[46.80457306 119.83438873]
[32.18065262 123.17220306]
[17.55673409 126.51001740]
[2.93281507 129.84782410]
[-11.69110394 133.18563843]
[-26.31502151 136.52345276]
[-32.67096710 152.08685303]
[-46.86891556 160.77714539]
[-63.29159546 159.38493347]
[-75.57582092 148.64553833]
[-90.07582092 152.48612976]
[-104.57581329 156.32672119]
[-119.07581329 160.16729736]
[-133.57580566 164.00788879]
[-148.07580566 167.84848022]
[-161.83886719 177.74870300]
[-175.16218567 167.26417542]
[-168.77565002 151.55912781]
[-151.91639709 153.34848022]
[-137.41639709 149.50788879]
[-122.91639709 145.66731262]
[-108.41640472 141.82672119]
[-93.91640472 137.98612976]
[-79.41640472 134.14555359]
[-75.71611023 121.19504547]
[-65.98379517 111.72738647]
[-52.72513580 108.33136749]
[-39.42975616 112.01271057]
[-29.65283585 121.89953613]
[-15.02891731 118.56172180]
[-0.40499887 115.22390747]
[14.21891975 111.88609314]
[28.84283829 108.54827881]
[43.46675873 105.21046448]
[58.09067535 101.87265015]
[72.71459198 98.53483582]
[75.62968445 78.00269318]
[94.04728699 62.13016891]
[93.52954102 47.13910675]
[93.01180267 32.14804459]
[82.31108093 20.19504356]
[85.12649536 4.40096092]
[99.29828644 -3.11833453]
[113.95507812 3.40531635]
[117.85343170 18.96752739]
[108.00286102 31.63030052]
[108.52060699 46.62136459]
[109.03834534 61.61242676]
[115.13626862 65.97881317]
[121.86900330 52.57470322]
[128.27552795 39.01164627]
[143.26483154 39.57807159]
[148.62948608 53.58594513]
[137.85301208 64.01998138]
[127.33210754 74.71159363]
[133.43002319 79.07798767]
[147.78881836 74.73920441]
[162.14761353 70.40042114]
[176.50640869 66.06163788]
[190.86520386 61.72285843]
[204.27835083 51.35348129]
[217.95561218 61.37189865]
[212.11495972 77.28802490]
[195.20399475 76.08164978]
[180.84519958 80.42043304]
[166.48640442 84.75921631]
[152.12760925 89.09799957]
[137.76881409 93.43678284]
[132.07308960 107.00792694]
[122.51665497 115.48031616]
[132.07003784 127.04461670]
[141.62341309 138.60891724]
[151.17678833 150.17321777]
[160.73016357 161.73750305]
[170.28353882 173.30180359]
[179.83691406 184.86610413]
[195.60714722 187.81219482]
[203.00885010 202.04576111]
[196.36405945 216.64802551]
[180.77011108 220.41738892]
[168.18933105 210.46231079]
[168.27262878 194.41947937]
[158.71925354 182.85517883]
[149.16586304 171.29087830]
[139.61248779 159.72659302]
[130.05911255 148.16229248]
[120.50573730 136.59799194]
[110.95236206 125.03369141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[40 50]
[41 49]
[42 48]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
