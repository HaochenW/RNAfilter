%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGCAUCAGCAGGUGUCCACACCUGGCAGAAGAUGCGCUUCCUGAGUGCAGCUCCUCCAUUUCCACACUUGCGAGAAAGUGUGUGGUGUAUGCCAUACACC\
) } def
/len { sequence length } bind def

/coor [
[73.38596344 113.76735687]
[58.76204681 117.10517120]
[44.13813019 120.44298553]
[29.51420975 123.78079987]
[14.89029121 127.11861420]
[0.26637247 130.45642090]
[-14.35754585 133.79423523]
[-28.98146439 137.13204956]
[-43.60538483 140.46986389]
[-58.22930145 143.80767822]
[-67.93237305 162.27560425]
[-87.73976135 167.85156250]
[-105.16349792 157.44921875]
[-119.28429413 162.50917053]
[-133.40509033 167.56910706]
[-147.52587891 172.62905884]
[-161.64668274 177.68901062]
[-175.76748657 182.74896240]
[-185.95263672 195.60177612]
[-202.13435364 192.94021606]
[-207.66627502 177.50228882]
[-196.85763550 165.16918945]
[-180.82742310 168.62815857]
[-166.70663452 163.56822205]
[-152.58583069 158.50827026]
[-138.46504211 153.44831848]
[-124.34423828 148.38836670]
[-110.22344208 143.32841492]
[-108.96240234 133.69067383]
[-104.16685486 125.16880035]
[-96.49162292 119.01568604]
[-87.01842499 116.15461731]
[-77.10350037 117.04090881]
[-68.18345642 121.59008026]
[-61.56711578 129.18376160]
[-46.94319916 125.84594727]
[-32.31927872 122.50813293]
[-17.69536018 119.17031860]
[-3.07144165 115.83250427]
[11.55247688 112.49468994]
[26.17639542 109.15688324]
[40.80031586 105.81906891]
[55.42423248 102.48125458]
[70.04814911 99.14344025]
[71.46018219 82.97483063]
[81.74849701 68.39064026]
[99.42893219 60.23575211]
[98.98020172 45.24246597]
[98.53147125 30.24917984]
[98.08274078 15.25589275]
[91.56526947 -0.39527163]
[104.80056763 -10.99070835]
[118.64582062 -1.20576179]
[113.07602692 14.80716038]
[113.52475739 29.80044746]
[113.97348785 44.79373169]
[114.42221832 59.78702164]
[120.14344025 64.63652039]
[126.93780518 51.26353836]
[129.69757080 36.51959991]
[142.48387146 28.67673302]
[156.87727356 32.89925385]
[163.40013123 46.40674591]
[157.75730896 60.30489731]
[143.66516113 65.44219971]
[131.58589172 74.33551025]
[137.30711365 79.18500519]
[152.17135620 77.17150879]
[167.03559875 75.15801239]
[181.89984131 73.14450836]
[196.76409912 71.13101196]
[211.62834167 69.11751556]
[226.49258423 67.10401154]
[235.86605835 54.37948608]
[251.50401306 52.09255981]
[264.12872314 61.60003662]
[266.25018311 77.26129150]
[256.60977173 89.78478241]
[240.92695618 91.74054718]
[228.50608826 81.96826172]
[213.64184570 83.98175812]
[198.77758789 85.99526215]
[183.91334534 88.00875854]
[169.04910278 90.02225494]
[154.18486023 92.03575897]
[139.32060242 94.04925537]
[133.15580750 110.78636169]
[121.31772614 121.05710602]
[129.01121521 133.93383789]
[136.70469666 146.81056213]
[144.39819336 159.68730164]
[152.09167480 172.56402588]
[159.78517151 185.44076538]
[167.47865295 198.31748962]
[180.79301453 208.81341553]
[174.39305115 224.51300049]
[157.53533936 222.70922852]
[154.60192871 206.01098633]
[146.90843201 193.13424683]
[139.21495056 180.25752258]
[131.52145386 167.38078308]
[123.82797241 154.50405884]
[116.13448334 141.62731934]
[108.44099426 128.75059509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[47 57]
[48 56]
[49 55]
[50 54]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
