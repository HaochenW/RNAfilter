%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAACGGUCUUGGACACAAGUGUCCCGGACCGUUAUUAUCCCUGGUGGAGUUCCUAAGCGUAUAUUUACGCUCGACAAACUGACUUUGUC\
) } def
/len { sequence length } bind def

/coor [
[72.43746948 114.43629456]
[57.86396408 117.98775482]
[43.29045868 121.53922272]
[28.71695137 125.09069061]
[14.14344501 128.64215088]
[-0.43006128 132.19361877]
[-15.00356770 135.74508667]
[-29.57707405 139.29655457]
[-44.15058136 142.84802246]
[-58.72408676 146.39949036]
[-73.29759216 149.95095825]
[-84.87346649 160.73565674]
[-99.07078552 156.23170471]
[-113.64429474 159.78317261]
[-128.21780396 163.33464050]
[-142.79130554 166.88610840]
[-157.36480713 170.43757629]
[-168.84146118 182.15161133]
[-184.65492249 177.80804443]
[-188.53765869 161.87516785]
[-176.49543762 150.74336243]
[-160.91627502 155.86407471]
[-146.34277344 152.31260681]
[-131.76925659 148.76113892]
[-117.19575500 145.20967102]
[-102.62225342 141.65820312]
[-92.08876801 131.12753296]
[-76.84906006 135.37744141]
[-62.27555466 131.82598877]
[-47.70204544 128.27452087]
[-33.12854004 124.72305298]
[-18.55503464 121.17158508]
[-3.98152757 117.62011719]
[10.59197903 114.06864929]
[25.16548538 110.51718140]
[39.73899078 106.96572113]
[54.31249619 103.41425323]
[68.88600159 99.86278534]
[68.83494568 87.50859833]
[73.83025360 75.22605133]
[83.74230957 65.10426331]
[97.57695007 59.11372757]
[97.06483459 44.12247086]
[87.93080902 30.50257492]
[95.40087128 15.90359306]
[111.79045868 15.34370804]
[120.23937225 29.39888191]
[112.05609131 43.61035538]
[112.56820679 58.60161209]
[118.54425049 63.13338470]
[125.28201294 49.73179626]
[129.17977905 35.24706650]
[143.37258911 30.39280319]
[155.32447815 39.45660782]
[154.47875977 54.43274689]
[141.58311462 62.09331512]
[130.49632263 72.19692993]
[136.47236633 76.72869873]
[151.04586792 73.17723846]
[165.61936951 69.62577057]
[180.19288635 66.07430267]
[194.76638794 62.52283859]
[209.33988953 58.97137070]
[220.81654358 47.25733948]
[236.63000488 51.60090637]
[240.51274109 67.53377533]
[228.47052002 78.66558075]
[212.89135742 73.54487610]
[198.31785583 77.09634399]
[183.74435425 80.64781189]
[169.17083740 84.19927979]
[154.59733582 87.75074005]
[140.02383423 91.30220795]
[134.92164612 108.89286804]
[123.54119873 120.34481049]
[132.19140625 132.59936523]
[140.84161377 144.85391235]
[149.49182129 157.10845947]
[158.14201355 169.36300659]
[166.79222107 181.61755371]
[182.29406738 185.74943542]
[188.59663391 200.50263977]
[180.86512756 214.55978394]
[165.03050232 217.13743591]
[153.23973083 206.25822449]
[154.53767395 190.26776123]
[145.88746643 178.01321411]
[137.23727417 165.75866699]
[128.58706665 153.50411987]
[119.93685913 141.24957275]
[111.28665161 128.99501038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[42 49]
[43 48]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
