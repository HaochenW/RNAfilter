%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAGAGGUUGCUUCUUUGUAUCAAAGAACGCACACCUCUAGAUACUCGGCCAGAGCGUAACGUACCUACGGGGUCGUAGGACCGGUGUAACUCACCGG\
) } def
/len { sequence length } bind def

/coor [
[75.06754303 111.08689117]
[60.21424484 113.17961884]
[45.36094666 115.27235413]
[30.50764847 117.36508179]
[15.65434933 119.45780945]
[0.80105096 121.55054474]
[-14.05224800 123.64327240]
[-28.90554619 125.73600006]
[-43.75884628 127.82872772]
[-58.61214447 129.92146301]
[-73.43109894 132.24493408]
[-88.21212769 134.79858398]
[-102.99316406 137.35223389]
[-117.73268890 140.13545227]
[-132.42715454 143.14756775]
[-147.12161255 146.15966797]
[-161.81607056 149.17176819]
[-176.51054382 152.18388367]
[-191.20500183 155.19598389]
[-205.89945984 158.20809937]
[-220.20181274 167.31188965]
[-232.90911865 156.08865356]
[-225.64221191 140.77105713]
[-208.91157532 143.51362610]
[-194.21710205 140.50152588]
[-179.52264404 137.48942566]
[-164.82818604 134.47731018]
[-150.13371277 131.46520996]
[-135.43925476 128.45309448]
[-120.74479675 125.44099426]
[-114.71822357 120.93478394]
[-105.54681396 122.57121277]
[-90.76578522 120.01755524]
[-75.98475647 117.46390533]
[-69.82095337 113.14730072]
[-60.70487213 115.06816101]
[-45.85157394 112.97543335]
[-30.99827576 110.88270569]
[-16.14497757 108.78997040]
[-1.29167914 106.69724274]
[13.56161976 104.60451508]
[28.41491890 102.51177979]
[43.26821518 100.41905212]
[58.12151718 98.32632446]
[72.97481537 96.23358917]
[78.84708405 75.12548828]
[100.87003326 61.99129486]
[102.26772308 47.05655670]
[103.66541290 32.12181473]
[94.57589722 18.90212250]
[99.38191986 3.59585690]
[114.39669800 -2.05532241]
[128.10218811 6.28368473]
[129.98471069 22.21590614]
[118.60015106 33.51950455]
[117.20246124 48.45424652]
[115.80477142 63.38898468]
[121.06667328 68.73336792]
[129.45335388 56.29698563]
[133.21823120 41.77714539]
[146.57131958 34.94377899]
[160.55029297 40.38331223]
[165.77270508 54.44483566]
[158.73338318 67.69050598]
[144.15577698 71.22986603]
[131.59048462 79.42212677]
[136.85238647 84.76650238]
[151.80705261 83.60124969]
[166.76171875 82.43598938]
[181.71638489 81.27072906]
[196.67106628 80.10547638]
[211.62573242 78.94021606]
[224.83442688 69.22103882]
[239.74522400 76.04747009]
[241.01918030 92.39705658]
[227.34574890 101.45075226]
[212.79098511 93.89488983]
[197.83631897 95.06014252]
[182.88165283 96.22540283]
[167.92698669 97.39065552]
[152.97230530 98.55591583]
[138.01763916 99.72117615]
[130.52980042 111.58095551]
[120.28825378 118.24645996]
[128.25462341 130.95617676]
[136.22099304 143.66590881]
[144.18734741 156.37562561]
[152.15371704 169.08534241]
[160.12008667 181.79505920]
[175.37248230 186.76937866]
[180.85794067 201.84548950]
[172.36848450 215.45831299]
[156.41650391 217.16523743]
[145.23898315 205.65686035]
[147.41036987 189.76142883]
[139.44400024 177.05171204]
[131.47763062 164.34199524]
[123.51126862 151.63226318]
[115.54489899 138.92254639]
[107.57852936 126.21282959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 34]
[12 33]
[13 32]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[47 57]
[48 56]
[49 55]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
