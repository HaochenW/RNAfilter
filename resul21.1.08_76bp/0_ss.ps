%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCGGACGCCAGGACUACUUAGUCCCUUCGUCCGAAUAGAAGCAGAUGGCCGGUUUACUGCGCGUUUUUAUAAACGCGCACUGGGAACAGGGUUCCCA\
) } def
/len { sequence length } bind def

/coor [
[73.01078796 116.05554199]
[58.66092300 120.42375946]
[44.31105804 124.79197693]
[29.96119308 129.16020203]
[15.61132622 133.52842712]
[1.26146054 137.89663696]
[-13.08840561 142.26486206]
[-27.43827057 146.63308716]
[-41.78813553 151.00129700]
[-56.13800430 155.36952209]
[-61.29497528 169.88543701]
[-73.86363220 178.48091125]
[-88.90567780 178.03263855]
[-100.65873718 168.92201233]
[-115.00860596 173.29023743]
[-129.35847473 177.65844727]
[-143.70832825 182.02667236]
[-158.05819702 186.39489746]
[-168.85551453 198.73791504]
[-184.88888550 195.29365540]
[-189.66456604 179.60528564]
[-178.26972961 167.81164551]
[-162.42642212 172.04502869]
[-148.07655334 167.67680359]
[-133.72668457 163.30859375]
[-119.37682343 158.94036865]
[-105.02695465 154.57214355]
[-100.34366608 140.45816040]
[-88.10270691 131.70469666]
[-72.87657166 131.83920288]
[-60.50622177 141.01965332]
[-46.15635681 136.65144348]
[-31.80649185 132.28321838]
[-17.45662498 127.91500092]
[-3.10676003 123.54677582]
[11.24310589 119.17855835]
[25.59297180 114.81033325]
[39.94283676 110.44211578]
[54.29270172 106.07389069]
[68.64257050 101.70567322]
[67.96492004 89.30821991]
[72.32550049 76.75642395]
[81.68222809 66.12669373]
[95.13639069 59.41299057]
[92.81291199 44.59403610]
[80.74763489 34.02007675]
[81.63601685 18.00163841]
[94.79656219 8.82669640]
[110.13362885 13.53348064]
[115.88193512 28.51134872]
[107.63187408 42.27056122]
[109.95534515 57.08951950]
[116.24748993 61.17105103]
[121.31303406 47.05226135]
[124.65093231 32.42835999]
[138.55014038 26.78814125]
[151.13468933 34.95080566]
[151.65190125 49.94188690]
[139.65884399 58.95264435]
[128.83178711 69.33411407]
[135.12393188 73.41564178]
[149.60270691 69.49581146]
[164.08148193 65.57598877]
[178.56025696 61.65615845]
[193.03903198 57.73632812]
[207.51780701 53.81649780]
[221.99658203 49.89667130]
[236.47535706 45.97684097]
[250.95413208 42.05701447]
[262.13009644 30.05576515]
[278.04858398 33.99699020]
[282.33404541 49.82629395]
[270.57794189 61.25984573]
[254.87396240 56.53578949]
[240.39518738 60.45561600]
[225.91641235 64.37544250]
[211.43763733 68.29527283]
[196.95886230 72.21510315]
[182.48008728 76.13493347]
[168.00131226 80.05476379]
[153.52253723 83.97459412]
[139.04376221 87.89441681]
[135.15101624 108.39926910]
[122.55050659 121.85572052]
[130.51687622 134.56544495]
[138.48324585 147.27516174]
[146.44961548 159.98487854]
[154.41596985 172.69459534]
[162.38233948 185.40432739]
[170.34870911 198.11404419]
[183.88388062 208.32360840]
[177.82022095 224.15611267]
[160.92785645 222.71229553]
[157.63899231 206.08041382]
[149.67262268 193.37068176]
[141.70625305 180.66096497]
[133.73988342 167.95124817]
[125.77352142 155.24153137]
[117.80715179 142.53179932]
[109.84078979 129.82208252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[44 52]
[45 51]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
