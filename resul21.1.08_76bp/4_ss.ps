%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAAAACUCGAUCGUGCUAGCACGUGCUGGCGAGUUUUUGGUGGCCGCACAGGAAGUCAUGACCGUUGGCGUACAACGUCCGUGCUGAAAGCACGG\
) } def
/len { sequence length } bind def

/coor [
[72.87140656 111.47763062]
[58.02408600 113.61235046]
[43.17676544 115.74707031]
[28.32944298 117.88179779]
[13.48212147 120.01651764]
[-1.36520028 122.15123749]
[-16.21252251 124.28596497]
[-31.05984306 126.42068481]
[-45.90716553 128.55540466]
[-60.75448608 130.69012451]
[-75.60180664 132.82485962]
[-65.11060333 143.54560852]
[-64.98092651 158.54504395]
[-75.28520203 169.44558716]
[-90.26822662 170.15899658]
[-101.56159210 160.28681946]
[-102.85765076 145.34291077]
[-93.43327332 133.67427063]
[-108.41628265 132.96054077]
[-123.39929199 132.24681091]
[-138.38229370 131.53308105]
[-153.36531067 130.81935120]
[-168.34832764 130.10562134]
[-182.66859436 138.09700012]
[-196.60884094 129.45977783]
[-195.82853699 113.07920837]
[-181.13038635 105.80620575]
[-167.63459778 115.12261963]
[-152.65158081 115.83634186]
[-137.66856384 116.55007172]
[-122.68556213 117.26380157]
[-107.70255280 117.97753143]
[-92.71954346 118.69126129]
[-77.73653412 117.97753143]
[-62.88920975 115.84281158]
[-48.04188919 113.70808411]
[-33.19456482 111.57336426]
[-18.34724426 109.43864441]
[-3.49992275 107.30391693]
[11.34739876 105.16919708]
[26.19472122 103.03446960]
[41.04204178 100.89974976]
[55.88936234 98.76502991]
[70.73668671 96.63030243]
[73.27587891 80.90814209]
[84.41165161 67.29526520]
[102.41107178 60.45713043]
[103.83691406 45.52505112]
[94.77233887 32.28824615]
[99.60720062 16.99106789]
[114.63261414 11.36820412]
[128.32235718 19.73303223]
[130.17483521 35.66877365]
[118.76898956 46.95089340]
[117.34314728 61.88296890]
[122.60420990 67.22817993]
[131.01432800 54.80762863]
[132.92356873 39.92963028]
[144.41877747 30.29323959]
[159.40161133 31.01068115]
[169.92347717 41.70134354]
[170.40240479 56.69369507]
[160.58430481 68.03411102]
[145.67875671 69.70659637]
[133.12634277 77.91858673]
[138.38739014 83.26379395]
[153.34022522 82.07504272]
[168.29304504 80.88629913]
[183.24586487 79.69754791]
[198.19868469 78.50879669]
[209.66033936 67.28338623]
[225.56469727 69.38847351]
[233.71125793 83.20921326]
[227.85072327 98.14351654]
[212.47875977 102.73506927]
[199.38743591 93.46161652]
[184.43461609 94.65036774]
[169.48179626 95.83911896]
[154.52896118 97.02787018]
[139.57614136 98.21661377]
[132.45965576 111.79576874]
[121.71004486 119.90905762]
[129.81965637 132.52786255]
[137.92926025 145.14666748]
[146.03887939 157.76547241]
[154.14848328 170.38426208]
[162.25810242 183.00306702]
[170.36772156 195.62187195]
[184.01750183 205.67770386]
[178.13330078 221.57777405]
[161.22569275 220.32510376]
[157.74891663 203.73149109]
[149.63929749 191.11268616]
[141.52969360 178.49388123]
[133.42007446 165.87507629]
[125.31046295 153.25627136]
[117.20085144 140.63746643]
[109.09123993 128.01866150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[47 55]
[48 54]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
