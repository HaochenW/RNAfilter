%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUCUGAUGUUGCCCUGGAAAGCUUUCCAGGGUCUCGCAUCAGAUUUAACUAAACCUGUUUAGGACAUGCUUGCAUGGGGCUAUCCAUGCAAAAGUCAAUGAAAUUGACU\
) } def
/len { sequence length } bind def

/coor [
[74.98505402 111.44365692]
[60.16007614 113.72837067]
[45.33509445 116.01307678]
[30.51011086 118.29779053]
[15.68512917 120.58250427]
[0.86014724 122.86721802]
[-13.96483421 125.15193176]
[-28.78981590 127.43664551]
[-43.61479950 129.72135925]
[-58.43978119 132.00607300]
[-73.26476288 134.29078674]
[-88.08974457 136.57550049]
[-103.05881500 149.93608093]
[-120.82095337 142.50845337]
[-135.49604797 145.61352539]
[-150.17114258 148.71861267]
[-164.84623718 151.82368469]
[-179.52134705 154.92875671]
[-194.19644165 158.03384399]
[-208.87153625 161.13891602]
[-223.54663086 164.24398804]
[-238.22174072 167.34907532]
[-250.05052185 178.70741272]
[-265.72406006 173.88330078]
[-269.11877441 157.83935547]
[-256.74246216 147.08023071]
[-241.32681274 152.67396545]
[-226.65171814 149.56889343]
[-211.97660828 146.46382141]
[-197.30151367 143.35873413]
[-182.62641907 140.25366211]
[-167.95132446 137.14859009]
[-153.27622986 134.04350281]
[-138.60112000 130.93843079]
[-123.92602539 127.83335876]
[-119.04375458 118.66145325]
[-109.68767548 113.65413666]
[-98.90739441 114.72268677]
[-90.37445831 121.75051880]
[-75.54947662 119.46580505]
[-60.72449493 117.18109131]
[-45.89950943 114.89637756]
[-31.07452965 112.61166382]
[-16.24954796 110.32695007]
[-1.42456579 108.04223633]
[13.40041637 105.75752258]
[28.22539711 103.47280884]
[43.05038071 101.18809509]
[57.87536240 98.90338898]
[72.70034027 96.61867523]
[78.72567749 74.95724487]
[101.49491882 61.81883621]
[103.15959167 46.91149139]
[104.82425690 32.00415039]
[106.48892212 17.09680557]
[108.15358734 2.18946290]
[101.08863068 -12.60980988]
[110.59448242 -25.97285080]
[126.89232635 -24.15291023]
[133.21635437 -9.02218723]
[123.06092834 3.85412931]
[121.39626312 18.76147270]
[119.73159790 33.66881561]
[118.06693268 48.57616043]
[116.40226746 63.48350143]
[121.59384155 68.89622498]
[123.58354950 54.02877426]
[136.44786072 46.31453705]
[150.49992371 51.56235123]
[155.15850830 65.82060242]
[146.91567993 78.35279083]
[131.97698975 79.72166443]
[137.16856384 85.13438416]
[152.13235474 84.09265900]
[167.09613037 83.05093384]
[182.05992126 82.00920868]
[197.02369690 80.96748352]
[211.98748779 79.92575836]
[226.95126343 78.88403320]
[241.91505432 77.84231567]
[256.87884521 76.80059052]
[270.16732788 67.19081879]
[285.02127075 74.14014435]
[286.16015625 90.49970245]
[272.41241455 99.44017029]
[257.92056274 91.76437378]
[242.95677185 92.80609894]
[227.99299622 93.84781647]
[213.02920532 94.88954163]
[198.06542969 95.93126678]
[183.10163879 96.97299194]
[168.13786316 98.01471710]
[153.17407227 99.05644226]
[138.21029663 100.09816742]
[130.28593445 112.74748993]
[119.27884674 119.62220001]
[126.47589874 132.78283691]
[133.67295837 145.94348145]
[140.87001038 159.10411072]
[148.06706238 172.26475525]
[155.26411438 185.42539978]
[162.46116638 198.58604431]
[175.36573792 209.58186340]
[168.37199402 225.02607727]
[151.59527588 222.58102417]
[149.30052185 205.78309631]
[142.10346985 192.62245178]
[134.90641785 179.46180725]
[127.70936584 166.30116272]
[120.51231384 153.14053345]
[113.31526184 139.97988892]
[106.11820984 126.81925201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
