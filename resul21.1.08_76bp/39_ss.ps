%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:28:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAUCUAGCGUAUCUACGAUACGCUUACUAUUUUAUGGUCCAGUUCGGUCACACUCAGGUGGAGCGUCAAAACUCCACGCGUGUGGUCACGCCACACG\
) } def
/len { sequence length } bind def

/coor [
[76.92847443 116.08213043]
[62.78115845 121.06745148]
[48.63384247 126.05277252]
[34.48652649 131.03810120]
[20.33920860 136.02342224]
[6.19189262 141.00874329]
[-7.95542383 145.99406433]
[-15.32131004 163.29867554]
[-32.63903427 169.78469849]
[-48.99412155 161.85076904]
[-62.80770493 167.69755554]
[-76.62128448 173.54434204]
[-90.43486786 179.39114380]
[-104.24845123 185.23793030]
[-118.06203461 191.08471680]
[-131.87561035 196.93150330]
[-145.68919373 202.77828979]
[-157.91876221 214.52026367]
[-172.58734131 206.01913452]
[-168.47911072 189.57046509]
[-151.53599548 188.96470642]
[-137.72241211 183.11791992]
[-123.90882111 177.27113342]
[-110.09523773 171.42434692]
[-96.28165436 165.57756042]
[-82.46807098 159.73075867]
[-68.65449524 153.88397217]
[-54.84090805 148.03718567]
[-52.88853455 136.59132385]
[-45.51507187 127.46574402]
[-34.50987625 123.06311798]
[-22.63691139 124.61648560]
[-12.94074535 131.84674072]
[1.20657074 126.86141968]
[15.35388756 121.87609863]
[29.50120354 116.89077759]
[43.64852142 111.90545654]
[57.79583740 106.92013550]
[71.94315338 101.93481445]
[73.23574066 80.37616730]
[91.03355408 62.81391907]
[80.16389465 51.31778717]
[84.56314850 37.08768463]
[80.90444183 22.54072952]
[67.92935944 13.10532665]
[67.36039734 -2.92763400]
[79.63401794 -13.25903702]
[95.33493805 -9.96351433]
[102.41876984 4.43089199]
[95.45139313 18.88202477]
[99.11009979 33.42897797]
[109.71806335 43.88461304]
[105.58050537 59.15521240]
[112.13267517 62.80474472]
[115.89604187 48.28451538]
[118.49507904 33.51139832]
[132.03913879 27.06480408]
[145.14372253 34.36343384]
[146.79373169 49.27240372]
[135.60119629 59.26021957]
[125.23701477 70.10381317]
[131.78918457 73.75334930]
[146.08331299 69.20605469]
[160.37744141 64.65876770]
[174.67156982 60.11147690]
[188.96569824 55.56418610]
[203.25982666 51.01689529]
[208.01768494 36.24724960]
[220.56808472 27.12216187]
[236.08512878 27.15041351]
[248.60221863 36.32114029]
[253.30625916 51.10801315]
[248.38845825 65.82518005]
[235.73980713 74.81358337]
[220.22398376 74.61700439]
[207.80711365 65.31102753]
[193.51298523 69.85831451]
[179.21885681 74.40560913]
[164.92472839 78.95289612]
[150.63059998 83.50019073]
[136.33647156 88.04747772]
[132.63029480 106.05677032]
[121.78202820 117.78970337]
[130.44863892 130.03265381]
[139.11524963 142.27560425]
[147.78184509 154.51855469]
[156.44845581 166.76152039]
[165.11506653 179.00447083]
[173.78167725 191.24742126]
[182.44827271 203.49037170]
[196.53471375 212.92480469]
[191.36849976 229.07246399]
[174.42175293 228.57824707]
[170.20532227 212.15698242]
[161.53871155 199.91403198]
[152.87211609 187.67108154]
[144.20550537 175.42811584]
[135.53889465 163.18516541]
[126.87229156 150.94221497]
[118.20568085 138.69926453]
[109.53907013 126.45630646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[41 53]
[43 51]
[44 50]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
