%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCUUUCACAUCAGUUCAACUGAUGUCCUGAAAGGCGGCGGUGCUCAGGUAGUCAAAUCCAGGUAAAGCGCAAUUACCUGGG\
) } def
/len { sequence length } bind def

/coor [
[78.29213715 106.33405304]
[63.31413651 105.52196503]
[48.33613586 104.70988464]
[33.35813522 103.89779663]
[18.38013268 103.08571625]
[3.40213132 102.27362823]
[-11.57586956 101.46154785]
[-26.55387115 100.64946747]
[-41.53187180 99.83737946]
[-56.50987244 99.02529907]
[-71.48787689 98.21321106]
[-86.48787689 98.21321106]
[-101.46587372 99.02529907]
[-116.44387817 99.83737946]
[-131.42187500 100.64946747]
[-146.39988708 101.46154785]
[-161.37788391 102.27362823]
[-176.35588074 103.08571625]
[-191.33387756 103.89779663]
[-206.82244873 110.79278564]
[-217.73562622 97.81824493]
[-208.28921509 83.73983765]
[-192.14596558 88.91979980]
[-177.16796875 88.10771179]
[-162.18997192 87.29563141]
[-147.21195984 86.48354340]
[-132.23396301 85.67146301]
[-117.25595856 84.85938263]
[-102.27796173 84.04729462]
[-87.29995728 83.23521423]
[-84.59492493 80.63996124]
[-80.40734863 79.35326385]
[-75.43106079 80.10006714]
[-70.67578888 83.23521423]
[-55.69778824 84.04729462]
[-40.71978760 84.85938263]
[-25.74178696 85.67146301]
[-10.76378632 86.48354340]
[4.21421480 87.29563141]
[19.19221687 88.10771179]
[34.17021561 88.91979980]
[49.14822006 89.73188019]
[64.12622070 90.54396820]
[79.10421753 91.35604858]
[92.37987518 74.31334686]
[117.53441620 74.46807861]
[124.79866791 61.34441376]
[132.06291199 48.22074127]
[131.22601318 31.84296417]
[145.13632202 23.15762329]
[159.48411560 31.09945297]
[159.50961304 47.49858093]
[145.18658447 55.48498917]
[137.92233276 68.60865784]
[130.65809631 81.73233032]
[139.36482239 69.51787567]
[153.72654724 65.18883514]
[167.73313904 70.55683899]
[175.52305603 83.37547302]
[173.83633423 98.28033447]
[163.37886047 109.03398895]
[148.52690125 111.13620758]
[135.49491882 103.70629120]
[147.59826660 112.56683350]
[159.70159912 121.42737579]
[171.80493164 130.28791809]
[183.90827942 139.14845276]
[196.01161194 148.00900269]
[208.11495972 156.86953735]
[220.21829224 165.73008728]
[235.36077881 161.82635498]
[249.44749451 168.61595154]
[255.82711792 182.89300537]
[251.48739624 197.91635132]
[238.47740173 206.59240723]
[222.94006348 204.82461548]
[212.21162415 193.44767761]
[211.35775757 177.83341980]
[199.25440979 168.97288513]
[187.15107727 160.11233521]
[175.04772949 151.25180054]
[162.94439697 142.39125061]
[150.84106445 133.53071594]
[138.73771667 124.67017365]
[126.63438416 115.80963135]
[107.27641296 127.23104095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[46 55]
[47 54]
[48 53]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
