%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUAUAGAAGGUUUCGAAAAUUCGAAACGAAUUCUAUAGCCACCCAAUUUCUGGCCGAUCUGCCCACCCCUCAUGGUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[76.23020172 106.61584473]
[61.24069214 106.05497742]
[46.25118256 105.49411011]
[31.26167297 104.93324280]
[16.27216148 104.37237549]
[1.28265131 103.81150818]
[-13.70685959 103.25064087]
[-28.69636917 102.68977356]
[-43.68587875 102.12889862]
[-58.67539215 101.56803131]
[-75.78546906 111.90764618]
[-91.90894318 101.50584412]
[-106.89845276 102.06671143]
[-121.88796234 102.62757874]
[-136.87747192 103.18844604]
[-151.86698914 103.74931335]
[-166.85649109 104.31018066]
[-181.84600830 104.87104797]
[-195.43612671 114.04931641]
[-210.05932617 106.62677765]
[-210.67251587 90.23909760]
[-196.64488220 81.74452209]
[-182.40687561 89.88153839]
[-167.41735840 89.32067108]
[-152.42785645 88.75980377]
[-137.43833923 88.19893646]
[-122.44882965 87.63806915]
[-107.45932007 87.07720184]
[-92.46981049 86.51632690]
[-86.00417328 78.22018433]
[-75.78546906 74.91222382]
[-65.25689697 77.96943665]
[-58.11452484 86.57852173]
[-43.12501144 87.13938904]
[-28.13550186 87.70025635]
[-13.14599133 88.26112366]
[1.84351921 88.82199860]
[16.83303070 89.38286591]
[31.82254028 89.94373322]
[46.81204987 90.50460052]
[61.80156326 91.06546783]
[76.79106903 91.62633514]
[85.18993378 77.06385803]
[102.32723236 70.15973663]
[121.68917847 75.71604156]
[130.13897705 63.32246017]
[138.58877563 50.92887878]
[137.03099060 34.96163559]
[148.64331055 23.89214516]
[164.51776123 26.21197510]
[172.47680664 40.14154816]
[166.41497803 54.99528885]
[150.98236084 59.37868118]
[142.53256226 71.77226257]
[134.08276367 84.16584015]
[143.80374146 72.74207306]
[158.48350525 69.65911865]
[171.97880554 76.20716095]
[178.64208984 89.64593506]
[175.68486023 104.35153961]
[164.34469604 114.16992188]
[149.36724854 114.99224091]
[137.01960754 106.47335052]
[148.38917542 116.25766754]
[159.75875854 126.04197693]
[171.12832642 135.82629395]
[182.49790955 145.61059570]
[193.86747742 155.39491272]
[205.23706055 165.17921448]
[220.97644043 163.74838257]
[233.06396484 173.93008423]
[234.32832336 189.68373108]
[224.01937866 201.66293335]
[208.25326538 202.76065063]
[196.38371277 192.32563782]
[195.45274353 176.54879761]
[184.08317566 166.76448059]
[172.71359253 156.98017883]
[161.34400940 147.19586182]
[149.97444153 137.41154480]
[138.60485840 127.62724304]
[127.23529053 117.84292603]
[106.74870300 129.16011047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[45 55]
[46 54]
[47 53]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
