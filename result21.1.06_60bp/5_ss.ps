%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCCGACUCGCCGGAUAAUUCCGUGGCGUGAGUCGGGCGCCCAGCUCUAGGCGUUCGUUUCAGGUUAUGUACCG\
) } def
/len { sequence length } bind def

/coor [
[75.14820862 101.59904480]
[60.58408356 98.00930786]
[46.01995468 94.41957092]
[31.45582771 90.82983398]
[16.89170074 87.24010468]
[2.32757354 83.65036774]
[-12.23655415 80.06063080]
[-26.80068016 76.47090149]
[-41.36480713 72.88116455]
[-55.92893600 69.29142761]
[-70.49306488 65.70169067]
[-85.05718994 62.11195755]
[-99.62131500 58.52222443]
[-114.18544769 54.93248749]
[-128.99119568 52.52631760]
[-143.94255066 51.31932068]
[-158.89392090 50.11231995]
[-173.84527588 48.90532303]
[-188.42106628 56.42053223]
[-202.06916809 47.32870483]
[-200.74958801 30.98273468]
[-185.81979370 24.19795418]
[-172.63827515 33.95396423]
[-157.68692017 35.16096115]
[-142.73556519 36.36796188]
[-127.78420258 37.57495880]
[-125.46575928 35.55720901]
[-122.09945679 34.47456360]
[-118.09535217 34.77685165]
[-114.03550720 36.73247528]
[-110.59571075 40.36836243]
[-96.03158569 43.95809555]
[-81.46745300 47.54783249]
[-66.90332794 51.13756561]
[-52.33919907 54.72730255]
[-37.77507401 58.31703568]
[-23.21094513 61.90676880]
[-8.64681911 65.49650574]
[5.91730833 69.08624268]
[20.48143578 72.67597198]
[35.04556274 76.26570892]
[49.60969162 79.85544586]
[64.17382050 83.44518280]
[78.73794556 87.03491211]
[91.05932617 73.88868713]
[110.76975250 71.68290710]
[128.72863770 83.77775574]
[141.07339478 75.25679016]
[153.41815186 66.73581696]
[163.01878357 52.76212311]
[179.10411072 58.11926270]
[178.40917969 75.05895996]
[161.93911743 79.08057404]
[149.59436035 87.60154724]
[137.24960327 96.12251282]
[152.16831970 94.56304932]
[165.54771423 87.78133392]
[180.48538208 89.14737701]
[192.41276550 98.24340057]
[197.68196106 112.28746033]
[194.68144226 126.98429108]
[184.32888794 137.83898926]
[169.79054260 141.53175354]
[155.51283264 136.93316650]
[145.86268616 125.45011902]
[132.74902344 118.16780853]
[140.76600647 130.84565735]
[148.78300476 143.52351379]
[164.05511475 148.43696594]
[169.60064697 163.49108887]
[161.16554260 177.13763428]
[145.22048950 178.90815735]
[133.99716187 167.44445801]
[136.10514832 151.54049683]
[128.08816528 138.86264038]
[120.07117462 126.18479156]
[97.99626923 130.22962952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 26]
[16 25]
[17 24]
[18 23]
[47 55]
[48 54]
[49 53]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
