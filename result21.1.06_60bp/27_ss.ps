%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAUUAAUUUGUUAUACAUAUAAAUCUAAUUAAUCGAUAGCGCUCGCCGAAAUUCUCCAGGGGCACUUUUUGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[77.54315186 107.94805908]
[62.54611588 108.24629211]
[47.54907990 108.54452515]
[32.55204391 108.84275818]
[17.55500984 109.14099121]
[2.55797458 109.43922424]
[-12.43906021 109.73745728]
[-27.43609619 110.03569031]
[-42.43313217 110.33392334]
[-57.43016434 110.63215637]
[-69.74982452 124.73591614]
[-88.14319611 125.62478638]
[-101.31153870 113.20256805]
[-116.23747253 114.69137573]
[-131.16340637 116.18018341]
[-146.08934021 117.66899109]
[-159.08448792 127.67190552]
[-174.13960266 121.16994476]
[-175.76727295 104.85177612]
[-162.29310608 95.50412750]
[-147.57814026 102.74305725]
[-132.65220642 101.25424957]
[-117.72628021 99.76544189]
[-102.80034637 98.27663422]
[-97.47674561 87.83040619]
[-87.60013580 81.28947449]
[-75.66204071 80.44740295]
[-64.74538422 85.64160156]
[-57.72839737 95.63512421]
[-42.73136139 95.33689117]
[-27.73432732 95.03865814]
[-12.73729324 94.74042511]
[2.25974178 94.44219208]
[17.25677681 94.14395905]
[32.25381088 93.84572601]
[47.25084686 93.54749298]
[62.24788284 93.24925995]
[77.24491882 92.95102692]
[84.79391479 78.68838501]
[100.88233185 71.47486115]
[119.46591187 76.00588226]
[125.27497864 62.17639923]
[122.67962646 45.98392487]
[135.57398987 35.85142136]
[150.69343567 42.20233917]
[152.48439026 58.50339508]
[139.10446167 67.98546600]
[133.29539490 81.81495667]
[145.02354431 72.46344757]
[153.76083374 60.27083588]
[167.03222656 53.28012466]
[182.02903748 52.97078705]
[195.57740784 59.40829468]
[204.81004333 71.23024750]
[207.77297974 85.93470001]
[203.83917236 100.40968323]
[193.84112549 111.59177399]
[179.89480591 117.11446381]
[164.95172119 115.80895233]
[152.17428589 107.95143890]
[137.73976135 103.87164307]
[148.45129395 114.37227631]
[159.16281128 124.87290955]
[169.87434387 135.37353516]
[180.58586121 145.87416077]
[191.29739380 156.37480164]
[207.28938293 157.65374756]
[216.14048767 171.03424072]
[211.06089783 186.25190735]
[195.94723511 191.63305664]
[182.39340210 183.04972839]
[180.79675293 167.08631897]
[170.08523560 156.58569336]
[159.37370300 146.08506775]
[148.66218567 135.58442688]
[137.95065308 125.08380127]
[127.23913574 114.58316803]
[108.68672943 127.18460846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[13 24]
[14 23]
[15 22]
[16 21]
[41 48]
[42 47]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
