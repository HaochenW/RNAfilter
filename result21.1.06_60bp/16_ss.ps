%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUUAAACAGAACCUGACUUGCAAGUCAGUGACUGUUUAACUCUGAGACGCGAUCGUACAACCGGUACUACAGUAGCGUCCCUGUAGUAC\
) } def
/len { sequence length } bind def

/coor [
[78.66750336 107.14072418]
[63.66963959 106.88738251]
[48.67177963 106.63404083]
[33.67391968 106.38069916]
[18.67605782 106.12735748]
[3.67819810 105.87401581]
[-11.31966209 105.62067413]
[-26.31752205 105.36732483]
[-41.31538391 105.11398315]
[-56.31324387 104.86064148]
[-71.31110382 104.60729980]
[-86.30896759 104.35395813]
[-95.67753601 116.58245087]
[-110.27956390 120.89919281]
[-124.45584106 115.84973907]
[-132.84011841 103.56796265]
[-147.83798218 103.31462097]
[-162.83583069 103.06127930]
[-177.83369446 102.80793762]
[-192.83155823 102.55458832]
[-207.82942200 102.30124664]
[-221.89755249 110.72855377]
[-236.09643555 102.52343750]
[-235.81947327 86.12663269]
[-221.35156250 78.40575409]
[-207.57608032 87.30339050]
[-192.57821655 87.55673218]
[-177.58035278 87.81007385]
[-162.58248901 88.06341553]
[-147.58462524 88.31675720]
[-132.58677673 88.57009888]
[-123.79248047 76.57850647]
[-109.45374298 72.01071167]
[-95.00584412 76.81816864]
[-86.05562592 89.35610199]
[-71.05776215 89.60944366]
[-56.05990219 89.86278534]
[-41.06204224 90.11612701]
[-26.06418037 90.36946869]
[-11.06632042 90.62281036]
[3.93154025 90.87615204]
[18.92940140 91.12949371]
[33.92726135 91.38283539]
[48.92512131 91.63617706]
[63.92298126 91.88951874]
[78.92084503 92.14286041]
[83.17198944 82.05393219]
[92.29872131 74.42695618]
[104.82463837 71.59351349]
[118.19044495 74.99804688]
[125.90877533 62.13619232]
[133.62710571 49.27433395]
[133.36291504 32.87731552]
[147.56819153 24.68328094]
[161.62976074 33.12155151]
[161.08229065 49.51155853]
[146.48896790 56.99266815]
[138.77062988 69.85452271]
[131.05230713 82.71637726]
[140.13186646 70.77646637]
[154.62036133 66.89274597]
[168.45460510 72.69048309]
[175.84516907 85.74343109]
[173.69924927 100.58914185]
[162.91485596 111.01491547]
[148.00508118 112.65774536]
[135.20863342 104.82915497]
[147.07026672 114.01074982]
[158.93191528 123.19233704]
[170.79354858 132.37393188]
[182.65518188 141.55551147]
[194.51681519 150.73710632]
[206.37844849 159.91870117]
[218.24009705 169.10028076]
[230.10173035 178.28187561]
[244.96002197 173.80853271]
[259.59884644 178.95478821]
[268.38931274 191.74179077]
[267.95129395 207.25267029]
[258.45318604 219.52320862]
[243.54725647 223.83509827]
[228.96508789 218.53034973]
[220.31385803 205.64874268]
[220.92013550 190.14350891]
[209.05850220 180.96191406]
[197.19686890 171.78033447]
[185.33522034 162.59873962]
[173.47358704 153.41714478]
[161.61195374 144.23556519]
[149.75032043 135.05397034]
[137.88868713 125.87238312]
[126.02704620 116.69079590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[50 59]
[51 58]
[52 57]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
