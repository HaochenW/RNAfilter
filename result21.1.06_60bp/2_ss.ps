%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAUCCGCUGCAUUGGAAUUGUCCGGAUGGACCCACUAUAUGUGACAAAGCGAAGGAUCUAUCUUACAGAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[80.76335907 110.72465515]
[65.95760345 113.13082123]
[51.15185165 115.53699493]
[36.34609985 117.94316101]
[21.54034424 120.34933472]
[6.73459005 122.75550079]
[-8.07116413 125.16167450]
[-22.87691689 127.56784058]
[-37.68267059 129.97401428]
[-45.98510361 140.07969666]
[-58.56160736 141.65052795]
[-68.44240570 134.37629700]
[-83.33303833 136.18435669]
[-98.22367096 137.99240112]
[-106.60592651 151.19360352]
[-121.52822113 155.86900330]
[-135.94468689 149.81100464]
[-143.04832458 135.88002014]
[-139.48501587 120.65382385]
[-126.93723297 111.32177734]
[-111.32965851 112.29017639]
[-100.03172302 123.10176849]
[-85.14109039 121.29371643]
[-70.25045776 119.48566437]
[-56.98509598 108.18065643]
[-40.08884048 115.16825867]
[-25.28308678 112.76208496]
[-10.47733307 110.35591888]
[4.32842112 107.94974518]
[19.13417435 105.54357910]
[33.93992996 103.13741302]
[48.74568176 100.73123932]
[63.55143738 98.32507324]
[78.35719299 95.91889954]
[88.44242096 77.10895538]
[112.70982361 73.64200592]
[115.11598969 58.83625412]
[117.52215576 44.03049850]
[109.34903717 30.22544098]
[115.18087006 15.27989769]
[130.54397583 10.65881252]
[143.65310669 19.90708542]
[144.45204163 35.93023300]
[132.32791138 46.43666840]
[129.92173767 61.24242020]
[127.51557159 76.04817200]
[131.74067688 61.65552139]
[142.81695557 51.54038620]
[157.53300476 48.63551712]
[171.62207031 53.78314590]
[180.99923706 65.49078369]
[182.94570923 80.36395264]
[176.89714050 94.09037781]
[164.60723877 102.69026947]
[149.63928223 103.67019653]
[136.33482361 96.74771118]
[148.67958069 105.26868439]
[161.02433777 113.78965759]
[173.36909485 122.31062317]
[185.71385193 130.83160400]
[198.05860901 139.35256958]
[210.40336609 147.87353516]
[225.43159485 143.55076599]
[239.70144653 149.94648743]
[246.47514343 164.04084778]
[242.55433655 179.17892456]
[229.79032898 188.21298218]
[214.20988464 186.87739563]
[203.16961670 175.80281067]
[201.88240051 160.21829224]
[189.53764343 151.69732666]
[177.19288635 143.17636108]
[164.84812927 134.65538025]
[152.50337219 126.13441467]
[140.15861511 117.61344147]
[127.81385040 109.09246826]
[112.45795441 123.78448486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[12 24]
[13 23]
[14 22]
[36 46]
[37 45]
[38 44]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
