%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGACACUUGUUGGUCAAGAACUGUCAGAUUAUGCCGGACACGUUCACUAAGAUAAGUAGUUCUUAUCC\
) } def
/len { sequence length } bind def

/coor [
[63.06289291 112.42758179]
[48.19121933 114.38547516]
[33.31954956 116.34336853]
[18.44787598 118.30126190]
[3.57620239 120.25914764]
[-11.29547024 122.21704102]
[-26.16714287 124.17493439]
[-41.03881454 126.13282776]
[-55.75059509 129.05918884]
[-70.23948669 132.94146729]
[-84.72837067 136.82376099]
[-99.21725464 140.70603943]
[-108.45173645 153.82489014]
[-124.47402954 154.64067078]
[-134.99320984 142.52760315]
[-131.93986511 126.77779388]
[-117.65625763 119.47314453]
[-103.09954071 126.21715546]
[-88.61065674 122.33486938]
[-74.12176514 118.45258331]
[-59.63288116 114.57029724]
[-57.50914001 111.38291931]
[-53.57545090 109.21247864]
[-48.40536118 108.97686768]
[-42.99670792 111.26115417]
[-28.12503624 109.30326080]
[-13.25336361 107.34536743]
[1.61830962 105.38748169]
[16.48998260 103.42958832]
[31.36165619 101.47169495]
[46.23332977 99.51380157]
[61.10499954 97.55590820]
[63.55146408 86.20512390]
[69.23351288 76.07892609]
[77.64674377 68.07624054]
[88.04430389 62.90747070]
[99.50318909 61.03145218]
[111.00617981 62.61472702]
[117.93240356 49.30956650]
[116.67690277 32.95854950]
[130.36053467 23.92028809]
[144.90676880 31.49257088]
[145.35166931 47.88568115]
[131.23756409 56.23579407]
[124.31134033 69.54095459]
[128.74160767 73.68053436]
[132.47618103 78.45719147]
[135.42463684 83.75531006]
[137.51560974 89.44664764]
[138.69850159 95.39342499]
[138.94467163 101.45171356]
[138.24815369 107.47486115]
[136.62580872 113.31707764]
[134.11691284 118.83693695]
[145.60758972 128.47875977]
[157.09825134 138.12057495]
[168.58891296 147.76237488]
[180.07958984 157.40419006]
[191.57025146 167.04600525]
[207.61325073 167.08580017]
[217.47152710 179.74256897]
[213.58264160 195.30715942]
[198.92982483 201.83972168]
[184.75344849 194.32904053]
[181.92843628 178.53668213]
[170.43777466 168.89486694]
[158.94711304 159.25305176]
[147.45643616 149.61123657]
[135.96577454 139.96942139]
[124.47510529 130.32760620]
[101.45171356 138.94467163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 21]
[10 20]
[11 19]
[12 18]
[38 45]
[39 44]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
