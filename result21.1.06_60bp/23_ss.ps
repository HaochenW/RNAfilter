%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCCCGUUUAGCGUCCAGUGGACGCUUGAGACGGGCCAAAACGGGGCCUCCUACAUUCCACCCUCCCCAUCCAUGUGGGGAGGA\
) } def
/len { sequence length } bind def

/coor [
[76.08209229 108.80780792]
[61.10408783 109.61988831]
[46.12608719 110.43197632]
[31.14808655 111.24405670]
[16.17008591 112.05614471]
[1.19208443 112.86822510]
[-13.78591633 113.68030548]
[-28.76391792 114.49239349]
[-43.74192047 115.30447388]
[-58.71992111 116.11656189]
[-73.69792175 116.92864227]
[-88.63684082 118.28093719]
[-103.51719666 120.17168427]
[-118.39756012 122.06243134]
[-133.27792358 123.95317841]
[-148.15827942 125.84392548]
[-163.03863525 127.73466492]
[-177.91899109 129.62541199]
[-192.86965942 137.62004089]
[-204.69061279 125.46679688]
[-196.28468323 110.74346161]
[-179.80973816 114.74505615]
[-164.92938232 112.85430908]
[-150.04902649 110.96356201]
[-135.16865540 109.07281494]
[-120.28830719 107.18207550]
[-105.40794373 105.29132843]
[-90.52758789 103.40058136]
[-86.82738495 100.05295563]
[-80.91657257 99.15179443]
[-74.51000214 101.95064545]
[-59.53200531 101.13855743]
[-44.55400467 100.32647705]
[-29.57600212 99.51438904]
[-14.59800053 98.70230865]
[0.38000077 97.89022064]
[15.35800171 97.07814026]
[30.33600235 96.26605988]
[45.31400299 95.45397186]
[60.29200745 94.64189148]
[75.27000427 93.82980347]
[79.84933472 81.58161163]
[90.44882202 72.49964905]
[104.97940063 69.47995758]
[120.01190186 74.09381866]
[126.31023407 60.48018646]
[132.60856628 46.86655426]
[130.59205627 30.59185982]
[143.83940125 20.92542267]
[158.72286987 27.81124496]
[159.93162537 44.16578293]
[146.22219849 53.16489029]
[139.92385864 66.77852631]
[133.62553406 80.39215088]
[140.19845581 66.90895844]
[152.81057739 58.78895569]
[167.80517578 58.38643646]
[180.83476257 65.81810760]
[188.12159729 78.92925262]
[187.55293274 93.91847229]
[179.29367065 106.43983459]
[165.73846436 112.86294556]
[150.81745911 111.32550049]
[138.85829163 102.27520752]
[150.63386536 111.56693268]
[162.40942383 120.85865784]
[174.18498230 130.15039062]
[185.96054077 139.44210815]
[197.73609924 148.73384094]
[209.51165771 158.02555847]
[221.28723145 167.31729126]
[233.06278992 176.60900879]
[249.36021423 178.43275452]
[255.68069458 193.56495667]
[245.52226257 206.43890381]
[229.33505249 203.81098938]
[223.77105713 188.38456726]
[211.99549866 179.09284973]
[200.21994019 169.80111694]
[188.44438171 160.50939941]
[176.66882324 151.21766663]
[164.89324951 141.92594910]
[153.11769104 132.63421631]
[141.34213257 123.34249878]
[129.56657410 114.05077362]
[110.26706696 128.52836609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[45 54]
[46 53]
[47 52]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
