%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCACUGUCCUUGUCGCGGGCGAUUUGGACAGUGGAUACCACCCGUUGGACAAGAAGAUGACUGGUAAUACGACCAGUCAC\
) } def
/len { sequence length } bind def

/coor [
[79.87307739 109.44394684]
[64.94017792 110.86122131]
[50.00728607 112.27849579]
[35.07439041 113.69577789]
[20.14149857 115.11305237]
[5.20860386 116.53032684]
[-9.72428989 117.94760895]
[-24.65718460 119.36488342]
[-39.59008026 120.78215790]
[-54.52297211 122.19944000]
[-69.45586395 123.61671448]
[-79.50981140 135.51445007]
[-94.67407990 136.73904419]
[-105.95478821 127.08081818]
[-120.88768005 128.49809265]
[-135.82057190 129.91537476]
[-150.75346375 131.33264160]
[-163.79638672 141.27317810]
[-178.82017517 134.69917297]
[-180.36965942 118.37339020]
[-166.85084534 109.09040070]
[-152.17074585 116.39975739]
[-137.23785400 114.98247528]
[-122.30495453 113.56520081]
[-107.37206268 112.14792633]
[-98.10972595 100.53997040]
[-82.98583221 98.88992310]
[-70.87314606 108.68382263]
[-55.94025040 107.26654053]
[-41.00735474 105.84926605]
[-26.07446098 104.43199158]
[-11.14156723 103.01470947]
[3.79132676 101.59743500]
[18.72422028 100.18016052]
[33.65711594 98.76287842]
[48.59000778 97.34560394]
[63.52290344 95.92832947]
[78.45579529 94.51104736]
[89.65479279 76.14882660]
[114.34330750 73.92026520]
[118.27127838 59.44369507]
[122.19924164 44.96712494]
[115.50118256 30.38921356]
[122.85085297 16.12871170]
[138.61021423 13.12505722]
[150.69004822 23.68239594]
[149.82371521 39.70204163]
[136.67581177 48.89509201]
[132.74784851 63.37166214]
[128.81988525 77.84822845]
[133.93023682 63.74560165]
[145.61305237 54.33752060]
[160.48101807 52.35173035]
[174.22338867 58.36399078]
[182.85574341 70.63112640]
[183.87522888 85.59644318]
[176.98628235 98.92094421]
[164.18623352 106.74136353]
[149.18632507 106.79028320]
[136.33721924 99.05529785]
[148.50576782 107.82608032]
[160.67430115 116.59686279]
[172.84284973 125.36764526]
[185.01138306 134.13842773]
[197.17991638 142.90921021]
[209.34846497 151.67999268]
[221.51699829 160.45077515]
[237.07513428 157.67230225]
[249.99313354 166.77729797]
[252.60696411 182.36393738]
[243.36590576 195.18495178]
[227.75248718 197.63385010]
[215.02990723 188.25773621]
[212.74621582 172.61932373]
[200.57768250 163.84854126]
[188.40913391 155.07775879]
[176.24060059 146.30696106]
[164.07206726 137.53617859]
[151.90351868 128.76539612]
[139.73498535 119.99462128]
[127.56643677 111.22383881]
[110.91504669 124.97210693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[14 25]
[15 24]
[16 23]
[17 22]
[40 50]
[41 49]
[42 48]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
