%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCGAUUGAGAUCCGGCUCGCGAGCCGGUUCUCUCAAUCGGAACAUCUUCCAGAGAGCGCUAUUGCUAUGCUUAUCAAGCAUAGA\
) } def
/len { sequence length } bind def

/coor [
[78.10114288 105.18885040]
[63.18709183 103.58542633]
[48.27303696 101.98199463]
[33.35898209 100.37857056]
[18.44492722 98.77513885]
[3.53087258 97.17171478]
[-11.38318157 95.56829071]
[-26.29723549 93.96485901]
[-41.21129227 92.36143494]
[-56.12534714 90.75801086]
[-71.03939819 89.15457916]
[-85.95345306 87.55115509]
[-100.86750793 85.94773102]
[-118.67615509 95.06020355]
[-134.01799011 83.51720428]
[-149.00843811 82.98181915]
[-163.99887085 82.44643402]
[-178.98931885 81.91104889]
[-193.97976685 81.37566376]
[-208.97019958 80.84027863]
[-223.19436646 89.00148773]
[-237.23640442 80.53076935]
[-236.65107727 64.14206696]
[-222.04052734 56.69467926]
[-208.43481445 65.84983063]
[-193.44438171 66.38521576]
[-178.45393372 66.92060089]
[-163.46348572 67.45598602]
[-148.47305298 67.99137115]
[-133.48260498 68.52675629]
[-126.44590759 60.73955536]
[-116.03835297 58.17886734]
[-105.77426910 61.96578979]
[-99.26408386 71.03367615]
[-84.35002899 72.63710022]
[-69.43597412 74.24052429]
[-54.52191925 75.84395599]
[-39.60786438 77.44738007]
[-24.69380951 79.05080414]
[-9.77975464 80.65423584]
[5.13429928 82.25765991]
[20.04835320 83.86109161]
[34.96240997 85.46451569]
[49.87646484 87.06793976]
[64.79051971 88.67137146]
[79.70457458 90.27479553]
[95.00163269 73.80449677]
[120.94453430 77.37527466]
[129.93370056 65.36715698]
[138.92286682 53.35903931]
[147.91203308 41.35092163]
[152.56372070 25.04760742]
[169.51760864 25.00430489]
[174.25253296 41.28364563]
[159.92015076 50.34008789]
[150.93098450 62.34820557]
[141.94181824 74.35632324]
[132.95265198 86.36444092]
[146.59838867 80.13596344]
[158.78079224 71.38446045]
[173.77873230 71.13593292]
[186.24441528 79.47900391]
[191.73297119 93.43878937]
[188.28735352 108.03768921]
[177.13616943 118.07018280]
[162.25556946 119.95901489]
[148.95103455 113.03020477]
[134.55778503 108.80711365]
[145.16438293 119.41371918]
[155.77098083 130.02032471]
[166.37759399 140.62692261]
[176.98419189 151.23352051]
[187.59078979 161.84011841]
[198.19738770 172.44673157]
[208.80400085 183.05332947]
[224.27935791 189.97787476]
[221.90943909 206.76536560]
[205.12194824 209.13529968]
[198.19738770 193.65992737]
[187.59078979 183.05332947]
[176.98419189 172.44673157]
[166.37759399 161.84011841]
[155.77098083 151.23352051]
[145.16438293 140.62692261]
[134.55778503 130.02032471]
[123.95117950 119.41371918]
[104.11089325 127.75293732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[48 58]
[49 57]
[50 56]
[51 55]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
