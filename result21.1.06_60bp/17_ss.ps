%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAUAAUCAGCUAGCUCUUUAAGAGCGCGGCUGAUUAUCUGUUAACUGUAUGUUACGACACGUUUAAGUGGAGCAGUCCACUUAAA\
) } def
/len { sequence length } bind def

/coor [
[81.53269196 108.16434479]
[66.54225159 108.69972992]
[51.55181122 109.23511505]
[36.56136703 109.77050018]
[21.57092476 110.30588531]
[6.58048344 110.84127045]
[-8.40995884 111.37665558]
[-23.40040207 111.91204071]
[-38.39084244 112.44742584]
[-53.38128662 112.98281097]
[-68.37172699 113.51819611]
[-83.36216736 114.05358124]
[-98.35261536 114.58896637]
[-113.58786011 124.74109650]
[-128.79925537 116.18825531]
[-143.76103210 117.25833893]
[-158.72282410 118.32843018]
[-173.68460083 119.39851379]
[-188.64637756 120.46860504]
[-204.01380920 127.62948608]
[-215.14898682 114.84494781]
[-205.94657898 100.60583496]
[-189.71646118 105.50682068]
[-174.75468445 104.43673706]
[-159.79290771 103.36664581]
[-144.83111572 102.29655457]
[-129.86933899 101.22647095]
[-121.58789825 92.21536255]
[-108.97673035 91.32659149]
[-98.88800049 99.59851837]
[-83.89755249 99.06313324]
[-68.90711212 98.52774811]
[-53.91667175 97.99236298]
[-38.92622757 97.45697784]
[-23.93578720 96.92159271]
[-8.94534397 96.38620758]
[6.04509830 95.85082245]
[21.03554153 95.31543732]
[36.02598190 94.78005219]
[51.01642609 94.24467468]
[66.00686646 93.70928955]
[80.99730682 93.17390442]
[91.85258484 76.93070984]
[114.94692230 75.45261383]
[121.17814636 61.80813217]
[127.40937805 48.16365051]
[133.64059448 34.51917267]
[129.40390015 19.04564667]
[138.97607422 6.17113066]
[155.01416016 5.77184963]
[165.21510315 18.15409851]
[161.75363159 33.81927490]
[147.28507996 40.75039673]
[141.05384827 54.39487839]
[134.82263184 68.03936005]
[128.59140015 81.68383789]
[137.10916138 69.33685303]
[151.40257263 64.78733826]
[165.49011230 69.93918610]
[173.47633362 82.63643646]
[172.01916504 97.56549072]
[161.72839355 108.47878265]
[146.91053772 110.80928040]
[133.76579285 103.58077240]
[145.44540405 112.99280548]
[157.12503052 122.40483856]
[168.80465698 131.81687927]
[180.48428345 141.22891235]
[192.16389465 150.64094543]
[203.84352112 160.05297852]
[215.52314758 169.46501160]
[227.20277405 178.87705994]
[238.88240051 188.28909302]
[255.16024780 190.27992249]
[261.32516479 205.47616577]
[251.03521729 218.24522400]
[234.87580872 215.45138550]
[229.47035217 199.96870422]
[217.79074097 190.55667114]
[206.11111450 181.14463806]
[194.43148804 171.73260498]
[182.75186157 162.32057190]
[171.07225037 152.90853882]
[159.39262390 143.49650574]
[147.71299744 134.08445740]
[136.03337097 124.67243195]
[124.35375214 115.26039124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[44 56]
[45 55]
[46 54]
[47 53]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
