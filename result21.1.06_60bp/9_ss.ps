%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUGAGAGUAUUCGUCUCUACAGACGAAACAAUUCUCACGAAGUCAAGUGGACCUAUUGCCUGGGGCAUUUCACUGCCCCU\
) } def
/len { sequence length } bind def

/coor [
[78.47608185 106.28874969]
[63.50024796 105.43757629]
[48.52441788 104.58639526]
[33.54858780 103.73521423]
[18.57275772 102.88403320]
[3.59692717 102.03285980]
[-11.37890339 101.18167877]
[-26.35473442 100.33049774]
[-41.33056259 99.47931671]
[-56.30639267 98.62814331]
[-73.60813904 108.63678741]
[-89.53122711 97.93633270]
[-104.52854156 98.22019958]
[-119.52585602 98.50405884]
[-134.52316284 98.78791809]
[-149.52047729 99.07178497]
[-164.51779175 99.35564423]
[-179.51510620 99.63950348]
[-193.27246094 108.56515503]
[-207.75604248 100.87373352]
[-208.06639099 84.47752380]
[-193.88423157 76.24353790]
[-179.79896545 84.64218903]
[-164.80165100 84.35832977]
[-149.80433655 84.07447052]
[-134.80702209 83.79060364]
[-119.80971527 83.50674438]
[-104.81240082 83.22288513]
[-89.81508636 82.93901825]
[-83.19284821 74.75962067]
[-72.90793610 71.64273071]
[-62.43373489 74.90197754]
[-55.45521545 83.65231323]
[-40.47938538 84.50348663]
[-25.50355530 85.35466766]
[-10.52772427 86.20584869]
[4.44810629 87.05702972]
[19.42393684 87.90820312]
[34.39976501 88.75938416]
[49.37559891 89.61056519]
[64.35142517 90.46174622]
[79.32725525 91.31291962]
[93.95114136 74.23072052]
[119.93425751 76.89533997]
[128.00039673 64.24871063]
[136.06654358 51.60207748]
[134.02032471 35.69005203]
[145.28807068 24.27000237]
[161.22612000 26.10241127]
[169.60818481 39.78161240]
[164.00425720 54.81409073]
[148.71318054 59.66822052]
[140.64703369 72.31484985]
[132.58088684 84.96148682]
[140.73532104 72.37160492]
[154.23643494 65.83554840]
[169.16975403 67.24835968]
[181.20556641 76.20041656]
[186.85423279 90.09619141]
[184.47801208 104.90678406]
[174.76586914 116.33805847]
[160.53367615 121.07566833]
[145.90789795 117.74600983]
[135.13031006 107.31658173]
[145.83680725 117.82234955]
[156.54330444 128.32810974]
[167.24978638 138.83387756]
[177.95628357 149.33963013]
[188.66278076 159.84539795]
[204.46199036 159.44525146]
[215.85896301 170.39443970]
[216.09205627 186.19700623]
[205.02297974 197.47756958]
[189.21882629 197.54357910]
[178.05592346 186.35585022]
[178.15701294 170.55187988]
[167.45051575 160.04612732]
[156.74403381 149.54035950]
[146.03753662 139.03460693]
[135.33103943 128.52883911]
[124.62455750 118.02307892]
[105.44853210 127.27951813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[44 54]
[45 53]
[46 52]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
