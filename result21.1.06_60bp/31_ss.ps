%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAACGUUUGUUGGCUGUAGCCAACGUGGACGUUUUUUUGCGAGGACAUCGGCUAAUCAUGACGAUGGGCGGUAGGCCAUCGUCC\
) } def
/len { sequence length } bind def

/coor [
[78.16114044 109.89114380]
[63.24708557 111.49456787]
[48.33303070 113.09799194]
[33.41897583 114.70142365]
[18.50492287 116.30484772]
[3.59086823 117.90827179]
[-11.32318592 119.51170349]
[-26.23723984 121.11512756]
[-41.15129471 122.71855164]
[-56.06534958 124.32198334]
[-70.91267395 126.45670319]
[-85.67433929 129.11999512]
[-100.43600464 131.78329468]
[-115.19767761 134.44659424]
[-129.95935059 137.10989380]
[-144.72100830 139.77319336]
[-159.48268127 142.43649292]
[-171.64698792 153.43475342]
[-187.16870117 148.14247131]
[-190.08042908 132.00389099]
[-177.38681030 121.62099457]
[-162.14598083 127.67482758]
[-147.38430786 125.01152802]
[-132.62263489 122.34822845]
[-117.86097717 119.68492889]
[-103.09930420 117.02162933]
[-88.33763885 114.35833740]
[-73.57596588 111.69503784]
[-70.05728912 108.16304016]
[-64.20749664 106.95462036]
[-57.66877747 109.40792847]
[-42.75472260 107.80450439]
[-27.84066772 106.20107269]
[-12.92661285 104.59764862]
[1.98744142 102.99421692]
[16.90149689 101.39079285]
[31.81554985 99.78736877]
[46.72960663 98.18393707]
[61.64365768 96.58051300]
[76.55771637 94.97708893]
[82.43975067 80.29380035]
[97.23694611 71.31711578]
[115.94725800 73.14125824]
[120.17324829 58.74886703]
[124.39923859 44.35647202]
[118.00355530 29.64339066]
[125.64605713 15.53765678]
[141.46406555 12.85998249]
[153.32336426 23.66445160]
[152.12651062 39.66279602]
[138.79162598 48.58246231]
[134.56564331 62.97485352]
[130.33966064 77.36724854]
[135.47123718 63.27232742]
[147.16819763 53.88184357]
[162.03915405 51.91844177]
[175.77244568 57.95138168]
[184.38632202 70.23149872]
[185.38328552 85.19833374]
[178.47427368 98.51244354]
[165.66247559 106.31359100]
[150.66250610 106.33992767]
[137.82505798 98.58560944]
[150.14637756 107.14044189]
[162.46768188 115.69528198]
[174.78900146 124.25012207]
[187.11030579 132.80496216]
[199.43162537 141.35980225]
[211.75292969 149.91464233]
[224.07424927 158.46948242]
[239.82275391 159.98445129]
[245.86444092 173.59867859]
[262.24285889 174.42320251]
[269.47613525 189.14093018]
[260.12335205 202.61152649]
[243.80580139 200.97760010]
[237.30960083 185.91999817]
[222.44239807 185.01692200]
[215.51940918 170.79080200]
[203.19808960 162.23596191]
[190.87678528 153.68112183]
[178.55546570 145.12628174]
[166.23416138 136.57144165]
[153.91284180 128.01660156]
[141.59153748 119.46175385]
[129.27023315 110.90691376]
[111.94856262 126.22163391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[43 53]
[44 52]
[45 51]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
