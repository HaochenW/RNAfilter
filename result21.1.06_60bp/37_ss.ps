%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUUGGAUACAGAAACUGCCCCCCCAAAGGUCAGCAUGUAGCUACAUUCACUCGGUGCGGGCGCACCGC\
) } def
/len { sequence length } bind def

/coor [
[79.98004150 109.28016663]
[65.03711700 110.58750153]
[50.09420013 111.89484406]
[35.15127945 113.20217896]
[20.20835876 114.50951385]
[5.26543856 115.81684875]
[-9.67748260 117.12418365]
[-24.62040329 118.43151855]
[-33.23293304 134.08207703]
[-49.27579880 141.58496094]
[-66.50793457 138.22064209]
[-78.34230804 125.45905304]
[-93.11441803 128.06378174]
[-107.88653564 130.66850281]
[-122.43510437 139.37341309]
[-134.82727051 127.80317688]
[-127.13969421 112.69233704]
[-110.49125671 115.89638519]
[-95.71914673 113.29166412]
[-80.94702911 110.68693542]
[-77.15106201 98.78803253]
[-68.51359558 89.66519928]
[-56.70259857 85.17284393]
[-44.03947830 86.26209259]
[-33.04288483 92.78028107]
[-25.92773819 103.48860168]
[-10.98481846 102.18126678]
[3.95810223 100.87393188]
[18.90102196 99.56658936]
[33.84394455 98.25925446]
[48.78686523 96.95191956]
[63.72978592 95.64458466]
[78.67270660 94.33724976]
[91.08206177 75.80657959]
[116.77915955 75.73282623]
[121.90946198 61.63743973]
[127.03976440 47.54204941]
[121.59011841 32.45295334]
[130.11187744 18.86033630]
[146.06787109 17.19129181]
[157.21803284 28.72617149]
[155.00891113 44.61639786]
[141.13516235 52.67235184]
[136.00485229 66.76774597]
[130.87455750 80.86312866]
[137.37638855 67.34550476]
[149.94557190 59.15920258]
[164.93783569 58.67772675]
[178.00637817 66.04067993]
[185.36215210 79.11327362]
[184.87243652 94.10527802]
[176.67922974 106.66996002]
[163.15803528 113.16436005]
[148.22914124 111.70551300]
[136.22248840 102.71833038]
[147.28164673 112.85218048]
[158.34080505 122.98603058]
[169.39996338 133.11988831]
[180.45912170 143.25373840]
[191.51828003 153.38758850]
[207.63710022 156.40682983]
[212.82580566 171.96348572]
[201.74670410 184.05419922]
[185.79702759 180.24108887]
[181.38442993 164.44674683]
[170.32527161 154.31289673]
[159.26611328 144.17904663]
[148.20695496 134.04519653]
[137.14779663 123.91133881]
[126.08863068 113.77748871]
[109.12342072 125.43756866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[12 20]
[13 19]
[14 18]
[35 45]
[36 44]
[37 43]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
