%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGAUCCAAGGAAGCGAACGUCUACGUUCGCUACUUUGGAUCUGAGAUAGUAAAGCUACGUCACCUUUCAGUCUAGCGACUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[77.77604675 104.03547668]
[62.96488571 101.66281128]
[48.15372467 99.29015350]
[33.34256363 96.91748810]
[18.53140259 94.54483032]
[3.72024250 92.17216492]
[-11.09091854 89.79950714]
[-25.90207863 87.42684174]
[-40.71323776 85.05418396]
[-55.52439880 82.68152618]
[-70.33556366 80.30886078]
[-85.14672089 77.93620300]
[-99.95787811 75.56353760]
[-114.80818939 81.02055359]
[-126.15136719 71.36749268]
[-140.96252441 68.99483490]
[-155.77368164 66.62216949]
[-170.58483887 64.24951172]
[-185.39601135 61.87685013]
[-200.20716858 59.50418854]
[-215.01832581 57.13152695]
[-229.82948303 54.75886536]
[-244.94841003 61.11106491]
[-257.84362793 50.97965622]
[-255.24964905 34.78696442]
[-239.83493042 29.19063950]
[-227.45683289 39.94770432]
[-212.64566040 42.32036591]
[-197.83450317 44.69302750]
[-183.02334595 47.06568909]
[-168.21218872 49.43835068]
[-153.40101624 51.81101227]
[-138.58985901 54.18367386]
[-123.77870178 56.55633545]
[-109.98779297 50.92960739]
[-97.58522034 60.75237656]
[-82.77406311 63.12503815]
[-67.96289825 65.49770355]
[-53.15173721 67.87036133]
[-38.34057617 70.24302673]
[-23.52941704 72.61568451]
[-8.71825695 74.98834991]
[6.09290361 77.36100769]
[20.90406418 79.73367310]
[35.71522522 82.10633087]
[50.52638626 84.47898865]
[65.33754730 86.85165405]
[80.14870453 89.22431183]
[95.90484619 73.33616638]
[121.80526733 77.45382690]
[131.93370056 66.38970184]
[142.06211853 55.32557297]
[152.19055176 44.26144409]
[158.42576599 28.49570465]
[175.30143738 30.12284470]
[178.40954590 46.78945923]
[163.25468445 54.38987350]
[153.12625122 65.45400238]
[142.99781799 76.51812744]
[132.86938477 87.58225250]
[143.63644409 77.13856506]
[158.54345703 75.47095490]
[171.35209656 83.27729034]
[176.70213318 97.29074860]
[172.35469055 111.64692688]
[160.12908936 120.33798981]
[145.14154053 119.72687531]
[133.66345215 110.06823730]
[144.54710388 120.39035797]
[155.43075562 130.71247864]
[166.31440735 141.03459167]
[177.19805908 151.35670471]
[188.08171082 161.67883301]
[198.96536255 172.00094604]
[209.84901428 182.32305908]
[225.91365051 185.61842346]
[230.83467102 201.26181030]
[219.54974365 213.16065979]
[203.66783142 209.07443237]
[199.52690125 193.20671082]
[188.64324951 182.88459778]
[177.75959778 172.56248474]
[166.87594604 162.24035645]
[155.99229431 151.91824341]
[145.10864258 141.59613037]
[134.22499084 131.27400208]
[123.34133148 120.95188904]
[102.72045898 128.30909729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[50 60]
[51 59]
[52 58]
[53 57]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
