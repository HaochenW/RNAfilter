%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCGUGGCUCAAGGCUAGCCUUAUAACACGGAUGAGCUCGACGCGAUAACCAGGUAAUACUCAGUAUUACCU\
) } def
/len { sequence length } bind def

/coor [
[80.63082886 109.17567444]
[65.68486786 110.44776154]
[50.73890686 111.71985626]
[35.79294205 112.99194336]
[20.84698105 114.26403046]
[5.90101862 115.53611755]
[-9.04494381 116.80821228]
[-15.63451767 130.61128235]
[-28.16558647 139.20599365]
[-43.21613693 140.36671448]
[-56.73644638 133.88156128]
[-65.13874054 121.58249664]
[-80.08470154 122.85458374]
[-95.03067017 124.12667084]
[-109.97663116 125.39875793]
[-123.11553955 135.21206665]
[-138.07473755 128.49237061]
[-139.46548462 112.15229797]
[-125.85709381 103.00112915]
[-111.24871826 110.45279694]
[-96.30275726 109.18070984]
[-81.35679626 107.90862274]
[-66.41082764 106.63653564]
[-60.20794678 93.09438324]
[-47.97811127 84.41756439]
[-32.94788742 83.01803589]
[-19.14455223 89.37136078]
[-10.31703281 101.86224365]
[4.62892962 100.59015656]
[19.57489204 99.31806946]
[34.52085495 98.04598236]
[49.46681595 96.77388763]
[64.41278076 95.50180054]
[79.35874176 94.22971344]
[84.61182404 81.45413208]
[97.67390442 73.33659363]
[114.58708191 74.43863678]
[119.58418274 60.29547119]
[113.99242401 45.25845718]
[122.38556671 31.58605194]
[138.32510376 29.76655197]
[149.58358765 41.19572449]
[147.52447510 57.10608673]
[133.72734070 65.29257202]
[128.73023987 79.43572998]
[136.42636108 66.56056976]
[150.39338684 61.09045410]
[164.78634644 65.31453705]
[173.58201599 77.46510315]
[173.09954834 92.45733643]
[163.54084778 104.01724243]
[148.90608215 107.30717468]
[135.31875610 100.94948578]
[147.37870789 109.86898041]
[159.43867493 118.78847504]
[171.49862671 127.70797729]
[183.55857849 136.62747192]
[195.61854553 145.54696655]
[207.67849731 154.46646118]
[219.73844910 163.38597107]
[231.79841614 172.30546570]
[248.12838745 176.86270142]
[248.26983643 193.81605530]
[232.01817322 198.64514160]
[222.87892151 184.36541748]
[210.81895447 175.44592285]
[198.75900269 166.52642822]
[186.69905090 157.60693359]
[174.63908386 148.68742371]
[162.57913208 139.76792908]
[150.51918030 130.84843445]
[138.45921326 121.92893982]
[126.39926147 113.00943756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[12 23]
[13 22]
[14 21]
[15 20]
[37 45]
[38 44]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
