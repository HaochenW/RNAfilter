%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCUGUGUGCAUCAACCGGUUGAAUGCCACACAGCUCUCAGCCCAGUUAGGCCCACAUACGUCUUCCUACGAGACGC\
) } def
/len { sequence length } bind def

/coor [
[78.18397522 105.41339874]
[63.25443268 103.96123505]
[48.32489395 102.50907135]
[33.39535141 101.05690765]
[18.46580887 99.60474396]
[3.53626680 98.15258789]
[-11.39327526 96.70042419]
[-26.32281685 95.24826050]
[-41.25235748 93.79609680]
[-56.18190002 92.34393311]
[-71.11144257 90.89176941]
[-86.04098511 89.43960571]
[-100.99588013 88.27722168]
[-115.97050476 87.40504456]
[-130.94512939 86.53287506]
[-145.93383789 85.95124054]
[-160.93101501 85.66037750]
[-175.92820740 85.36950684]
[-190.01739502 93.76157379]
[-204.19569397 85.52096558]
[-203.87768555 69.12490082]
[-189.39051819 61.44025040]
[-175.63732910 70.37232208]
[-160.64015198 70.66319275]
[-145.64297485 70.95406342]
[-138.71553040 67.85455322]
[-130.07295227 71.55825043]
[-115.09832764 72.43042755]
[-100.12370300 73.30259705]
[-93.08128357 70.47402954]
[-84.58882141 74.51006317]
[-69.65927887 75.96222687]
[-54.72973633 77.41439056]
[-39.80019760 78.86655426]
[-24.87065506 80.31871796]
[-9.94111252 81.77088165]
[4.98842955 83.22304535]
[19.91797256 84.67520905]
[34.84751511 86.12736511]
[49.77705383 87.57952881]
[64.70659637 89.03169250]
[79.63613892 90.48385620]
[95.20300293 73.70141602]
[121.63364410 77.81434631]
[131.27545166 66.32367706]
[140.91726685 54.83301163]
[139.29032898 39.11268616]
[149.32055664 26.89917183]
[165.05720520 25.43852615]
[177.16400146 35.59732819]
[178.45817566 51.34853745]
[168.17195129 63.34724426]
[152.40792847 64.47482300]
[142.76612854 75.96549225]
[133.12431335 87.45616150]
[143.85488892 76.97499847]
[158.75599670 75.25542450]
[171.59176636 83.01705933]
[176.99063110 97.01177979]
[172.69326782 111.38302612]
[160.49803162 120.11665344]
[145.50845337 119.55780029]
[133.99674988 109.93923950]
[144.50001526 120.64818573]
[155.00328064 131.35713196]
[165.50653076 142.06607056]
[176.00979614 152.77502441]
[186.51306152 163.48396301]
[202.47685242 165.07670593]
[211.06349182 178.62841797]
[205.68606567 193.74339294]
[190.46965027 198.82672119]
[177.08697510 189.97891235]
[175.80410767 173.98722839]
[165.30084229 163.27828979]
[154.79759216 152.56933594]
[144.29432678 141.86039734]
[133.79106140 131.15144348]
[123.28781128 120.44249725]
[103.49268341 127.93328857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 29]
[14 28]
[15 27]
[16 25]
[17 24]
[18 23]
[44 55]
[45 54]
[46 53]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
