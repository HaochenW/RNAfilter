%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGUCUGCGCAGAUGCGUCUGAUCCGUGCUUUGGUACGCAGAAUCUCGGGGAUCACAUUUAGUGAUCA\
) } def
/len { sequence length } bind def

/coor [
[81.35560608 111.41339874]
[66.65197754 114.38043213]
[51.94834900 117.34745789]
[37.24472046 120.31449127]
[22.54108810 123.28151703]
[7.90669394 126.57309723]
[-6.65130281 130.18760681]
[-19.40678215 143.25860596]
[-36.04683685 138.13853455]
[-50.43070221 142.39344788]
[-64.81456757 146.64837646]
[-79.19843292 150.90330505]
[-90.09275055 163.16079712]
[-106.09846497 159.59020996]
[-110.75027466 143.86466980]
[-99.26279449 132.16125488]
[-83.45336151 136.51943970]
[-69.06949615 132.26451111]
[-54.68563080 128.00958252]
[-40.30176544 123.75466156]
[-34.10263824 113.13499451]
[-21.90298462 109.59903717]
[-10.26581860 115.62961578]
[4.29217863 112.01509857]
[10.21160030 107.19261169]
[19.57406044 108.57788849]
[34.27769089 105.61085510]
[48.98131943 102.64382935]
[63.68495178 99.67680359]
[78.38858032 96.70977020]
[88.93207550 77.07756042]
[114.43518066 74.79173279]
[117.72676086 60.15733719]
[121.01833344 45.52294159]
[124.30991364 30.88854599]
[116.98118591 16.61727142]
[123.70063782 2.04920745]
[139.31369019 -1.64027429]
[151.84333801 8.37908077]
[151.67790222 24.42128181]
[138.94430542 34.18012238]
[135.65272522 48.81451797]
[132.36116028 63.44891357]
[129.06958008 78.08330536]
[135.22793579 64.40578461]
[148.00744629 56.55185318]
[162.99185181 57.23561478]
[175.00296021 66.22077942]
[179.89006042 80.40232086]
[175.96430969 94.87949371]
[164.58235168 104.64938354]
[149.67744446 106.33578491]
[136.40008545 99.35567474]
[148.00839233 108.85552979]
[159.61669922 118.35539246]
[171.22500610 127.85524750]
[182.83329773 137.35510254]
[194.44160461 146.85496521]
[210.48388672 146.69755554]
[220.49697876 159.23222351]
[216.79968262 174.84341431]
[202.22825623 181.55558777]
[187.96064758 174.21971130]
[184.94175720 158.46325684]
[173.33345032 148.96340942]
[161.72514343 139.46354675]
[150.11683655 129.96369934]
[138.50852966 120.46383667]
[126.90023041 110.96398163]
[111.56150055 124.01450348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 24]
[7 23]
[9 20]
[10 19]
[11 18]
[12 17]
[32 44]
[33 43]
[34 42]
[35 41]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
