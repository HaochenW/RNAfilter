%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUUCAUCGCCGAUCCAUCGGCCCGAUGAAGCAGGCCUAAAGGGUAUCACGCCUAUCACCUGAUAGA\
) } def
/len { sequence length } bind def

/coor [
[78.78448486 107.01888275]
[63.78837204 106.67743683]
[48.79225540 106.33599091]
[33.79614258 105.99454498]
[18.80002975 105.65309143]
[3.80391717 105.31164551]
[-11.19219589 104.97019958]
[-26.18830872 104.62875366]
[-41.18442154 104.28730011]
[-56.18053436 104.62875366]
[-71.14556885 105.65238953]
[-86.11059570 106.67602539]
[-101.07563019 107.69966125]
[-116.04066467 108.72329712]
[-129.34077454 118.31699371]
[-144.18627930 111.34971619]
[-145.30540466 94.98880005]
[-131.54687500 86.06494904]
[-117.06430054 93.75826263]
[-102.09926605 92.73462677]
[-87.13423157 91.71099091]
[-72.16920471 90.68735504]
[-57.20417404 89.66371918]
[-53.25780869 86.45355988]
[-47.16700363 85.92649841]
[-40.84297562 89.29119110]
[-25.84686089 89.63263702]
[-10.85074806 89.97408295]
[4.14536524 90.31552887]
[19.14147758 90.65698242]
[34.13759232 90.99842834]
[49.13370514 91.33987427]
[64.12982178 91.68132782]
[79.12593079 92.02277374]
[93.80474091 74.32785034]
[120.37001038 77.33744049]
[128.73901367 64.88916016]
[137.10803223 52.44088364]
[145.47703552 39.99260330]
[149.29646301 23.47448158]
[166.22637939 22.57196999]
[171.78027344 38.59041214]
[157.92532349 48.36161423]
[149.55630493 60.80989456]
[141.18730164 73.25817108]
[132.81828308 85.70645142]
[142.98654175 74.67891693]
[157.77745056 72.18309021]
[171.00125122 79.26342773]
[177.12399292 92.95692444]
[173.58341980 107.53308105]
[161.86119080 116.89200592]
[146.86288452 117.11714172]
[134.86431885 108.11323547]
[145.34950256 118.83987427]
[155.83470154 129.56651306]
[166.31988525 140.29316711]
[176.80506897 151.01980591]
[192.73347473 154.92080688]
[197.05889893 170.73924255]
[185.33171082 182.20245361]
[169.61584473 177.51806641]
[166.07843018 161.50498962]
[155.59324646 150.77835083]
[145.10804749 140.05169678]
[134.62286377 129.32505798]
[124.13768005 118.59841919]
[105.30964661 127.25086975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[36 46]
[37 45]
[38 44]
[39 43]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
