%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGCUGGACCAAGAGAGCGCUCUCUAUCGCAUCCAGCAAUGCUAGCCUCUAGGGUGUAGUGUGUAGACCAUCCAAGUCUACU\
) } def
/len { sequence length } bind def

/coor [
[75.63167572 104.86398315]
[60.72166443 103.22341919]
[45.81164932 101.58284760]
[30.90163422 99.94228363]
[15.99162006 98.30171204]
[1.08160567 96.66114807]
[-13.82840919 95.02057648]
[-28.73842430 93.38001251]
[-43.64843750 91.73944092]
[-58.55845261 90.09887695]
[-73.46846771 88.45830536]
[-85.42264557 103.06943512]
[-103.55800629 107.76257324]
[-120.82884216 100.89185333]
[-130.62977600 85.26995087]
[-145.62977600 85.26995087]
[-160.62977600 85.26995087]
[-175.62977600 85.26995087]
[-190.62977600 85.26995087]
[-204.55357361 93.93365479]
[-218.88900757 85.96952057]
[-218.88900757 69.57037354]
[-204.55357361 61.60624695]
[-190.62977600 70.26995087]
[-175.62977600 70.26995087]
[-160.62977600 70.26995087]
[-145.62977600 70.26995087]
[-130.62977600 70.26995087]
[-125.69631958 59.82579803]
[-117.10553741 52.02674484]
[-106.13632965 48.08768463]
[-94.44242096 48.64483643]
[-83.80303955 53.65335464]
[-75.85222626 62.38808060]
[-71.82789612 73.54829407]
[-56.91788483 75.18885803]
[-42.00786972 76.82942963]
[-27.09785461 78.46999359]
[-12.18784046 80.11056519]
[2.72217393 81.75112915]
[17.63218880 83.39170074]
[32.54220200 85.03226471]
[47.45221710 86.67283630]
[62.36223221 88.31340027]
[77.27224731 89.95397186]
[86.85511017 75.78327179]
[104.82093811 70.12697601]
[124.04132843 77.44580078]
[134.05110168 66.27421570]
[144.06089783 55.10263824]
[154.07067871 43.93105316]
[160.13728333 28.09967232]
[177.02937317 29.54663086]
[180.31515503 46.17912674]
[165.24226379 53.94083786]
[155.23246765 65.11241913]
[145.22268677 76.28400421]
[135.21290588 87.45558167]
[145.96708679 76.99864197]
[160.87203979 75.31268311]
[173.69027710 83.10324097]
[179.05758667 97.11009979]
[174.72781372 111.47161102]
[162.51292419 120.17772675]
[147.52462769 119.58506775]
[136.03465271 109.94057465]
[146.83320618 120.35168457]
[157.63175964 130.76280212]
[168.43031311 141.17391968]
[179.22886658 151.58502197]
[190.02742004 161.99613953]
[205.55790710 160.16912842]
[218.60087585 168.79553223]
[222.99784851 183.80221558]
[216.67269897 198.10348511]
[202.61196899 204.94673157]
[187.45471191 201.10076904]
[178.35771179 188.38154602]
[179.61630249 172.79469299]
[168.81774902 162.38357544]
[158.01919556 151.97245789]
[147.22064209 141.56135559]
[136.42208862 131.15023804]
[125.62354279 120.73912811]
[104.09207153 129.98156738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[48 58]
[49 57]
[50 56]
[51 55]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
