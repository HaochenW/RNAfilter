%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAUAUCAUGUUCAGAUUUCUGAACGGACAUAUCGAUCCUGCUCUAGCGACCAUCACACUGCAGUGCCUUCUGCAGUU\
) } def
/len { sequence length } bind def

/coor [
[76.24501801 109.39274597]
[61.29125595 110.56963348]
[46.33749771 111.74652100]
[31.38373756 112.92340851]
[16.42997742 114.10029602]
[1.47621727 115.27718353]
[-13.47754288 116.45407104]
[-24.45403481 129.90948486]
[-41.42196274 131.36795044]
[-54.02874374 120.42097473]
[-68.92477417 122.18403625]
[-83.82080078 123.94709778]
[-98.71682739 125.71015930]
[-113.61285400 127.47322083]
[-128.50888062 129.23628235]
[-143.40490723 130.99934387]
[-156.21388245 141.23956299]
[-171.38603210 135.01557922]
[-173.31355286 118.73011017]
[-160.01356506 109.13623047]
[-145.16796875 116.10331726]
[-130.27194214 114.34025574]
[-115.37591553 112.57719421]
[-100.47988892 110.81413269]
[-85.58386230 109.05107117]
[-70.68782806 107.28800964]
[-55.79180527 105.52494812]
[-49.19927597 94.27517700]
[-37.11690903 88.87232208]
[-23.95232773 91.53707886]
[-14.65442944 101.50030518]
[0.29933086 100.32341766]
[15.25309086 99.14653778]
[30.20685005 97.96965027]
[45.16061020 96.79276276]
[60.11437225 95.61587524]
[75.06813049 94.43898773]
[79.46880341 81.92726898]
[90.09275055 72.57432556]
[104.80200958 69.40643311]
[120.04460144 74.06776428]
[126.32450104 60.44561386]
[132.60440063 46.82346725]
[130.56584167 30.55151558]
[143.80007935 20.86714935]
[158.69285583 27.73281288]
[159.92376709 44.08570099]
[146.22654724 53.10336304]
[139.94664001 66.72550964]
[133.66674805 80.34765625]
[141.11088562 67.32518768]
[154.58595276 60.73558426]
[169.43531799 62.85604095]
[180.52745056 72.95378113]
[184.02923584 87.53930664]
[178.73052979 101.57225800]
[166.46244812 110.20323944]
[151.46446228 110.44961548]
[138.91926575 102.22598267]
[150.69902039 111.51239014]
[162.47877502 120.79879761]
[174.25852966 130.08520508]
[186.03828430 139.37161255]
[197.81803894 148.65802002]
[209.59779358 157.94444275]
[225.26110840 155.83818054]
[237.77522278 165.49075317]
[239.71577454 181.17544556]
[229.93142700 193.58682251]
[214.22708130 195.36143494]
[201.91984558 185.44641113]
[200.31138611 169.72419739]
[188.53163147 160.43777466]
[176.75187683 151.15136719]
[164.97212219 141.86495972]
[153.19236755 132.57855225]
[141.41261292 123.29214478]
[129.63285828 114.00573730]
[110.54798889 128.47462463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[41 50]
[42 49]
[43 48]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
