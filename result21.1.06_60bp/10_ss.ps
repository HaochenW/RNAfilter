%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGGUUAAAUCGGUGCCGAUUUUUAACCUGCAGGCUUCUAGCAAUCUCACAGUGCCGGCAGCAUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[79.83241272 108.38768005]
[64.84668732 109.04196930]
[49.86096573 109.69626617]
[34.87524033 110.35055542]
[19.88951874 111.00484467]
[4.90379524 111.65913391]
[-10.08192825 112.31342316]
[-25.06765175 112.96772003]
[-40.05337524 113.62200928]
[-55.03909683 114.27629852]
[-69.98201752 115.58363342]
[-84.85369110 117.54152679]
[-99.72536469 119.49942017]
[-114.59703827 121.45731354]
[-127.27088165 131.86431885]
[-142.52319336 125.83946991]
[-144.66371155 109.58061981]
[-131.49044800 99.81347656]
[-116.55493164 106.58563995]
[-101.68325806 104.62774658]
[-86.81158447 102.66985321]
[-71.93991089 100.71195984]
[-68.21275330 97.27876282]
[-62.19503784 96.36738586]
[-55.69338989 99.29057312]
[-40.70766449 98.63628387]
[-25.72194290 97.98199463]
[-10.73621941 97.32770538]
[4.24950409 96.67340851]
[19.23522758 96.01911926]
[34.22095108 95.36483002]
[49.20667267 94.71054077]
[64.19239807 94.05625153]
[79.17812347 93.40195465]
[92.41645050 75.75185394]
[117.70969391 77.07287598]
[122.83999634 62.97748184]
[127.97029877 48.88209534]
[127.70590210 31.93020821]
[143.92210388 26.98339272]
[153.16468811 41.19644928]
[142.06568909 54.01239395]
[136.93539429 68.10778809]
[131.80508423 82.20317078]
[143.06503296 72.29290771]
[152.04901123 60.28089523]
[165.43598938 53.51415634]
[180.43557739 53.40316391]
[193.92123413 59.97104645]
[203.08197021 71.84878540]
[206.00833130 86.56056976]
[202.09031677 101.03983307]
[192.14462280 112.26850128]
[178.24432373 117.90605164]
[163.28684998 116.77737427]
[150.38995361 109.11774445]
[136.19462585 104.27084351]
[146.32847595 115.33000183]
[156.46232605 126.38916016]
[166.59617615 137.44831848]
[182.39437866 137.88722229]
[193.19419861 149.42582703]
[192.58830261 165.21849060]
[180.93615723 175.89572144]
[165.15077209 175.12287903]
[154.59733582 163.35850525]
[155.53701782 147.58218384]
[145.40316772 136.52301025]
[135.26931763 125.46385956]
[125.13545990 114.40469360]
[108.06343842 125.34249878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 22]
[12 21]
[13 20]
[14 19]
[36 44]
[37 43]
[38 42]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
