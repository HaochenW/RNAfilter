%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUAACACAAGUUGCUUGUAGUCAACUUUUUUGUUCAGCAUCGGGUCUAGGGAGAAUAAUUCUCCCUU\
) } def
/len { sequence length } bind def

/coor [
[83.16249084 143.13066101]
[67.88491821 133.35231018]
[55.86776352 142.32939148]
[43.85061264 151.30648804]
[31.83345985 160.28356934]
[19.81630707 169.26065063]
[7.79915428 178.23773193]
[-4.21799803 187.21482849]
[-10.18797588 202.48870850]
[-26.43902779 204.68765259]
[-36.25346375 191.54957581]
[-29.53503227 176.58981323]
[-13.19508266 175.19766235]
[-1.17793047 166.22058105]
[10.83922195 157.24349976]
[22.85637474 148.26641846]
[34.87352753 139.28933716]
[46.89067841 130.31224060]
[58.90783310 121.33515930]
[53.86479950 103.91137695]
[55.90253448 85.88727570]
[64.70828247 70.02918243]
[78.93054962 58.77095795]
[74.35846710 44.48474121]
[60.47026443 32.62425613]
[64.47545624 15.68125820]
[59.27591705 1.61126161]
[54.07637787 -12.45873451]
[39.61716461 -18.83891487]
[33.98240280 -33.60458374]
[40.51509857 -47.99553680]
[55.33951950 -53.47386932]
[69.66059875 -46.78939056]
[74.98188782 -31.90787888]
[68.14636993 -17.65827370]
[73.34590912 -3.58827710]
[78.54544830 10.48171902]
[89.55287933 15.96287060]
[93.89016724 27.90114594]
[88.64468384 39.91265488]
[93.21676636 54.19887161]
[103.15592194 53.80697632]
[112.94941711 55.54701233]
[122.14526367 59.33868027]
[130.31904602 65.00698090]
[137.09350586 72.29030609]
[142.15600586 80.85251617]
[145.27288818 90.29843140]
[146.30030823 100.19210052]
[145.19082642 110.07690430]
[141.99568176 119.49663544]
[154.39814758 127.93337250]
[166.80062866 136.37011719]
[179.20310974 144.80685425]
[191.60557556 153.24359131]
[204.00805664 161.68032837]
[216.41053772 170.11706543]
[228.81301880 178.55380249]
[245.31007385 182.46321106]
[246.12028503 199.39779663]
[230.07180786 204.86430359]
[220.37626648 190.95628357]
[207.97380066 182.51954651]
[195.57131958 174.08280945]
[183.16883850 165.64607239]
[170.76637268 157.20933533]
[158.36389160 148.77258301]
[145.96141052 140.33584595]
[133.55892944 131.89910889]
[118.72883606 142.34365845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[23 41]
[24 40]
[26 37]
[27 36]
[28 35]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
