%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAACUGAAUACCAGACGACUCGGUCGUCUGAUUGGUUCAGUUAGGACCCCCGUGAGGGAAUUUUACACAACUCGUUUAGUUGU\
) } def
/len { sequence length } bind def

/coor [
[77.29246521 102.28152466]
[62.70375824 98.79301453]
[48.11505508 95.30450439]
[33.52635193 91.81598663]
[18.93764687 88.32747650]
[4.34894371 84.83896637]
[-10.23976040 81.35045624]
[-24.82846451 77.86193848]
[-39.41716766 74.37342834]
[-54.00587082 70.88491821]
[-68.59457397 67.39640808]
[-83.18328094 63.90789413]
[-98.69968414 74.45152283]
[-116.74147034 70.60758972]
[-126.28308868 55.18714142]
[-141.08547974 52.76041031]
[-155.88787842 50.33367920]
[-170.69027710 47.90695190]
[-185.49267578 45.48022079]
[-200.29507446 43.05348969]
[-215.09747314 40.62675858]
[-229.89987183 38.20003128]
[-246.50852966 41.60423279]
[-254.37744141 26.58701706]
[-242.12542725 14.86845779]
[-227.47314453 23.39763260]
[-212.67074585 25.82436180]
[-197.86834717 28.25109291]
[-183.06594849 30.67782211]
[-168.26354980 33.10455322]
[-153.46115112 35.53128052]
[-138.65875244 37.95801163]
[-123.85635376 40.38474274]
[-116.04527283 31.70308685]
[-104.86395264 27.93328094]
[-93.15238953 30.15849876]
[-83.94731140 37.92296219]
[-79.69477081 49.31919098]
[-65.10606384 52.80770111]
[-50.51736069 56.29621506]
[-35.92865753 59.78472519]
[-21.33995247 63.27323914]
[-6.75124884 66.76174927]
[7.83745527 70.25025940]
[22.42615891 73.73877716]
[37.01486206 77.22728729]
[51.60356903 80.71579742]
[66.19226837 84.20430756]
[80.78097534 87.69281769]
[90.17382050 75.20413208]
[107.45149231 70.40168762]
[126.28372955 77.85069275]
[138.38706970 68.99015045]
[150.49040222 60.12960815]
[156.60769653 44.91412735]
[172.87924194 42.87231827]
[182.56625366 56.10461426]
[175.70358276 70.99876404]
[159.35095215 72.23294830]
[147.24760437 81.09348297]
[135.14427185 89.95402527]
[134.06472778 97.37593079]
[148.93437195 95.40271759]
[163.70770264 92.80486298]
[174.47018433 103.25325775]
[172.31089783 118.09703064]
[159.01765442 125.04609680]
[145.59700012 118.34724426]
[131.90563965 112.21972656]
[130.82609558 119.64162445]
[139.90370178 131.58302307]
[148.98132324 143.52441406]
[158.05892944 155.46580505]
[167.13653564 167.40721130]
[176.21415710 179.34860229]
[191.85226440 182.93040466]
[198.67193604 197.45182800]
[191.44172668 211.77325439]
[175.70802307 214.90853882]
[163.54037476 204.45254517]
[164.27276611 188.42622375]
[155.19514465 176.48481750]
[146.11753845 164.54342651]
[137.03991699 152.60203552]
[127.96231079 140.66062927]
[118.88469696 128.71923828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[52 61]
[53 60]
[54 59]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
