%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCUAACAAUAUGUAUAGUAGUAGCUUCCGCGGGCCCGCCUGACCAACGUGAUACUUGUUUAGUCUCAAGUAUCU\
) } def
/len { sequence length } bind def

/coor [
[82.03404236 112.50793457]
[67.53237152 116.34218597]
[53.03069687 120.17642975]
[38.52902222 124.01068115]
[24.02734947 127.84493256]
[9.52567577 131.67918396]
[-4.97599792 135.51342773]
[-19.47767067 139.34768677]
[-23.58433533 154.08140564]
[-34.44273376 164.71116638]
[-49.06665802 168.45379639]
[-63.50382996 164.40113831]
[-73.90400696 153.73802185]
[-88.40567780 157.57228088]
[-99.65232086 169.50730896]
[-115.54727173 165.47213745]
[-119.73916626 149.61779785]
[-107.91574097 138.25387573]
[-92.23992920 143.07060242]
[-77.73825836 139.23635864]
[-73.96740723 124.82641602]
[-63.41989899 114.16780853]
[-48.85723877 110.19348145]
[-34.16405869 114.06739807]
[-23.31192017 124.84600830]
[-8.81024742 121.01175690]
[5.69142580 117.17750549]
[20.19309998 113.34326172]
[34.69477081 109.50901031]
[49.19644547 105.67475891]
[63.69812012 101.84050751]
[78.19979095 98.00626373]
[86.08979034 78.73177338]
[109.13442993 72.54438782]
[109.13442993 57.54438782]
[109.13442993 42.54438782]
[109.13442993 27.54438782]
[100.47072601 13.62058449]
[108.43485260 -0.71484995]
[124.83399963 -0.71484995]
[132.79812622 13.62058449]
[124.13442993 27.54438782]
[124.13442993 42.54438782]
[124.13442993 57.54438782]
[124.13442993 72.54438782]
[127.37960052 57.89963150]
[138.29275513 47.60871124]
[153.10260010 45.22787857]
[166.69126892 51.57988739]
[174.36289978 64.46965790]
[173.46636963 79.44284821]
[164.31150818 91.32511902]
[150.06196594 96.01029968]
[135.64172363 91.87912750]
[148.82635498 99.03213501]
[162.01098633 106.18515015]
[175.19560242 113.33816528]
[188.38023376 120.49117279]
[201.56486511 127.64418793]
[214.74949646 134.79719543]
[227.93412781 141.95021057]
[241.87884521 135.14402771]
[257.15505981 137.86735535]
[267.88879395 149.07302856]
[269.95263672 164.45223999]
[262.55303955 178.09136963]
[248.53530884 184.74588013]
[233.28952026 181.85699463]
[222.67800903 170.53553772]
[220.78111267 155.13484192]
[207.59648132 147.98182678]
[194.41184998 140.82881165]
[181.22721863 133.67579651]
[168.04260254 126.52278900]
[154.85797119 119.36978149]
[141.67333984 112.21676636]
[128.48870850 105.06375122]
[115.21025848 121.80661774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[13 20]
[14 19]
[34 45]
[35 44]
[36 43]
[37 42]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
