%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCGCACGAUAAAAGUUGUCUUCGUUGCAUCGUGCGGCUAAGGUCGGCCGGAUUCACAUUCCCCAAAGGAGGGU\
) } def
/len { sequence length } bind def

/coor [
[78.00546265 103.54402924]
[63.25756836 100.80548096]
[48.50967789 98.06693268]
[33.76178360 95.32838440]
[19.01388931 92.58983612]
[4.26599693 89.85128784]
[-10.48189640 87.11273956]
[-25.22978973 84.37419128]
[-39.97768402 81.63565063]
[-54.72557831 78.89710236]
[-69.47347260 76.15855408]
[-84.22136688 73.42000580]
[-97.15638733 82.09887695]
[-112.07383728 79.11151123]
[-120.26810455 66.72646332]
[-135.01599121 63.98791122]
[-144.93363953 75.71548462]
[-159.39178467 80.89793396]
[-174.50125122 78.14121246]
[-186.19767761 68.18685913]
[-191.33477783 53.71254730]
[-188.53071594 38.61179352]
[-178.53974915 26.94662666]
[-164.04940796 21.85491562]
[-148.95751953 24.70630455]
[-137.32371521 34.73378754]
[-132.27745056 49.24002075]
[-117.52955627 51.97856522]
[-105.43527985 43.36090469]
[-90.43981171 45.92809296]
[-81.48281860 58.67211151]
[-66.73492432 61.41065979]
[-51.98703003 64.14920807]
[-37.23913574 66.88775635]
[-22.49124336 69.62630463]
[-7.74334955 72.36484528]
[7.00454378 75.10339355]
[21.75243759 77.84194183]
[36.50033188 80.58049011]
[51.24822235 83.31903839]
[65.99611664 86.05758667]
[80.74401093 88.79613495]
[98.88943481 73.31727600]
[125.51572418 82.16078949]
[137.61489868 73.29457855]
[149.71408081 64.42835999]
[161.81326294 55.56214142]
[165.66950989 39.98944473]
[180.30860901 33.42617798]
[194.50068665 40.90711975]
[197.35881042 56.69352722]
[186.69046021 68.67542267]
[170.67948914 67.66132355]
[158.58030701 76.52754211]
[146.48112488 85.39375305]
[134.38194275 94.25997162]
[146.99703979 86.14459229]
[161.94018555 87.44935608]
[172.95791626 97.62823486]
[175.43948364 112.42153931]
[168.34640503 125.63850403]
[154.64701843 131.74804688]
[140.07427979 128.19343567]
[130.72622681 116.46100616]
[139.34379578 128.73852539]
[147.96136475 141.01605225]
[163.56993103 143.49557495]
[172.78582764 156.33468628]
[170.14140320 171.91616821]
[157.20558167 180.99580383]
[141.65292358 178.18681335]
[132.71055603 165.15570068]
[135.68383789 149.63362122]
[127.06626892 137.35609436]
[118.44869995 125.07856750]
[98.66142273 128.14987183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[15 28]
[16 27]
[44 56]
[45 55]
[46 54]
[47 53]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
