%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGAUCAACAUGCCAACCUUUGGCAGCAAGUUGAUCUCACCCCUACCGGAUAAUCUUGCGUCCAGUAGGACUUGGACGC\
) } def
/len { sequence length } bind def

/coor [
[80.83042908 106.05033875]
[65.87444305 104.90209961]
[50.91845703 103.75386047]
[35.96247101 102.60562134]
[21.00648499 101.45738220]
[6.05049706 100.30914307]
[-8.90548992 99.16090393]
[-23.86147690 98.01266479]
[-38.81746292 96.86442566]
[-53.77344894 95.71618652]
[-68.72943878 94.56794739]
[-87.08829498 105.26813507]
[-104.06745911 93.80183411]
[-119.05644989 94.37637329]
[-134.04544067 94.95091248]
[-149.03443909 95.52545166]
[-164.02343750 96.09999084]
[-179.01242065 96.67453766]
[-194.60833740 103.32312012]
[-205.31448364 90.17720795]
[-195.64607239 76.25032043]
[-179.58695984 81.68553925]
[-164.59797668 81.11100006]
[-149.60897827 80.53646088]
[-134.61997986 79.96192169]
[-119.63099670 79.38737488]
[-104.64199829 78.81283569]
[-99.47865295 71.04813385]
[-91.12437439 66.59951782]
[-81.51947021 66.65082550]
[-72.96714020 71.32270813]
[-67.58119965 79.61196136]
[-52.62521362 80.76020050]
[-37.66922379 81.90843964]
[-22.71323776 83.05667877]
[-7.75725079 84.20491791]
[7.19873619 85.35315704]
[22.15472221 86.50139618]
[37.11071014 87.64963531]
[52.06669617 88.79787445]
[67.02268219 89.94611359]
[81.97866821 91.09435272]
[93.52222443 76.35982513]
[115.77509308 75.75952911]
[122.94089508 62.58184433]
[121.98139954 46.21078873]
[135.82630920 37.42155457]
[150.23315430 45.25575256]
[150.38142395 61.65423203]
[136.11857605 69.74764252]
[128.95277405 82.92532349]
[136.96327209 70.24336243]
[150.71548462 64.25366211]
[165.45704651 67.02609253]
[176.09367371 77.60258484]
[178.94964600 92.32819366]
[173.03800964 106.11415100]
[160.40167236 114.19641113]
[145.40739441 113.78196716]
[133.23658752 105.01376343]
[144.80891418 114.55739594]
[156.38125610 124.10103607]
[167.95359802 133.64466858]
[179.52592468 143.18830872]
[191.09826660 152.73194885]
[202.67060852 162.27557373]
[214.24295044 171.81921387]
[229.94885254 170.05850220]
[242.24731445 179.98439026]
[243.84188843 195.70802307]
[233.78652954 207.90086365]
[218.04690552 209.32910156]
[205.96105957 199.14540100]
[204.69931030 183.39155579]
[193.12696838 173.84791565]
[181.55462646 164.30427551]
[169.98229980 154.76065063]
[158.40995789 145.21701050]
[146.83761597 135.67337036]
[135.26527405 126.12973785]
[123.69293976 116.58609772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[44 51]
[45 50]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
