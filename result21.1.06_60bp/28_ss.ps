%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCCAUAGAUAUCCGGAGAUCUCCGGCGACCUAUGGAGGGAUCCGAAUUCCGGCGAGAAUAAGCCCUCUCAUAGAGGGAGAGGGCU\
) } def
/len { sequence length } bind def

/coor [
[81.31542206 107.50000000]
[66.31542206 107.50000000]
[51.31542206 107.50000000]
[36.31542206 107.50000000]
[21.31542206 107.50000000]
[6.31542206 107.50000000]
[-8.68457794 107.50000000]
[-23.68457794 107.50000000]
[-38.68457794 107.50000000]
[-53.68457794 107.50000000]
[-68.68457794 107.50000000]
[-76.42099762 120.69451141]
[-89.63580322 128.19555664]
[-104.73056793 128.07571411]
[-117.65219116 120.46732330]
[-124.98118591 107.50000000]
[-139.98118591 107.50000000]
[-154.98118591 107.50000000]
[-169.98118591 107.50000000]
[-184.98118591 107.50000000]
[-198.90498352 116.16370392]
[-213.24041748 108.19957733]
[-213.24041748 91.80042267]
[-198.90498352 83.83629608]
[-184.98118591 92.50000000]
[-169.98118591 92.50000000]
[-154.98118591 92.50000000]
[-139.98118591 92.50000000]
[-124.98118591 92.50000000]
[-117.65219116 79.53267670]
[-104.73056793 71.92427826]
[-89.63580322 71.80444336]
[-76.42099762 79.30548859]
[-68.68457794 92.50000000]
[-53.68457794 92.50000000]
[-38.68457794 92.50000000]
[-23.68457794 92.50000000]
[-8.68457794 92.50000000]
[6.31542206 92.50000000]
[21.31542206 92.50000000]
[36.31542206 92.50000000]
[51.31542206 92.50000000]
[66.31542206 92.50000000]
[81.31542206 92.50000000]
[92.12259674 76.87678528]
[114.57983398 75.25279999]
[120.68088531 61.54961777]
[126.78193665 47.84643555]
[122.39812469 32.41394424]
[131.84729004 19.44888687]
[147.88084412 18.89694405]
[158.19921875 31.18152046]
[154.88703918 46.87894058]
[140.48510742 53.94748688]
[134.38406372 67.65066528]
[128.28302002 81.35385132]
[135.61323547 68.26691437]
[149.03027344 61.55997086]
[163.89758301 63.55076218]
[175.07740784 73.55132294]
[178.70634460 88.10573578]
[173.53030396 102.18439484]
[161.33799744 110.92210388]
[146.34274292 111.29934692]
[133.72625732 103.18550110]
[145.54641724 112.42042542]
[157.36657715 121.65534973]
[169.18673706 130.89027405]
[181.00689697 140.12519836]
[192.82707214 149.36010742]
[204.64723206 158.59503174]
[216.46739197 167.82995605]
[228.28755188 177.06488037]
[243.54476929 173.63688660]
[257.41213989 180.86392212]
[263.34191895 195.33361816]
[258.53421021 210.21380615]
[245.25910950 218.47853088]
[229.78469849 216.22543335]
[219.41751099 204.51837158]
[219.05262756 188.88504028]
[207.23246765 179.65011597]
[195.41230774 170.41519165]
[183.59214783 161.18026733]
[171.77198792 151.94535828]
[159.95181274 142.71043396]
[148.13165283 133.47550964]
[136.31149292 124.24058533]
[124.49133301 115.00566101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[46 56]
[47 55]
[48 54]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
