%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAACGUGUCAAUGCCAACCCUUGGCAUUAAUUCACGUUGGUAUAAGCGCACGGCAAGUUCUAAAAGAUGUAGACGAGCACAUCUU\
) } def
/len { sequence length } bind def

/coor [
[78.26127625 106.35842133]
[63.28229523 105.56456757]
[48.30331802 104.77072144]
[33.32433701 103.97686768]
[18.34535980 103.18301392]
[3.36638165 102.38916016]
[-11.61259651 101.59531403]
[-26.59157562 100.80146027]
[-41.57055283 100.00760651]
[-56.54953384 99.21375275]
[-69.91354370 112.38961792]
[-88.35957336 111.85544586]
[-100.51865387 98.39306641]
[-115.51631927 98.65779114]
[-130.51397705 98.92251587]
[-145.51164246 99.18724823]
[-160.50930786 99.45197296]
[-175.50697327 99.71669769]
[-190.50463867 99.98143005]
[-205.50230408 100.24615479]
[-221.23225403 106.57109070]
[-231.66450500 93.20677948]
[-221.71040344 79.48262787]
[-205.76702881 85.24848938]
[-190.76936340 84.98376465]
[-175.77169800 84.71903992]
[-160.77403259 84.45430756]
[-145.77636719 84.18958282]
[-130.77871704 83.92485809]
[-115.78104401 83.66012573]
[-100.78338623 83.39540100]
[-94.66084290 73.46266174]
[-84.34764862 67.75054932]
[-72.43721008 67.83142853]
[-61.99190521 73.80344391]
[-55.75568008 84.23477936]
[-40.77670288 85.02863312]
[-25.79772377 85.82247925]
[-10.81874466 86.61633301]
[4.16023350 87.41018677]
[19.13921165 88.20403290]
[34.11819077 88.99788666]
[49.09716797 89.79174042]
[64.07614899 90.58559418]
[79.05513000 91.37944031]
[83.97419739 81.19711304]
[93.86454773 73.95080566]
[106.93960571 72.02980804]
[120.30493164 76.74185944]
[128.77555847 64.36249542]
[127.24461365 48.39265823]
[138.87551880 37.34270477]
[154.74604797 39.68921280]
[162.68167114 53.63214493]
[156.59486389 68.47567749]
[141.15492249 72.83312225]
[132.68429565 85.21247864]
[146.05294800 78.40959930]
[157.96151733 69.28897858]
[172.94401550 68.56457520]
[185.67695618 76.49377441]
[191.63615417 90.25923920]
[188.70423889 104.96990967]
[177.92295837 115.39889526]
[163.12301636 117.84064484]
[149.56250000 111.42704773]
[135.06251526 107.58644104]
[145.94616699 117.90855408]
[156.82981873 128.23068237]
[167.71347046 138.55279541]
[178.59712219 148.87490845]
[189.48077393 159.19702148]
[200.36442566 169.51914978]
[215.59567261 166.55459595]
[229.64628601 173.13943481]
[237.11349487 186.74165344]
[235.12602234 202.13092041]
[224.44808960 213.38975525]
[209.18556213 216.18888855]
[195.20722961 209.45202637]
[187.88800049 195.76960754]
[190.04231262 180.40280151]
[179.15866089 170.08067322]
[168.27500916 159.75856018]
[157.39135742 149.43644714]
[146.50770569 139.11433411]
[135.62403870 128.79220581]
[124.74039459 118.47009277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[49 57]
[50 56]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
