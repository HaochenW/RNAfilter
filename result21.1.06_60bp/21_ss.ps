%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGUUAGUACAGGUCUGUAGGACAACUGUUGGGAGUUAACCUCCGCUGAGCAACGACGAUAUAGCCGUCGUC\
) } def
/len { sequence length } bind def

/coor [
[81.12392426 111.23604584]
[66.38961792 114.04676819]
[51.65530777 116.85748291]
[36.92099762 119.66820526]
[22.18668938 122.47892761]
[7.45238066 125.28964233]
[-7.28192806 128.10035706]
[-17.03733826 144.06283569]
[-34.99417496 148.05932617]
[-50.07931519 138.08416748]
[-64.52675629 142.11796570]
[-78.97418976 146.15176392]
[-93.42163086 150.18556213]
[-104.50267792 162.27450562]
[-120.45174408 158.45883179]
[-124.86179352 142.66378784]
[-113.19615173 131.13795471]
[-97.45542908 135.73812866]
[-83.00798798 131.70433044]
[-68.56055450 127.67052460]
[-54.11311340 123.63673401]
[-50.65397644 112.40612030]
[-42.01986313 104.25621033]
[-30.37203407 101.39207458]
[-18.70854568 104.67449188]
[-10.09264755 113.36605835]
[4.64166069 110.55533600]
[19.37596893 107.74461365]
[34.11027908 104.93389893]
[48.84458542 102.12317657]
[63.57889557 99.31245422]
[78.31320190 96.50173950]
[88.67337799 77.04206085]
[113.86634827 74.26513672]
[116.98502350 59.59292221]
[120.10369873 44.92070770]
[123.22237396 30.24849510]
[115.72576904 16.06468582]
[122.27286530 1.41835308]
[137.84129333 -2.45509219]
[150.48828125 7.41572666]
[150.51216125 23.45876122]
[137.89459229 33.36716843]
[134.77590942 48.03938293]
[131.65724182 62.71159744]
[128.53855896 77.38381195]
[134.36430359 63.56134033]
[146.95011902 55.40061569]
[161.94668579 55.72175980]
[174.17160034 64.41378784]
[179.40026855 78.47298431]
[175.82582092 93.04087067]
[164.68348694 103.08319092]
[149.82373047 105.12959290]
[136.38143921 98.47265625]
[148.32937622 107.54164124]
[160.27732849 116.61063385]
[172.22528076 125.67961884]
[184.17323303 134.74861145]
[196.12118530 143.81759644]
[211.32905579 140.17691040]
[225.29597473 147.20962524]
[231.42718506 161.59510803]
[226.82772827 176.54096985]
[213.66931152 184.99024963]
[198.16494751 182.95343018]
[187.63531494 171.39224243]
[187.05218506 155.76553345]
[175.10424805 146.69654846]
[163.15629578 137.62756348]
[151.20834351 128.55857849]
[139.26039124 119.48959351]
[127.31244659 110.42060852]
[111.89262390 124.02897644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[10 21]
[11 20]
[12 19]
[13 18]
[34 46]
[35 45]
[36 44]
[37 43]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
