%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGUCUUCUCCGAGAGACAUGUGUCUCUCAGCAAGAAGACACCCGUGCUCUUGCAGCUACACUCUCUGACCGUCGAUUCGGUCAGAU\
) } def
/len { sequence length } bind def

/coor [
[78.26876068 105.99871826]
[63.30529785 104.95236969]
[48.34183884 103.90602112]
[33.37837601 102.85968018]
[18.41491508 101.81333160]
[3.45145512 100.76698303]
[-11.51200581 99.72063446]
[-26.47546577 98.67428589]
[-41.43892670 97.62793732]
[-56.40238953 96.58159637]
[-71.36585236 95.53524780]
[-86.35671234 95.01175690]
[-100.15688324 102.74905396]
[-112.88415527 95.01175690]
[-127.88415527 95.01175690]
[-142.88415527 95.01175690]
[-157.88415527 95.01175690]
[-172.88415527 95.01175690]
[-187.88415527 95.01175690]
[-202.88415527 95.01175690]
[-216.80795288 103.67545319]
[-231.14338684 95.71132660]
[-231.14338684 79.31217957]
[-216.80795288 71.34805298]
[-202.88415527 80.01175690]
[-187.88415527 80.01175690]
[-172.88415527 80.01175690]
[-157.88415527 80.01175690]
[-142.88415527 80.01175690]
[-127.88415527 80.01175690]
[-112.88415527 80.01175690]
[-100.15688324 72.27445221]
[-86.35671234 80.01175690]
[-82.27215576 77.16717529]
[-76.31206512 77.01342773]
[-70.31950378 80.57178497]
[-55.35604095 81.61813354]
[-40.39258194 82.66448212]
[-25.42911911 83.71083069]
[-10.46565819 84.75717163]
[4.49780226 85.80352020]
[19.46126366 86.84986877]
[34.42472458 87.89621735]
[49.38818359 88.94256592]
[64.35164642 89.98890686]
[79.31510925 91.03525543]
[93.24214935 74.23142242]
[118.57366943 75.51085663]
[126.07366943 62.52047729]
[133.57366943 49.53009415]
[133.03257751 33.13987732]
[147.09744263 24.70709038]
[161.29951477 32.90666199]
[161.02894592 49.30357742]
[146.56405640 57.03009415]
[139.06405640 70.02047729]
[131.56405640 83.01085663]
[144.37384033 75.20641327]
[155.66592407 65.33276367]
[170.56806946 63.62224197]
[183.80364990 70.68051910]
[190.68614197 84.00836182]
[188.77853394 98.88656616]
[178.75628662 110.04697418]
[164.16815186 113.53784180]
[150.17767334 108.12159729]
[135.47113037 105.16902924]
[146.96180725 114.81084442]
[158.45246887 124.45265961]
[169.94313049 134.09446716]
[181.43380737 143.73628235]
[192.92446899 153.37809753]
[204.41513062 163.01991272]
[215.90580750 172.66172791]
[231.62612915 171.03479004]
[243.83964539 181.06501770]
[245.30029297 196.80166626]
[235.14147949 208.90846252]
[219.39027405 210.20263672]
[207.39157104 199.91641235]
[206.26399231 184.15238953]
[194.77331543 174.51058960]
[183.28265381 164.86877441]
[171.79199219 155.22695923]
[160.30131531 145.58514404]
[148.81065369 135.94332886]
[137.31999207 126.30151367]
[125.82932281 116.65969849]
[106.42490387 127.25834656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 33]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[48 57]
[49 56]
[50 55]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
