%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUUAGGCGUGGAGUGCAAACUGGCUUUCGCCUAAUUUUACUACCGAGAGUAGGAGAAGAAGUGCUGAACACC\
) } def
/len { sequence length } bind def

/coor [
[78.13543701 103.95515442]
[63.34001923 101.48623657]
[48.54459763 99.01731873]
[33.74917984 96.54840088]
[18.95375824 94.07947540]
[4.15833950 91.61055756]
[-10.63708019 89.14163971]
[-25.43249893 86.67272186]
[-40.22792053 84.20380402]
[-55.02333832 81.73488617]
[-69.81875610 79.26596832]
[-79.09616852 80.96398926]
[-85.16930389 76.37712860]
[-99.85005951 73.29890442]
[-114.53080750 70.22067261]
[-129.21156311 67.14244080]
[-143.89231873 64.06420898]
[-155.30427551 74.57833862]
[-170.72065735 76.34321594]
[-184.21354675 68.68021393]
[-190.59465027 54.53591919]
[-187.41030884 39.34909821]
[-175.88496399 28.95939064]
[-160.45034790 27.36185455]
[-147.04138184 35.17077255]
[-140.81408691 49.38345718]
[-126.13333130 52.46168900]
[-111.45258331 55.53992081]
[-96.77182770 58.61814880]
[-82.09107208 61.69638062]
[-67.34983826 64.47054291]
[-52.55442047 66.93946838]
[-37.75899887 69.40838623]
[-22.96358109 71.87730408]
[-8.16816139 74.34622192]
[6.62725830 76.81513977]
[21.42267799 79.28405762]
[36.21809769 81.75297546]
[51.01351547 84.22189331]
[65.80893707 86.69081879]
[80.60435486 89.15973663]
[98.78195190 73.49054718]
[125.44021606 82.53996277]
[137.27731323 73.32677460]
[149.11442566 64.11358643]
[160.95153809 54.90039444]
[164.35478210 39.22246552]
[178.79748535 32.23763657]
[193.20043945 39.30407333]
[196.51493835 55.00100708]
[186.19836426 67.28709412]
[170.16471863 66.73750305]
[158.32762146 75.95069122]
[146.49050903 85.16387939]
[134.65339661 94.37707520]
[146.58988953 85.29299927]
[161.56813049 84.48548126]
[174.41207886 92.23358154]
[180.68321228 105.85977173]
[178.21438599 120.65520477]
[167.85877991 131.50700378]
[153.19499207 134.66506958]
[139.29043579 129.03807068]
[130.95002747 116.57020569]
[139.15425110 129.12770081]
[147.35847473 141.68519592]
[162.70181274 146.37149048]
[168.47010803 161.34167480]
[160.23843384 175.11189270]
[144.32139587 177.11882019]
[132.92921448 165.82290649]
[134.80097961 149.88941956]
[126.59674835 137.33192444]
[118.39252472 124.77442169]
[98.93154907 127.95634460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[43 55]
[44 54]
[45 53]
[46 52]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
