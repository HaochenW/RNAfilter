%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGACUGGAUAAAUUGUAGAUACAAUUUGGAUCCAGUCACCGUACCGCGCGCCGCGACACUAAAAGAUCAAGCAAUGCUUGAUCUC\
) } def
/len { sequence length } bind def

/coor [
[74.94897461 107.05899048]
[59.95130539 106.79425812]
[44.95364380 106.52953339]
[29.95598030 106.26480865]
[14.95831585 106.00007629]
[-0.03934804 105.73535156]
[-15.03701210 105.47062683]
[-30.03467560 105.20589447]
[-45.03234100 104.94116974]
[-60.03000259 104.67644501]
[-75.02766418 104.41171265]
[-90.02532959 104.14698792]
[-105.02299500 104.41171265]
[-120.00197601 105.20556641]
[-134.98095703 105.99942017]
[-149.95993042 106.79327393]
[-164.93890381 107.58712006]
[-179.91789246 108.38097382]
[-194.89686584 109.17482758]
[-208.34263611 118.56328583]
[-223.07948303 111.36899567]
[-223.94737244 94.99282837]
[-210.05352783 86.28118134]
[-195.69071960 94.19584656]
[-180.71174622 93.40199280]
[-165.73275757 92.60814667]
[-150.75378418 91.81429291]
[-135.77481079 91.02043915]
[-120.79582214 90.22658539]
[-105.81684875 89.43273926]
[-101.88610077 86.37260437]
[-95.93682861 85.90491486]
[-89.76060486 89.14932251]
[-74.76293945 89.41404724]
[-59.76527786 89.67877960]
[-44.76761246 89.94350433]
[-29.76994896 90.20822906]
[-14.77228451 90.47296143]
[0.22537917 90.73768616]
[15.22304344 91.00241089]
[30.22070694 91.26714325]
[45.21837234 91.53186798]
[60.21603394 91.79659271]
[75.21369934 92.06132507]
[80.88245392 79.66686249]
[92.67694092 71.12248993]
[108.07802582 69.37334442]
[123.21797180 75.77256012]
[131.68858337 63.39319611]
[140.15921021 51.01383591]
[148.62983704 38.63447571]
[152.58433533 22.14817047]
[169.52105713 21.38426208]
[174.94366455 37.44762421]
[161.00920105 47.10509872]
[152.53857422 59.48445892]
[144.06794739 71.86381531]
[135.59733582 84.24317932]
[144.45118713 72.13495636]
[158.57868958 67.09373474]
[173.09774780 70.86162567]
[182.99096680 82.13655090]
[184.83955383 97.02220917]
[178.00465393 110.37451935]
[164.84825134 117.57929993]
[149.91680908 116.14677429]
[138.37004089 106.57168579]
[149.61120605 116.50327301]
[160.85235596 126.43486023]
[172.09350586 136.36643982]
[183.33467102 146.29803467]
[194.57582092 156.22961426]
[205.81697083 166.16120911]
[217.05813599 176.09278870]
[228.29928589 186.02438354]
[244.17260742 191.98037720]
[242.84355164 208.88215637]
[226.23439026 212.28390503]
[218.36769104 197.26553345]
[207.12654114 187.33395386]
[195.88539124 177.40235901]
[184.64422607 167.47077942]
[173.40307617 157.53918457]
[162.16192627 147.60760498]
[150.92076111 137.67601013]
[139.67961121 127.74442291]
[128.43846130 117.81283569]
[107.44315338 130.14115906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[48 58]
[49 57]
[50 56]
[51 55]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
