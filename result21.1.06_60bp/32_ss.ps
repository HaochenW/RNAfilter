%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGUUGUGACUUGUGGCUGCACACAAUCGUCACAACAGACGCAGAAAUACUGGAUCGAACAUACAUCGAAGUAUGC\
) } def
/len { sequence length } bind def

/coor [
[77.95161438 104.48447418]
[63.09666824 102.40344238]
[48.24172592 100.32240295]
[33.38678360 98.24137115]
[18.53184319 96.16033936]
[3.67690110 94.07930756]
[-11.17804146 91.99827576]
[-26.03298378 89.91724396]
[-40.88792419 87.83621216]
[-55.74286652 85.75517273]
[-70.59780884 83.67414093]
[-85.45275116 81.59310913]
[-100.37868500 80.10430145]
[-115.35200500 79.21007538]
[-130.32533264 78.31584930]
[-145.29864502 77.42162323]
[-160.27197266 76.52739716]
[-171.92579651 87.20277405]
[-187.71105957 86.42745209]
[-198.26263428 74.66139984]
[-197.32046509 58.88522339]
[-185.44351196 48.45863724]
[-169.67817688 49.56755447]
[-159.37774658 61.55407333]
[-144.40441895 62.44829941]
[-129.43110657 63.34252548]
[-114.45777893 64.23675537]
[-99.48445892 65.13098145]
[-95.20251465 62.49666214]
[-89.17565155 62.72228622]
[-83.37171936 66.73816681]
[-68.51677704 68.81919861]
[-53.66183472 70.90023041]
[-38.80689240 72.98126984]
[-23.95195007 75.06230164]
[-9.09700775 77.14333344]
[5.75793409 79.22436523]
[20.61287689 81.30539703]
[35.46781921 83.38642883]
[50.32276154 85.46746063]
[65.17770386 87.54850006]
[80.03264618 89.62953186]
[96.19760895 73.44837189]
[122.49982452 78.46441650]
[132.78541565 67.54623413]
[143.07099915 56.62804794]
[144.03173828 40.61378860]
[157.23359680 31.49839973]
[172.54925537 36.27442932]
[178.22982788 51.27811432]
[169.91767883 64.99991608]
[153.98918152 66.91363525]
[143.70358276 77.83181763]
[133.41799927 88.75000000]
[144.54692078 78.69280243]
[159.50349426 77.55232239]
[172.02865601 85.80583191]
[176.88081360 99.99936676]
[172.02943420 114.19316864]
[159.50473022 122.44736481]
[144.54808044 121.30769348]
[133.41799927 111.25000000]
[143.70358276 122.16818237]
[153.98918152 133.08636475]
[164.27476501 144.00454712]
[174.56034851 154.92272949]
[190.36309814 155.14344788]
[201.32121277 166.53182983]
[200.93342590 182.33135986]
[189.42982483 193.16845703]
[173.63526917 192.61366272]
[162.92041016 180.99610901]
[163.64216614 165.20831299]
[153.35658264 154.29013062]
[143.07099915 143.37194824]
[132.78541565 132.45376587]
[122.49982452 121.53558350]
[102.30036926 128.16963196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[44 54]
[45 53]
[46 52]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
