%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUAGUACAUGGUUGUGUACAAGACCAUGUACUACCGAGUGAUUGAUUCGCCAGUACUAUCGACCCACCGAA\
) } def
/len { sequence length } bind def

/coor [
[78.53381348 105.70007324]
[63.58784866 104.42798615]
[48.64188766 103.15589905]
[33.69592285 101.88380432]
[18.74996185 100.61171722]
[3.80399966 99.33963013]
[-11.14196301 98.06754303]
[-26.08792496 96.79545593]
[-41.03388596 95.52336121]
[-55.97985077 94.25127411]
[-70.92581177 92.97918701]
[-85.87177277 91.70709991]
[-100.81773376 90.43500519]
[-115.76370239 89.16291809]
[-130.70965576 87.89083099]
[-140.75990295 99.71336365]
[-155.84773254 103.33787537]
[-170.17156982 97.37067413]
[-178.22360229 84.10626984]
[-176.90765381 68.64509583]
[-166.72975159 56.93228912]
[-151.60348511 53.47166061]
[-137.34523010 59.59389496]
[-129.43757629 72.94487000]
[-114.49160767 74.21695709]
[-99.54564667 75.48904419]
[-84.59968567 76.76113129]
[-69.65372467 78.03322601]
[-54.70775986 79.30531311]
[-39.76179886 80.57740021]
[-24.81583595 81.84948730]
[-9.86987400 83.12158203]
[5.07608843 84.39366913]
[20.02205086 85.66575623]
[34.96801376 86.93784332]
[49.91397476 88.20993805]
[64.85993958 89.48202515]
[79.80590057 90.75411224]
[96.55112457 73.86631775]
[123.49630737 80.53691864]
[133.87538147 69.70757294]
[144.25447083 58.87823486]
[154.63356018 48.04889297]
[155.73194885 32.04348373]
[169.01170349 23.04194450]
[184.28572083 27.94948196]
[189.83708191 43.00145721]
[181.40727234 56.65127945]
[165.46289062 58.42797470]
[155.08381653 69.25731659]
[144.70472717 80.08665466]
[134.32565308 90.91600037]
[145.27854919 80.66738129]
[160.09748840 78.34387970]
[173.66148376 84.74842834]
[181.28315735 97.66779327]
[180.32870483 112.63739777]
[171.12792969 124.48415375]
[156.86036682 129.11416626]
[142.45651245 124.92740631]
[132.89379883 113.37039185]
[141.81329346 125.43035126]
[150.73278809 137.49031067]
[166.39807129 139.58184814]
[175.92964172 152.18838501]
[173.67259216 167.83067322]
[160.96598816 177.22842407]
[145.34843445 174.80612183]
[136.08554077 162.00086975]
[138.67283630 146.40980530]
[129.75334167 134.34985352]
[120.83383942 122.28989410]
[101.77478790 127.68684387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[40 52]
[41 51]
[42 50]
[43 49]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
