%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGAUUUUUCUUAGAAUGCUAAGAAAUUGCACUCGAAUUUGGUGCUCUACCCUCCUUUUCUGGCAUAUGCCAGAAAG\
) } def
/len { sequence length } bind def

/coor [
[112.05439758 158.46101379]
[100.71935272 159.68652344]
[89.35807037 158.73455811]
[78.38501740 155.63983154]
[68.20052338 150.51527405]
[59.17613983 143.54780579]
[51.64109039 134.99163818]
[45.87026215 125.15889740]
[42.07419586 114.40831757]
[27.17816734 116.17137909]
[12.28214073 117.93444061]
[-2.61388612 119.69750214]
[-17.50991249 121.46056366]
[-32.40594101 123.22362518]
[-47.30196762 124.98668671]
[-62.19799423 126.74974823]
[-75.00697327 136.98995972]
[-90.17912292 130.76599121]
[-92.10663605 114.48051453]
[-78.80665588 104.88663483]
[-63.96105576 111.85372162]
[-49.06502914 110.09066010]
[-34.16900253 108.32759857]
[-19.27297401 106.56453705]
[-4.37694693 104.80147552]
[10.51908016 103.03841400]
[25.41510582 101.27535248]
[40.31113434 99.51229095]
[46.53699875 73.45370483]
[63.53366470 52.74319839]
[87.87694550 41.55318451]
[86.70005798 26.59942436]
[85.52317047 11.64566517]
[84.34628296 -3.30809498]
[83.16939545 -18.26185417]
[70.33438110 -27.19473839]
[66.29405975 -42.30135345]
[72.95613861 -56.44881439]
[87.17499542 -62.95712662]
[102.23691559 -58.75326157]
[111.03012848 -45.82215881]
[109.40274048 -30.26948547]
[98.12316132 -19.43874168]
[99.30004883 -4.48498154]
[100.47692871 10.46877861]
[101.65381622 25.42253876]
[102.83070374 40.37629700]
[112.99839783 41.74160767]
[122.78214264 44.82779312]
[131.89292908 49.54368591]
[140.06164551 55.74999237]
[147.04699707 63.26338196]
[152.64263916 71.86192322]
[156.68328857 81.29162598]
[159.04959106 91.27394867]
[159.67166138 101.51402283]
[158.53109741 111.70937347]
[155.66160583 121.55885315]
[151.14794922 130.77151489]
[162.92770386 140.05792236]
[174.70745850 149.34432983]
[186.48721313 158.63073730]
[198.26696777 167.91714478]
[210.04672241 177.20355225]
[221.82647705 186.48995972]
[233.60623169 195.77636719]
[249.90447998 197.59275818]
[256.23178101 212.72210693]
[246.07917786 225.60063171]
[229.89077759 222.98002625]
[224.31982422 207.55612183]
[212.54006958 198.26971436]
[200.76031494 188.98330688]
[188.98056030 179.69689941]
[177.20080566 170.41049194]
[165.42105103 161.12408447]
[153.64129639 151.83767700]
[141.86154175 142.55126953]
[133.00770569 149.73419189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
