%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCUUCUUACGGGGGGCACCCCCUACGUCUAAGAAGCGGAAACCAUGUGGGCGGAAUCUCGUCGGCCAUUGACGAGG\
) } def
/len { sequence length } bind def

/coor [
[75.67845917 104.67370605]
[60.78243256 102.91064453]
[45.88640594 101.14758301]
[30.99037743 99.38452148]
[16.09435081 97.62145996]
[1.19832456 95.85839844]
[-13.69770241 94.09533691]
[-28.59372902 92.33227539]
[-43.48975754 90.56921387]
[-58.38578415 88.80615997]
[-73.33954620 87.62927246]
[-88.32798004 87.04037476]
[-103.31641388 86.45147705]
[-118.31352234 86.15696716]
[-133.31352234 86.15696716]
[-148.31352234 86.15696716]
[-163.31352234 86.15696716]
[-178.31352234 86.15696716]
[-194.15264893 92.20330811]
[-204.34741211 78.65696716]
[-194.15264893 65.11063385]
[-178.31352234 71.15696716]
[-163.31352234 71.15696716]
[-148.31352234 71.15696716]
[-133.31352234 71.15696716]
[-118.31352234 71.15696716]
[-111.44384766 67.92187500]
[-102.72751617 71.46304321]
[-87.73908234 72.05194092]
[-72.75064850 72.64083099]
[-68.52678680 69.92381287]
[-62.50362015 70.02425385]
[-56.62272263 73.91013336]
[-41.72669601 75.67318726]
[-26.83066750 77.43624878]
[-11.93464088 79.19931030]
[2.96138549 80.96237183]
[17.85741234 82.72543335]
[32.75344086 84.48849487]
[47.64946747 86.25155640]
[62.54549408 88.01461792]
[77.44152069 89.77767944]
[86.53679657 76.04930878]
[103.64708710 70.03702545]
[122.52555847 76.03038025]
[131.81196594 64.25062561]
[133.62835693 47.95238113]
[148.75770569 41.62506485]
[161.63623047 51.77767563]
[159.01562500 67.96607971]
[143.59172058 73.53703308]
[134.30531311 85.31678772]
[144.39486694 74.21719360]
[159.16763306 71.61620331]
[172.44146729 78.60228729]
[178.66148376 92.25188446]
[175.22468567 106.85285950]
[163.56933594 116.29494476]
[148.57301331 116.62677002]
[136.51069641 107.70844269]
[147.91679382 117.45016479]
[159.32287598 127.19188690]
[170.72897339 136.93360901]
[182.13505554 146.67532349]
[193.54115295 156.41705322]
[204.94723511 166.15876770]
[220.98928833 166.33854675]
[230.73672485 179.08087158]
[226.71215820 194.61093140]
[212.00289917 201.01538086]
[197.89260864 193.38127136]
[195.20552063 177.56486511]
[183.79942322 167.82313538]
[172.39334106 158.08142090]
[160.98724365 148.33969116]
[149.58116150 138.59797668]
[138.17506409 128.85624695]
[126.76898193 119.11453247]
[105.21022797 129.73103333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 30]
[12 29]
[13 28]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[45 52]
[46 51]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
