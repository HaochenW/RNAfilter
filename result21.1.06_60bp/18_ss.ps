%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Fri Jan  8 10:37:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAAAAAUAGUGAUGUCACUCUGUUUAACUGGCCGGGCGCUGAUACGAUCUAACCCGCAUGGGUUAA\
) } def
/len { sequence length } bind def

/coor [
[80.92237854 110.66238403]
[66.11243439 113.04261780]
[51.30249023 115.42285919]
[36.49254608 117.80309296]
[21.68260193 120.18333435]
[6.87265730 122.56357574]
[-0.20669918 136.24526978]
[-13.82564068 143.05540466]
[-28.66766357 140.56976318]
[-39.07548141 129.94830322]
[-53.88542557 132.32855225]
[-68.69537354 134.70878601]
[-83.50531769 137.08901978]
[-95.87792206 147.85241699]
[-111.29548645 142.26397705]
[-113.89774323 126.07261658]
[-101.00771332 115.93460846]
[-85.88555145 122.27907562]
[-71.07560730 119.89884186]
[-56.26566315 117.51860046]
[-41.45571899 115.13835907]
[-34.90021133 101.79058075]
[-21.58449554 94.77946472]
[-6.51749659 96.97921753]
[4.49241924 107.75362396]
[19.30236435 105.37339020]
[34.11230850 102.99314880]
[48.92225266 100.61291504]
[63.73219681 98.23267365]
[78.54214478 95.85243988]
[89.58135986 76.81150818]
[114.78714752 75.06715393]
[118.17250061 60.45416641]
[121.55786133 45.84117889]
[114.32079315 31.52320099]
[121.13352966 16.99852753]
[136.76991272 13.40924263]
[149.23506165 23.50873947]
[148.96676636 39.54954910]
[136.17083740 49.22653580]
[132.78549194 63.83951950]
[129.40013123 78.45250702]
[134.81869507 64.46539307]
[146.70509338 55.31590652]
[161.61306763 53.65680695]
[175.22021484 59.96913528]
[183.58132935 72.42271423]
[184.27223206 87.40679932]
[177.09259033 100.57694244]
[164.12405396 108.11463928]
[149.12666321 107.83444214]
[136.45037842 99.81939697]
[147.86753845 109.54813385]
[159.28471375 119.27686310]
[170.70188904 129.00559998]
[182.11904907 138.73432922]
[193.53622437 148.46305847]
[209.75337219 150.89945984]
[215.49932861 166.25901794]
[204.86312866 178.74113464]
[188.78640747 175.50529480]
[183.80749512 159.88023376]
[172.39031982 150.15148926]
[160.97315979 140.42276001]
[149.55598450 130.69403076]
[138.13880920 120.96530151]
[126.72164154 111.23657227]
[111.04734802 124.20883942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[10 21]
[11 20]
[12 19]
[13 18]
[32 42]
[33 41]
[34 40]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
