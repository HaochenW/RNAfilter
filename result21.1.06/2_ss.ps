%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCUUGACGUGACUCAGCCUGAGUAUUUAGUCAAGCUCUACCAAUCGCUGCCGCGCAGGCACGCUUAAGUAUUCCUAUACUUC\
) } def
/len { sequence length } bind def

/coor [
[64.24757385 108.81163025]
[49.25757980 109.35945892]
[34.26758575 109.90728760]
[19.27759361 110.45512390]
[4.28760052 111.00295258]
[-10.70239258 111.55078125]
[-25.69238472 112.09860992]
[-40.68237686 112.64643860]
[-55.67237091 113.19427490]
[-70.66236115 113.74210358]
[-80.12370300 128.97451782]
[-96.62403107 135.59094238]
[-113.68951416 131.19209290]
[-124.74034882 117.66251373]
[-139.65036011 119.30308533]
[-154.56037903 120.94364929]
[-169.47039795 122.58422089]
[-184.38040161 124.22478485]
[-199.46322632 131.96719360]
[-211.07839966 119.61714172]
[-202.42637634 105.03704834]
[-186.02098083 109.31477356]
[-171.11096191 107.67420197]
[-156.20094299 106.03363800]
[-141.29092407 104.39306641]
[-126.38091278 102.75250244]
[-121.86318207 91.20067596]
[-112.74443054 82.68473053]
[-100.77162170 78.92253876]
[-88.27616882 80.71288300]
[-77.71991730 87.76680756]
[-71.21018982 98.75211334]
[-56.22019958 98.20427704]
[-41.23020935 97.65644836]
[-26.24021530 97.10861969]
[-11.25022221 96.56079102]
[3.73977017 96.01295471]
[18.72976303 95.46512604]
[33.71975708 94.91729736]
[48.70974731 94.36946869]
[63.69974136 93.82164001]
[66.85380554 83.96220398]
[72.62744904 75.37025452]
[80.56436920 68.72481537]
[90.03730774 64.55107880]
[100.29760742 63.17891312]
[110.53438568 64.71675110]
[119.93862152 69.04306030]
[127.76708984 75.81592560]
[140.84783936 68.47465515]
[153.79231262 60.89570618]
[166.59620667 53.08160019]
[179.40010071 45.26749420]
[192.20399475 37.45338821]
[197.36000061 22.26144409]
[212.50051880 16.95631409]
[226.01103210 25.60764122]
[227.52745056 41.57886887]
[215.88648987 52.61823654]
[200.01811218 50.25728607]
[187.21420288 58.07139206]
[174.41030884 65.88549805]
[161.60641479 73.69960022]
[157.43991089 80.02021027]
[148.18910217 81.55539703]
[135.10835266 88.89666748]
[136.81517029 100.72407532]
[134.64462280 112.47521973]
[128.82531738 122.91248322]
[138.42041016 134.44219971]
[148.01550293 145.97189331]
[157.61061096 157.50160217]
[167.20570374 169.03131104]
[176.80079651 180.56101990]
[192.36680603 185.72157288]
[195.41519165 201.83489990]
[182.81002808 212.32499695]
[167.51843262 206.40054321]
[165.27108765 190.15611267]
[155.67599487 178.62640381]
[146.08090210 167.09669495]
[136.48580933 155.56700134]
[126.89070892 144.03729248]
[117.29560852 132.50758362]
[95.69873047 136.57020569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[49 66]
[50 65]
[51 63]
[52 62]
[53 61]
[54 60]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
