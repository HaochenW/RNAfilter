%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUCUAACCUGAAUAUUCAGGCCGAGAUACUGGCCUGGGAUCUCGAACUGAGAAAGUUGGUAUUUAAGGCACGAUGCCUUAAAC\
) } def
/len { sequence length } bind def

/coor [
[81.95603180 114.40878296]
[67.83002472 119.45416260]
[53.70401382 124.49954224]
[39.57800293 129.54492188]
[25.45199203 134.59030151]
[11.32598209 139.63568115]
[-2.80002761 144.68106079]
[-9.89267826 160.54963684]
[-25.91363907 166.37416077]
[-40.93961716 159.05848694]
[-54.87426758 164.61054993]
[-68.80891418 170.16262817]
[-82.74356842 175.71470642]
[-96.67822266 181.26676941]
[-106.40634155 194.46888733]
[-122.67145538 192.37648010]
[-128.74140930 177.14205933]
[-118.37194824 164.43746948]
[-102.23029327 167.33212280]
[-88.29563904 161.78004456]
[-74.36099243 156.22798157]
[-60.42633820 150.67590332]
[-46.49168777 145.12382507]
[-43.03971100 132.57054138]
[-32.78922653 124.22960663]
[-19.40509605 123.37644196]
[-7.84540606 130.55503845]
[6.28060389 125.50966644]
[20.40661430 120.46428680]
[34.53262329 115.41890717]
[48.65863419 110.37353516]
[62.78464508 105.32815552]
[76.91065216 100.28277588]
[84.12027740 83.23598480]
[101.53239441 76.95982361]
[107.33513641 63.12768555]
[113.13788605 49.29554367]
[103.10617065 37.84450912]
[99.05756378 23.23301506]
[101.74345398 8.37346649]
[110.57839966 -3.79636002]
[123.76670074 -10.89411354]
[138.66714478 -11.55915833]
[144.46989441 -25.39130020]
[150.27262878 -39.22344208]
[156.07537842 -53.05558395]
[151.35826111 -68.38948059]
[160.52433777 -81.55620575]
[176.54217529 -82.45537567]
[187.12425232 -70.39722443]
[184.15292358 -54.63173294]
[169.90751648 -47.25283813]
[164.10478210 -33.42069626]
[158.30203247 -19.58855438]
[152.49928284 -5.75641251]
[162.46546936 5.34047031]
[166.64245605 19.72317123]
[164.15036011 34.55389786]
[155.43063354 46.88218307]
[142.16906738 54.23184586]
[126.97002411 55.09828949]
[121.16728210 68.93042755]
[115.36453247 82.76257324]
[122.45792389 94.62976837]
[121.50035858 108.42214203]
[132.93278503 118.13293457]
[144.36521912 127.84372711]
[155.79765320 137.55451965]
[167.23008728 147.26531982]
[178.66250610 156.97612000]
[190.09494019 166.68690491]
[201.52737427 176.39770508]
[212.95980835 186.10848999]
[228.94610596 191.75424194]
[227.94644165 208.67869568]
[211.40667725 212.40325928]
[203.24900818 197.54092407]
[191.81657410 187.83013916]
[180.38415527 178.11933899]
[168.95172119 168.40853882]
[157.51928711 158.69775391]
[146.08685303 148.98695374]
[134.65441895 139.27616882]
[123.22199249 129.56536865]
[111.78956604 119.85457611]
[101.34423828 123.05191803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[35 63]
[36 62]
[37 61]
[43 55]
[44 54]
[45 53]
[46 52]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
