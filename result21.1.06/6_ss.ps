%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUAUACAGAAGGUCUUCUGUGGAUAGCCUGUAGCCCAGUUGACCUGGCUGUUUCUUGGGGAAGAU\
) } def
/len { sequence length } bind def

/coor [
[77.84914398 109.03268433]
[62.88411331 110.05632019]
[47.91908264 111.07995605]
[32.95405197 112.10359192]
[17.98901939 113.12722778]
[3.02398777 114.15086365]
[-11.94104385 115.17449951]
[-26.84397697 116.87820435]
[-41.65392303 119.25844574]
[-56.46386719 121.63867950]
[-71.27381134 124.01892090]
[-86.08375549 126.39915466]
[-100.89369965 128.77938843]
[-113.26630402 139.54278564]
[-128.68386841 133.95436096]
[-131.28613281 117.76299286]
[-118.39610291 107.62498474]
[-103.27394104 113.96945190]
[-88.46399689 111.58921051]
[-73.65405273 109.20897675]
[-58.84410477 106.82873535]
[-44.03416061 104.44850159]
[-29.22421455 102.06826019]
[-25.58611679 98.51253510]
[-19.56847572 97.43379974]
[-12.96467972 100.20947266]
[2.00035143 99.18583679]
[16.96538353 98.16220093]
[31.93041420 97.13856506]
[46.89544678 96.11492920]
[61.86047745 95.09129333]
[76.82550812 94.06764984]
[90.46955109 78.05870819]
[111.48224640 79.01410675]
[122.44478607 68.77581024]
[133.40733337 58.53751373]
[144.36987305 48.29921722]
[155.33241272 38.06091690]
[159.65646362 29.62577248]
[167.03472900 27.62018585]
[178.45190430 17.89145470]
[181.15699768 2.07810521]
[195.27595520 -5.53992701]
[209.97793579 0.88126016]
[213.98481750 16.41588020]
[204.22286987 29.14710426]
[188.18063354 29.30862427]
[176.76345825 39.03735733]
[165.57070923 49.02345657]
[154.60816956 59.26175308]
[143.64562988 69.50005341]
[132.68309021 79.73834991]
[121.72054291 89.97664642]
[123.80558777 97.64546204]
[123.26325226 105.57413483]
[120.15339661 112.88761139]
[129.61972046 124.52327728]
[139.08602905 136.15895081]
[148.55235291 147.79461670]
[164.06002808 153.12791443]
[166.92907715 169.27413940]
[154.20808411 179.62344360]
[138.98329163 173.52934265]
[136.91668701 157.26094055]
[127.45036316 145.62527466]
[117.98404694 133.98959351]
[108.51772308 122.35392761]
[96.38188934 123.64654541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[40 48]
[41 47]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
