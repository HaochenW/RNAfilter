%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACGGGGGCUCUCCGACCGGAGAGCAAUACGUUUUUGGACACCUUCGGUCCGCGAAUAGAAGAUCUAGUAUCCCUAUACUAGU\
) } def
/len { sequence length } bind def

/coor [
[82.40572357 112.03183746]
[67.83650970 115.60086823]
[53.26729584 119.16989136]
[38.69808197 122.73892212]
[24.12886429 126.30795288]
[18.02995110 141.95999146]
[3.99031758 150.88002014]
[-12.44147205 149.77362061]
[-24.90676689 139.26419067]
[-39.33415222 143.36912537]
[-53.76153564 147.47407532]
[-68.18891907 151.57902527]
[-82.61630249 155.68395996]
[-97.04369354 159.78890991]
[-111.47107697 163.89385986]
[-122.49240875 176.03726196]
[-138.46008301 172.30023193]
[-142.94792175 156.52711487]
[-131.33921814 144.94392395]
[-115.57601929 149.46647644]
[-101.14863586 145.36152649]
[-86.72125244 141.25657654]
[-72.29386902 137.15164185]
[-57.86648178 133.04669189]
[-43.43909454 128.94174194]
[-29.01171112 124.83679962]
[-25.54198265 111.80754852]
[-15.96693230 102.16019440]
[-2.75383997 98.53482056]
[10.61497021 101.99951172]
[20.55983734 111.73873138]
[35.12905121 108.16970825]
[49.69826889 104.60067749]
[64.26748657 101.03165436]
[78.83670044 97.46262360]
[89.46452332 77.69731903]
[115.09153748 76.39507294]
[117.84778595 61.65047455]
[120.60402679 46.90587997]
[123.36026764 32.16128159]
[126.11650848 17.41668701]
[116.04925537 5.45071888]
[116.08055878 -10.18683338]
[126.19564819 -22.11239624]
[141.61848450 -24.69508362]
[155.06686401 -16.71542931]
[160.19088745 -1.94118309]
[154.57115173 12.65170860]
[140.86111450 20.17292976]
[138.10485840 34.91752625]
[135.34861755 49.66212082]
[132.59237671 64.40671539]
[129.83613586 79.15131378]
[133.52873230 64.61292267]
[142.97927856 52.96444702]
[156.44445801 46.35467148]
[171.44032288 46.00290680]
[185.20060730 51.97404099]
[195.18695068 63.16658401]
[199.55717468 77.51583862]
[197.50509644 92.37480927]
[189.40925598 105.00245667]
[176.76310730 113.06935883]
[161.89949036 115.08742523]
[147.56027222 110.68437195]
[136.39241028 100.67491150]
[146.90055847 111.37906647]
[157.40869141 122.08322144]
[167.91683960 132.78736877]
[178.42498779 143.49151611]
[188.93313599 154.19567871]
[199.44128418 164.89982605]
[215.37800598 168.76669312]
[219.73731995 184.57582092]
[208.03471375 196.06413269]
[192.30883789 191.41343689]
[188.73712158 175.40797424]
[178.22898865 164.70382690]
[167.72084045 153.99966431]
[157.21269226 143.29551697]
[146.70454407 132.59136963]
[136.19639587 121.88721466]
[125.68825531 111.18305969]
[111.21012878 123.21833038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
