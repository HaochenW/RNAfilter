%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGAUAUCCCGCCCGCAACUAUGCGGGGCGGGGGAUAUCCGUGGACGUAGGUGCUAGCCACAUAUUUUAUGAGACAAUCAUAG\
) } def
/len { sequence length } bind def

/coor [
[71.94210052 104.45801544]
[57.03208923 102.81745148]
[42.12207413 101.17687988]
[27.21205902 99.53631592]
[12.30204391 97.89574432]
[-2.60797048 96.25518036]
[-17.51798439 94.61460876]
[-32.42800140 92.97403717]
[-47.33801270 91.33347321]
[-62.24802780 89.69290161]
[-77.15804291 88.05233765]
[-92.06806183 86.41176605]
[-107.02804565 85.31684113]
[-122.01803589 84.76900482]
[-137.00802612 84.22117615]
[-151.99801636 83.67334747]
[-166.99551392 83.39938354]
[-181.99551392 83.39938354]
[-196.99551392 83.39938354]
[-210.91932678 92.06308746]
[-225.25476074 84.09896088]
[-225.25476074 67.69981384]
[-210.91932678 59.73568344]
[-196.99551392 68.39938354]
[-181.99551392 68.39938354]
[-166.99551392 68.39938354]
[-160.14634705 65.17465973]
[-151.45019531 68.68335724]
[-136.46020508 69.23118591]
[-121.47020721 69.77901459]
[-106.48020935 70.32684326]
[-102.28308868 67.62033844]
[-96.29843903 67.69173431]
[-90.42749023 71.50175476]
[-75.51747894 73.14231873]
[-60.60746002 74.78289032]
[-45.69744492 76.42345428]
[-30.78743172 78.06402588]
[-15.87741661 79.70459747]
[-0.96740234 81.34516144]
[13.94261265 82.98573303]
[28.85262680 84.62629700]
[43.76264191 86.26686859]
[58.67265701 87.90743256]
[73.58267212 89.54800415]
[81.28368378 75.41161346]
[96.42726898 66.79896545]
[115.16191101 67.47634125]
[131.86338806 78.61288452]
[144.06274414 69.88499451]
[149.37933350 62.16049194]
[156.87081909 61.07075882]
[169.38079834 52.79424286]
[181.89076233 44.51772690]
[188.72282410 29.60951042]
[205.07290649 28.34174728]
[214.12142944 42.01860046]
[206.56004333 56.57049561]
[190.16728210 57.02769089]
[177.65730286 65.30420685]
[165.14733887 73.58072662]
[152.79061890 82.08434296]
[140.59127808 90.81222534]
[139.49926758 98.23229980]
[153.44319153 92.70355225]
[165.20324707 102.01490021]
[163.01950073 116.85509491]
[149.07568359 122.38409424]
[137.31524658 113.07245636]
[136.22325134 120.49253082]
[145.39085388 132.36497498]
[154.55845642 144.23742676]
[163.72605896 156.10986328]
[172.89366150 167.98231506]
[188.55839539 171.44583130]
[195.48764038 185.91528320]
[188.36585999 200.29095459]
[172.65631104 203.54505920]
[160.40997314 193.18132019]
[161.02122498 177.14991760]
[151.85360718 165.27748108]
[142.68600464 153.40502930]
[133.51840210 141.53257751]
[124.35079956 129.66014099]
[99.55128479 135.05079651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 31]
[14 30]
[15 29]
[16 28]
[17 26]
[18 25]
[19 24]
[49 63]
[50 62]
[52 61]
[53 60]
[54 59]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
