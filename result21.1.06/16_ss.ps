%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUAAAUGUAUCUUUGAAGAUACUUAUAAGCCGACAGGCCGCGACCUGCACUACGGGAUCCCCUGCCGGGGAUCCA\
) } def
/len { sequence length } bind def

/coor [
[69.95716858 113.05605316]
[55.19670486 115.72602081]
[40.43624115 118.39598846]
[25.67577744 121.06596375]
[10.91531467 123.73593140]
[-3.84514809 126.40589905]
[-10.65506554 140.22367859]
[-24.13795471 147.29934692]
[-39.02582932 145.10501099]
[-49.63976669 134.68952942]
[-64.40023041 137.35949707]
[-79.16069031 140.02946472]
[-93.92115784 142.69943237]
[-108.68161774 145.36940002]
[-123.44208527 148.03936768]
[-135.60140991 159.04312134]
[-151.12551880 153.75785828]
[-154.04454041 137.62059021]
[-141.35562134 127.23196411]
[-126.11205292 133.27890015]
[-111.35158539 130.60893250]
[-96.59112549 127.93896484]
[-81.83066559 125.26899719]
[-67.07019806 122.59902954]
[-52.30973434 119.92906189]
[-46.01702499 106.45539093]
[-32.84124374 99.18471527]
[-17.73403358 101.08882141]
[-6.51511669 111.64543152]
[8.24534607 108.97546387]
[23.00580978 106.30549622]
[37.76627350 103.63552856]
[52.52673721 100.96556091]
[67.28720093 98.29559326]
[72.73244476 81.84751129]
[85.80603027 70.47774506]
[102.85050201 67.36708832]
[107.54244995 53.11978531]
[112.23439789 38.87248230]
[116.92635345 24.62518120]
[109.58453369 10.62970543]
[114.36907959 -4.43295336]
[128.44139099 -11.62638664]
[143.45262146 -6.68285894]
[150.49687195 7.46472311]
[145.39491272 22.42284966]
[131.17364502 29.31712914]
[126.48170471 43.56443024]
[121.78975677 57.81173325]
[117.09780121 72.05903625]
[121.84458923 75.59003448]
[125.87885284 79.91723633]
[129.06900024 84.89949799]
[131.31098938 90.37429810]
[132.53167725 96.16306305]
[132.69125366 102.07698822]
[131.78451538 107.92316437]
[129.84104919 113.51090240]
[141.72619629 122.66203308]
[153.61134338 131.81315613]
[165.49650574 140.96427917]
[177.38165283 150.11541748]
[189.26681519 159.26654053]
[201.15196228 168.41766357]
[213.03710938 177.56880188]
[229.35505676 179.19873047]
[235.85493469 194.25474548]
[225.85021973 207.24850464]
[209.63291931 204.81314087]
[203.88598633 189.45394897]
[192.00083923 180.30282593]
[180.11567688 171.15168762]
[168.23052979 162.00056458]
[156.34538269 152.84944153]
[144.46022034 143.69831848]
[132.57507324 134.54718018]
[120.68991852 125.39605713]
[102.25224304 132.67965698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[37 50]
[38 49]
[39 48]
[40 47]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
