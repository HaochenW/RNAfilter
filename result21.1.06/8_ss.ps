%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGAUGUCGUAUCCUAAGAGAUUAGGAGACGAUCGACAUCCGAUUGAGCUAGUUAGACAGGUUCUGCUCCAAAUGGCAACAUGUGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[81.08690643 107.18159485]
[66.08904266 106.92825317]
[51.09118652 106.67490387]
[36.09332275 106.42156219]
[21.09546471 106.16822052]
[6.09760380 105.91487885]
[-8.90025711 105.66153717]
[-23.89811707 105.40819550]
[-38.89597702 105.15485382]
[-53.89383698 104.90151215]
[-68.89170074 104.64817047]
[-82.64699554 120.27116394]
[-103.16330719 121.10826111]
[-117.73941040 107.04945374]
[-132.63468933 108.81880188]
[-147.52996826 110.58815002]
[-162.42524719 112.35750580]
[-177.32054138 114.12685394]
[-192.21582031 115.89620209]
[-205.02047729 126.14183044]
[-220.19525146 119.92426300]
[-222.12963867 103.63960266]
[-208.83370972 94.04010773]
[-193.98516846 101.00092316]
[-179.08988953 99.23157501]
[-164.19461060 97.46221924]
[-149.29931641 95.69287109]
[-134.40403748 93.92352295]
[-119.50875854 92.15416718]
[-116.08480835 82.95700836]
[-109.41814423 75.67517090]
[-100.45188904 71.40422821]
[-90.47929382 70.80913544]
[-80.95726013 74.02107239]
[-73.29347992 80.61182404]
[-68.63835907 89.65030670]
[-53.64049530 89.90364838]
[-38.64263535 90.15699768]
[-23.64477539 90.41033936]
[-8.64691448 90.66368103]
[6.35094595 90.91702271]
[21.34880638 91.17036438]
[36.34666824 91.42370605]
[51.34452820 91.67704773]
[66.34238434 91.93038940]
[81.34024811 92.18373108]
[96.78426361 75.43817902]
[123.20938110 82.09667206]
[134.75415039 72.51969910]
[146.29891968 62.94273376]
[157.84368896 53.36576843]
[162.57650757 45.30630875]
[169.94393921 43.66828156]
[181.80557251 34.48669052]
[179.07196045 19.42727852]
[183.66099548 4.82593012]
[194.51815796 -5.96206808]
[209.14852905 -10.45771313]
[224.19017029 -7.62793875]
[236.18661499 1.87699282]
[242.38117981 15.87291813]
[241.35038757 31.14367676]
[233.33113098 44.18016052]
[220.16613770 51.98667908]
[204.88066101 52.76935196]
[190.98716736 46.34832764]
[179.12553406 55.52991867]
[167.42065430 64.91053772]
[155.87588501 74.48750305]
[144.33111572 84.06446838]
[132.78634644 93.64144135]
[146.85862732 88.44806671]
[160.18424988 95.33483124]
[164.08753967 109.81807709]
[156.02720642 122.46841431]
[141.25099182 125.04979706]
[129.37922668 115.88197327]
[137.52755737 128.47581482]
[145.67587280 141.06965637]
[153.82420349 153.66349792]
[161.97253418 166.25733948]
[170.12084961 178.85116577]
[184.95852661 185.83514404]
[186.05924988 202.19729614]
[172.29069519 211.10568237]
[157.81677246 203.39608765]
[157.52702332 186.99949646]
[149.37869263 174.40565491]
[141.23036194 161.81181335]
[133.08204651 149.21798706]
[124.93371582 136.62414551]
[116.78538513 124.03030396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[48 71]
[49 70]
[50 69]
[51 68]
[53 67]
[54 66]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
