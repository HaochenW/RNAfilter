%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGUUCGAGAGAACUCCCUAGUACCCGCCCCAGUGCUCCGGUAGAUUUCCCAUAAACGUUCGCUUAUG\
) } def
/len { sequence length } bind def

/coor [
[78.77851868 110.35858154]
[63.90684891 112.31646729]
[49.03517532 114.27436066]
[34.16350174 116.23225403]
[19.29183006 118.19014740]
[4.42015743 120.14804077]
[-10.45151520 122.10593414]
[-17.91728592 135.58067322]
[-31.72447968 142.00054932]
[-46.48976898 139.09362793]
[-56.59116745 128.18032837]
[-71.46283722 130.13822937]
[-78.74832153 143.83863831]
[-92.71002960 150.60993958]
[-107.97939301 147.84840393]
[-118.68504333 136.61592102]
[-120.71042633 121.23159027]
[-113.27674866 107.61101532]
[-99.24240875 100.99158478]
[-84.00389862 103.91859436]
[-73.42073059 115.26655579]
[-58.54906082 113.30866241]
[-51.61642456 100.15280151]
[-38.10661697 93.52339172]
[-23.10830688 96.15095520]
[-12.40940857 107.23426056]
[2.46226430 105.27636719]
[17.33393669 103.31847382]
[32.20560837 101.36058044]
[47.07728195 99.40268707]
[61.94895554 97.44480133]
[76.82062531 95.48690796]
[79.32786560 85.71001434]
[85.99491882 77.33100128]
[96.04601288 72.11681366]
[107.96403503 71.41055298]
[119.71668243 75.82757568]
[126.64291382 62.52241516]
[133.56913757 49.21725464]
[132.31364441 32.86623764]
[145.99728394 23.82797623]
[160.54350281 31.40026093]
[160.98840332 47.79337311]
[146.87429810 56.14348221]
[139.94807434 69.44864655]
[133.02185059 82.75380707]
[142.23527527 70.91688538]
[156.76658630 67.19654846]
[170.53466797 73.14969635]
[177.77780151 86.28503418]
[175.46484375 101.10563660]
[164.56373596 111.40931702]
[149.63641357 112.88416290]
[136.92892456 104.91197968]
[147.98809814 115.04583740]
[159.04725647 125.17968750]
[170.10641479 135.31353760]
[181.16557312 145.44738770]
[196.34371948 142.22193909]
[210.50523376 148.56472778]
[218.20474243 162.03681946]
[216.48161316 177.45791626]
[205.99842834 188.89831543]
[190.78619385 191.95892334]
[176.69430542 185.46287537]
[169.14140320 171.90806580]
[171.03172302 156.50656128]
[159.97256470 146.37269592]
[148.91339111 136.23884583]
[137.85423279 126.10499573]
[126.79507446 115.97114563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[11 22]
[12 21]
[37 46]
[38 45]
[39 44]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
