%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCUGACCGACCUUCGUUAGUGGGCAAGUAUUACCCUCGACGGGCAAUUUGUGCGACUGAGCGUCGCACG\
) } def
/len { sequence length } bind def

/coor [
[63.53632355 120.10410309]
[49.31090164 124.86197662]
[35.08547592 129.61984253]
[20.86005402 134.37771606]
[6.63463020 139.13557434]
[-7.37292862 144.50105286]
[-21.13668251 150.46420288]
[-34.90043640 156.42733765]
[-48.66419220 162.39048767]
[-51.91105652 177.56405640]
[-63.47909927 187.90620422]
[-78.92016602 189.44015503]
[-92.29685974 181.57608032]
[-98.46556091 167.33786011]
[-95.05428314 152.20040894]
[-83.37472534 141.98435974]
[-67.91793060 140.61799622]
[-54.62733459 148.62672424]
[-40.86357880 142.66358948]
[-27.09982491 136.70043945]
[-13.33607101 130.73730469]
[-10.69563293 126.41944885]
[-5.16780663 123.89309692]
[1.87676060 124.91015625]
[16.10218430 120.15229034]
[30.32760811 115.39441681]
[44.55303192 110.63655090]
[58.77845383 105.87867737]
[58.56188965 95.91864014]
[60.71743011 86.19223785]
[65.12168884 77.25625610]
[71.52253723 69.62223053]
[79.55357361 63.72716904]
[88.75505829 59.90853119]
[98.60025024 58.38491440]
[108.52557373 59.24353790]
[114.19119263 45.35466766]
[119.85681152 31.46579361]
[114.98822784 16.17931557]
[124.02359009 2.92255354]
[140.03175354 1.86496043]
[150.73260498 13.81783199]
[147.91738892 29.61194801]
[133.74568176 37.13141251]
[128.08006287 51.02028656]
[122.41444397 64.90915680]
[129.13214111 70.24948883]
[134.61238098 76.85354614]
[138.62236023 84.44081879]
[140.99176025 92.68900299]
[141.61991882 101.24773407]
[140.48017883 109.75347137]
[137.62092590 117.84490204]
[149.79400635 126.60937500]
[161.96710205 135.37385559]
[174.14018250 144.13832092]
[186.31326294 152.90280151]
[198.48635864 161.66726685]
[210.65943909 170.43174744]
[226.66134644 169.28344727]
[237.42976379 181.17549133]
[234.70410156 196.98530579]
[220.57524109 204.58496094]
[205.88163757 198.14465332]
[201.89497375 182.60482788]
[189.72187805 173.84034729]
[177.54879761 165.07588196]
[165.37571716 156.31140137]
[153.20262146 147.54693604]
[141.02954102 138.78247070]
[128.85644531 130.01799011]
[106.42026520 141.14067078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 21]
[7 20]
[8 19]
[9 18]
[36 46]
[37 45]
[38 44]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
