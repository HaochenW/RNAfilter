%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUAAGGCGCCAGCCGGCUGGCGUGUCUUAUAGAAUAGGGAAUUCACUUAGUAGAUCGGAUAUUGGUUCCGU\
) } def
/len { sequence length } bind def

/coor [
[79.23015594 107.93671417]
[64.23344421 108.25084686]
[49.23673248 108.56498718]
[34.24002457 108.87911987]
[19.24331284 109.19326019]
[4.24660301 109.50739288]
[-10.75010777 109.82152557]
[-25.74681664 110.13566589]
[-40.71722031 111.07752228]
[-55.63504791 112.64544678]
[-70.55287170 114.21337891]
[-85.47070312 115.78130341]
[-100.38853455 117.34922791]
[-115.30635834 118.91716003]
[-130.22418213 120.48508453]
[-143.16610718 130.55676270]
[-158.25549316 124.13471985]
[-159.96966553 107.82540894]
[-146.54524231 98.40644836]
[-131.79211426 105.56725311]
[-116.87429047 103.99932861]
[-101.95645905 102.43140411]
[-87.03862762 100.86347198]
[-72.12080383 99.29554749]
[-57.20297241 97.72762299]
[-42.28514481 96.15969849]
[-38.47959137 92.84107208]
[-32.46583176 92.08296204]
[-26.06095314 95.13895416]
[-11.06424332 94.82482147]
[3.93246675 94.51068115]
[18.92917633 94.19654846]
[33.92588806 93.88240814]
[48.92259598 93.56827545]
[63.91930771 93.25413513]
[78.91601562 92.94000244]
[93.58358002 74.44865417]
[120.88397980 77.83358765]
[129.70075989 65.69832611]
[138.51753235 53.56307220]
[147.33432007 41.42781830]
[143.37593079 26.29952621]
[150.11460876 12.18838501]
[164.36854553 5.75724506]
[179.40745544 10.04269505]
[188.13043213 23.02127457]
[186.41876221 38.56489944]
[175.08064270 49.33433914]
[159.46957397 50.24459839]
[150.65278625 62.37985229]
[141.83601379 74.51510620]
[133.01924133 86.65036011]
[144.52076721 77.02151489]
[159.50996399 77.59091949]
[170.24784851 88.06459045]
[171.19044495 103.03495026]
[161.85107422 114.77275848]
[147.05168152 117.21777344]
[134.43202209 109.10596466]
[144.70022583 120.04049683]
[154.96842957 130.97502136]
[165.23663330 141.90954590]
[180.83869934 140.85604858]
[193.43719482 150.11952209]
[197.08349609 165.32604980]
[190.05593872 179.29557800]
[175.67272949 185.43209839]
[160.72515869 180.83816528]
[152.27102661 167.68287659]
[154.30210876 152.17776489]
[144.03390503 141.24322510]
[133.76570129 130.30870056]
[123.49748993 119.37416840]
[105.11409760 127.23876190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[38 52]
[39 51]
[40 50]
[41 49]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
