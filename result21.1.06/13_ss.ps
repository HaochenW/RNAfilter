%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGUGACCCCGCCGAGUAAUACUUUACUCGGCUACUGGGGUCACUUAGCCCAAUCUUGAAAAUUUAUUUAAGAAAUAAAGCUAAUAAGCUC\
) } def
/len { sequence length } bind def

/coor [
[63.34047318 102.63729095]
[48.47431183 100.63799286]
[33.60815048 98.63868713]
[18.74198723 96.63938141]
[3.87582517 94.64007568]
[-10.99033737 92.64076996]
[-25.85649872 90.64147186]
[-40.72266006 88.64216614]
[-55.58882523 86.64286041]
[-70.45498657 84.64355469]
[-85.32115173 82.64424896]
[-100.18730927 80.64495087]
[-115.15381622 79.64305878]
[-130.15380859 79.64305878]
[-145.15380859 79.64305878]
[-160.15380859 79.64305878]
[-175.15380859 79.64305878]
[-190.15380859 79.64305878]
[-205.15380859 79.64305878]
[-220.15380859 79.64305878]
[-235.15380859 79.64305878]
[-249.07762146 88.30676270]
[-263.41305542 80.34262848]
[-263.41305542 63.94348526]
[-249.07762146 55.97935486]
[-235.15380859 64.64305878]
[-220.15380859 64.64305878]
[-205.15380859 64.64305878]
[-190.15380859 64.64305878]
[-175.15380859 64.64305878]
[-160.15380859 64.64305878]
[-145.15380859 64.64305878]
[-130.15380859 64.64305878]
[-115.15381622 64.64305878]
[-113.02170563 62.53421402]
[-109.84199524 61.23485184]
[-105.95575714 61.18258286]
[-101.86845398 62.66819763]
[-98.18800354 65.77878571]
[-83.32184601 67.77809143]
[-68.45568085 69.77739716]
[-53.58951950 71.77669525]
[-38.72335815 73.77600098]
[-23.85719490 75.77530670]
[-8.99103260 77.77461243]
[5.87512922 79.77391815]
[20.74129105 81.77321625]
[35.60745239 83.77252197]
[50.47361755 85.77182770]
[65.33977509 87.77113342]
[72.27848816 75.86715698]
[83.11314392 67.35478210]
[96.32105255 63.43032074]
[110.04599762 64.64530945]
[122.35909271 70.82900238]
[131.52987671 81.11235046]
[145.69990540 76.19197845]
[159.86994934 71.27159882]
[174.03997803 66.35122681]
[188.21002197 61.43085480]
[202.38005066 56.51048279]
[216.55009460 51.59011078]
[223.21485901 37.25985336]
[238.08905029 31.91809654]
[252.34803772 38.73400879]
[257.53222656 53.66383362]
[250.56594849 67.84996796]
[235.58215332 72.87602997]
[221.47045898 65.76014709]
[207.30043030 70.68051910]
[193.13038635 75.60089111]
[178.96035767 80.52126312]
[164.79031372 85.44163513]
[150.62028503 90.36201477]
[136.45024109 95.28238678]
[136.72946167 101.34994507]
[136.00558472 107.38064575]
[134.29837036 113.20977020]
[131.65444946 118.67813110]
[128.14601135 123.63637543]
[123.86889648 127.94909668]
[131.07762146 141.10334778]
[138.28634644 154.25759888]
[145.49507141 167.41184998]
[159.78424072 175.45870972]
[159.68943787 191.85757446]
[145.30821228 199.73870850]
[131.43472290 190.99465942]
[132.34082031 174.62057495]
[125.13209534 161.46632385]
[117.92337036 148.31207275]
[110.71464539 135.15782166]
[89.05242157 135.08598328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
