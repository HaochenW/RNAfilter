%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAGAGUGUUCCAACUCCACUGGAGUUGCAGCCACUCUUAUGCGGCCUGGUAAUCCAGCAUAUUGACCCUGGAGAGGGAUCCG\
) } def
/len { sequence length } bind def

/coor [
[67.92301941 105.17233276]
[52.96303940 104.07740021]
[38.00305557 102.98246765]
[23.04306984 101.88754272]
[8.08308506 100.79261017]
[-6.87689877 99.69767761]
[-21.83688354 98.60275269]
[-36.79686737 97.50782013]
[-51.75685120 96.41289520]
[-66.71683502 95.31796265]
[-81.69432068 94.49644470]
[-96.68431854 93.94861603]
[-110.75786591 101.17674255]
[-123.19406128 92.97978210]
[-138.18405151 92.43194580]
[-153.17404175 91.88411713]
[-168.16404724 91.33628845]
[-183.15403748 90.78845978]
[-198.14402771 90.24062347]
[-213.13401794 89.69279480]
[-229.18341064 95.15662384]
[-238.87661743 81.24698639]
[-228.19392395 68.08202362]
[-212.58618164 74.70280457]
[-197.59619141 75.25063324]
[-182.60620117 75.79846191]
[-167.61621094 76.34629822]
[-152.62622070 76.89412689]
[-137.63623047 77.44195557]
[-122.64623260 77.98978424]
[-109.64486694 70.72247314]
[-96.13648224 78.95861816]
[-81.14649200 79.50645447]
[-74.18412781 76.53402710]
[-65.62190247 80.35797882]
[-50.66192245 81.45290375]
[-35.70193863 82.54783630]
[-20.74195290 83.64276886]
[-5.78196907 84.73769379]
[9.17801476 85.83262634]
[24.13799858 86.92755890]
[39.09798431 88.02248383]
[54.05796814 89.11741638]
[69.01795197 90.21234131]
[80.26024628 74.19248962]
[98.66453552 67.53614044]
[117.55335999 72.65836334]
[128.35191345 62.24725342]
[132.48716736 53.83096313]
[139.74014282 51.66207123]
[150.91172791 41.65229034]
[162.08331299 31.64250755]
[166.67192078 15.89840794]
[182.66316223 12.26356411]
[193.60662842 24.47719193]
[188.24461365 39.97496033]
[172.09309387 42.81409073]
[160.92150879 52.82387161]
[149.74992371 62.83365631]
[138.76303101 73.04580688]
[127.96447754 83.45691681]
[130.45252991 88.67178345]
[131.97755432 94.24488831]
[132.49131775 100.00000000]
[131.97755432 105.75511169]
[130.45252991 111.32821655]
[127.96447754 116.54308319]
[138.76303101 126.95419312]
[149.74992371 137.16635132]
[160.92150879 147.17613220]
[172.09309387 157.18591309]
[183.26467896 167.19569397]
[199.41618347 170.03482056]
[204.77821350 185.53259277]
[193.83474731 197.74621582]
[177.84350586 194.11137390]
[173.25489807 178.36727905]
[162.08331299 168.35749817]
[150.91172791 158.34771729]
[139.74014282 148.33792114]
[132.48716736 146.16903687]
[128.35191345 137.75274658]
[117.55335999 127.34163666]
[102.44484711 132.39920044]
[86.74845886 129.66618347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 33]
[12 32]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[47 61]
[48 60]
[50 59]
[51 58]
[52 57]
[67 83]
[68 82]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
