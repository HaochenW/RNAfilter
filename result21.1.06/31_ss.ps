%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGCGCCAACACUCGUUGGAUUCGUCAAUUUCCGCUGCCAGUACCUGCUACAAAUCAAUAUUUGGGACAAAUCGUCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[81.09204865 114.02953339]
[66.82619476 118.66478729]
[52.56034851 123.30004120]
[38.29450226 127.93529510]
[24.02865410 132.57055664]
[9.76280594 137.20581055]
[-4.50304127 141.84106445]
[-18.76888847 146.47631836]
[-32.75597382 151.89494324]
[-46.42131042 158.08029175]
[-60.08665085 164.26562500]
[-73.75199127 170.45097351]
[-87.41732788 176.63632202]
[-96.52970123 190.27072144]
[-112.87366486 188.92652893]
[-119.63595581 173.98652649]
[-109.86010742 160.81971741]
[-93.60267639 162.97097778]
[-79.93733978 156.78564453]
[-66.27199554 150.60029602]
[-52.60665894 144.41494751]
[-38.94131851 138.22959900]
[-37.36104202 134.82023621]
[-33.91417694 132.09617615]
[-28.98824883 130.99244690]
[-23.40414429 132.21046448]
[-9.13829613 127.57521820]
[5.12755156 122.93996429]
[19.39339828 118.30470276]
[33.65924835 113.66944885]
[47.92509460 109.03419495]
[62.19094086 104.39894104]
[76.45678711 99.76368713]
[78.53861237 87.06546783]
[87.35340118 76.63139343]
[101.01956177 71.93391418]
[115.93881989 75.06016541]
[117.59860992 60.15227890]
[104.88093567 51.63645172]
[97.58768463 38.18033218]
[97.39479828 22.87603951]
[104.34660339 9.24038696]
[116.84561920 0.40674716]
[132.01966858 -1.59497368]
[146.38186646 3.69520521]
[156.63186646 15.06163979]
[160.41432190 29.89240646]
[156.86004639 44.77950287]
[146.78576660 56.30198288]
[132.50650024 61.81206894]
[130.84671021 76.71995544]
[133.20465088 61.90644455]
[141.20880127 49.22048950]
[153.56407166 40.71475601]
[168.27127075 37.76551819]
[182.95071411 40.84998322]
[195.22717285 49.46906662]
[203.11424255 62.22814560]
[205.33575439 77.06272888]
[201.53224182 91.57249451]
[192.31913757 103.40967560]
[179.18719482 110.65895081]
[164.26121521 112.14733887]
[149.95632935 107.63401031]
[138.58555603 97.84719086]
[149.48205566 108.15574646]
[160.37857056 118.46429443]
[171.27507019 128.77284241]
[182.17156982 139.08139038]
[193.06806946 149.38993835]
[203.96458435 159.69850159]
[219.97677612 160.69294739]
[229.06436157 173.91397095]
[224.25608826 189.21952820]
[209.24047852 194.86851501]
[195.53620911 186.52749634]
[193.65603638 170.59500122]
[182.75952148 160.28645325]
[171.86302185 149.97790527]
[160.96652222 139.66934204]
[150.07000732 129.36079407]
[139.17350769 119.05224609]
[128.27700806 108.74369812]
[114.09604645 123.70580292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[37 51]
[38 50]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
