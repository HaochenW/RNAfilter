%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUAGCAAAUUGCAUUUGUCAGAACAAAUGAACUUAUUUGCUAACUGUCCCCCUAUUGUCUUGUACAGUGUCACCCGACGCCUGAGGCGUCGGU\
) } def
/len { sequence length } bind def

/coor [
[62.18830109 107.50000000]
[47.18830109 107.50000000]
[32.18830109 107.50000000]
[17.18829918 107.50000000]
[2.18830013 107.50000000]
[-12.81169987 107.50000000]
[-27.81170082 107.50000000]
[-42.81169891 107.50000000]
[-57.81169891 107.50000000]
[-72.81169891 107.50000000]
[-87.81169891 107.50000000]
[-100.96208954 122.44000244]
[-120.55360413 123.19682312]
[-134.39147949 109.73004913]
[-149.31925964 111.20030975]
[-164.24702454 112.67056274]
[-179.17478943 114.14082336]
[-194.10256958 115.61107635]
[-209.03033447 117.08133698]
[-223.95811462 118.55158997]
[-236.96566772 128.53834534]
[-252.01269531 122.01768494]
[-253.62010193 105.69750977]
[-240.13430786 96.36660767]
[-225.42835999 103.62382507]
[-210.50059509 102.15356445]
[-195.57283020 100.68331146]
[-180.64505005 99.21305084]
[-165.71728516 97.74279785]
[-150.78950500 96.27253723]
[-135.86174011 94.80227661]
[-131.56849670 85.11180115]
[-123.50923157 78.10271454]
[-113.15950012 75.15026855]
[-102.45362091 76.87842560]
[-93.42322540 83.02951813]
[-87.81169891 92.50000000]
[-72.81169891 92.50000000]
[-57.81169891 92.50000000]
[-42.81169891 92.50000000]
[-27.81170082 92.50000000]
[-12.81169987 92.50000000]
[2.18830013 92.50000000]
[17.18829918 92.50000000]
[32.18830109 92.50000000]
[47.18830109 92.50000000]
[62.18830109 92.50000000]
[65.56066895 82.68216705]
[71.43058014 74.12022400]
[79.37233734 67.43508148]
[88.81000519 63.11153793]
[99.05917358 61.46314240]
[109.37657166 62.60943222]
[119.01398468 66.46728516]
[127.27249908 72.75691986]
[139.74455261 64.42337036]
[152.21659851 56.08981705]
[164.68862915 47.75626373]
[177.16067505 39.42271042]
[189.63272095 31.08915520]
[194.16021729 15.69820404]
[209.06997681 9.77550793]
[222.92453003 17.86445236]
[225.09584045 33.75989151]
[213.91825867 45.26820374]
[197.96627808 43.56119919]
[185.49423218 51.89475250]
[173.02218628 60.22830582]
[160.55014038 68.56185913]
[148.07809448 76.89541626]
[135.60604858 85.22896576]
[137.90057373 92.96284485]
[138.53524780 101.00492096]
[137.48226929 109.00297546]
[134.78779602 116.60675812]
[130.56977844 123.48324585]
[140.45997620 134.76084900]
[150.35015869 146.03843689]
[160.24034119 157.31604004]
[170.13053894 168.59364319]
[180.02072144 179.87123108]
[189.91090393 191.14883423]
[199.80110168 202.42642212]
[214.79043579 210.34828186]
[211.32763672 226.94483948]
[194.42108154 228.21173096]
[188.52349854 212.31661987]
[178.63331604 201.03901672]
[168.74311829 189.76141357]
[158.85293579 178.48382568]
[148.96275330 167.20622253]
[139.07255554 155.92863464]
[129.18237305 144.65103149]
[119.29219055 133.37342834]
[95.81025696 138.31997681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
