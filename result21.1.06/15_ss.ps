%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUGCGCUGCAUUUUGCAAAUAGAUGCGCAUCAGAAGCGACCUCGCCCGGACAACAUUCCAUGCAUUUGAGUUUGCAUGGC\
) } def
/len { sequence length } bind def

/coor [
[79.84978485 112.79289246]
[65.30147552 116.44619751]
[50.75316620 120.09950256]
[36.20485306 123.75280762]
[21.65654373 127.40612030]
[7.10823298 131.05943298]
[-7.44007730 134.71273804]
[-21.98838806 138.36604309]
[-35.92665863 143.90901184]
[-49.01063156 151.24452209]
[-62.09460068 158.58003235]
[-75.17857361 165.91554260]
[-86.03762054 178.93542480]
[-101.55477142 172.10501099]
[-99.28686523 155.30343628]
[-82.51408386 152.83157349]
[-69.43011475 145.49606323]
[-56.34614182 138.16055298]
[-43.26216888 130.82504272]
[-57.11682892 125.07627869]
[-64.31348419 111.91542053]
[-61.67703247 97.14893341]
[-50.37064743 87.29166412]
[-35.38261795 86.69256592]
[-23.32552910 95.61593628]
[-19.51887131 110.12487793]
[-25.64169502 123.81773376]
[-11.09338474 120.16442108]
[3.45492578 116.51111603]
[18.00323677 112.85781097]
[32.55154800 109.20449829]
[47.09985733 105.55119324]
[61.64817047 101.89788818]
[76.19647980 98.24457550]
[78.51248932 86.33644104]
[86.75159454 76.40561676]
[99.45959473 71.34996033]
[113.80563354 73.08319092]
[114.94006348 58.12614822]
[116.07449341 43.16910553]
[108.48864746 28.62995529]
[117.51413727 14.93789387]
[133.86631775 16.17814064]
[140.72346497 31.07483673]
[131.03153992 44.30353546]
[129.89710999 59.26057816]
[128.76268005 74.21762085]
[130.39634705 59.30684662]
[138.13407898 46.45665741]
[150.54852295 38.03752899]
[165.34956360 35.60253143]
[179.80685425 39.60084915]
[191.25347900 49.29491806]
[197.57785034 62.89646912]
[197.61334229 77.89643097]
[191.35339355 91.52774811]
[179.95277405 101.27587128]
[165.51455688 105.34255219]
[150.70216370 102.97761536]
[138.25013733 94.61952972]
[150.41867065 103.39031219]
[162.58721924 112.16109467]
[174.75575256 120.93187714]
[186.92430115 129.70266724]
[199.09283447 138.47344971]
[211.26138306 147.24423218]
[225.95808411 142.26562500]
[240.76428223 146.90850830]
[249.98667908 159.38757324]
[250.07907104 174.90437317]
[241.00595093 187.49238586]
[226.25608826 192.31124878]
[211.50114441 187.50804138]
[202.41465759 174.92965698]
[202.49060059 159.41276550]
[190.32205200 150.64198303]
[178.15351868 141.87120056]
[165.98497009 133.10041809]
[153.81643677 124.32963562]
[141.64788818 115.55885315]
[129.47935486 106.78807068]
[114.96905518 123.80849457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 19]
[10 18]
[11 17]
[12 16]
[38 47]
[39 46]
[40 45]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
