%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUACCGGCUGCCUCGAUCGAGGAAAAGCCGGUAAGCUCAAAACUGAUUUCAGAUCAUGUGUCUAUUCAAGAGAAGUAAUCUUGAU\
) } def
/len { sequence length } bind def

/coor [
[65.25963593 111.87160492]
[50.37396240 113.72007751]
[35.48829651 115.56855011]
[20.60262680 117.41703033]
[5.71695757 119.26550293]
[-9.16871071 121.11398315]
[-24.05438042 122.96245575]
[-38.94004822 124.81093597]
[-53.82571793 126.65940857]
[-68.71138763 128.50788879]
[-83.59705353 130.35635376]
[-98.48272705 132.20483398]
[-113.74176788 145.14584351]
[-131.31430054 137.40476990]
[-146.03250122 140.29866028]
[-160.75070190 143.19255066]
[-175.46890259 146.08644104]
[-187.45967102 157.27365112]
[-203.06228638 152.22482300]
[-206.22610474 136.13375854]
[-193.69647217 125.55356598]
[-178.36279297 131.36824036]
[-163.64459229 128.47434998]
[-148.92639160 125.58045959]
[-134.20820618 122.68656921]
[-129.13392639 113.50531006]
[-119.58972168 108.64043427]
[-108.73749542 109.98292542]
[-100.33119965 117.31916809]
[-85.44553375 115.47069550]
[-70.55986023 113.62221527]
[-55.67419434 111.77374268]
[-40.78852463 109.92526245]
[-25.90285492 108.07678986]
[-11.01718712 106.22830963]
[3.86848187 104.37983704]
[18.75415039 102.53135681]
[33.63982010 100.68288422]
[48.52548981 98.83441162]
[63.41115570 96.98593140]
[67.19917297 83.50958252]
[75.75611877 72.43077850]
[87.83788300 65.36026764]
[101.68790436 63.32604599]
[115.29251862 66.62385559]
[124.19474792 54.55114746]
[132.88252258 42.32320786]
[141.35314941 29.94384766]
[149.82377625 17.56448746]
[158.29438782 5.18512630]
[166.76501465 -7.19423437]
[170.71951294 -23.68054008]
[187.65623474 -24.44444847]
[193.07884216 -8.38108540]
[179.14437866 1.27638674]
[170.67375183 13.65574741]
[162.20312500 26.03510857]
[153.73251343 38.41447067]
[145.26188660 50.79383087]
[144.05679321 58.25718689]
[136.26745605 63.45338058]
[127.36522675 75.52608490]
[131.46295166 81.08146667]
[134.44827271 87.30573273]
[136.21565247 93.97880554]
[136.70259094 100.86476898]
[135.89187622 107.72016144]
[133.81217957 114.30259705]
[130.53703308 120.37934875]
[141.04962158 131.07913208]
[151.56221008 141.77893066]
[162.07479858 152.47871399]
[172.58738708 163.17849731]
[183.09997559 173.87828064]
[198.67425537 172.47261047]
[211.47879028 181.44912720]
[215.46766663 196.56941223]
[208.75747681 210.69412231]
[194.51654053 217.15399170]
[179.46900940 212.89888000]
[170.71987915 199.93791199]
[172.40019226 184.39086914]
[161.88760376 173.69108582]
[151.37501526 162.99130249]
[140.86242676 152.29151917]
[130.34983826 141.59172058]
[119.83724213 130.89193726]
[98.77841949 136.69244385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[14 25]
[15 24]
[16 23]
[17 22]
[45 62]
[46 61]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
