%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCAUCUCGUUUCCUGUUUCCAGGAAACGCGGUAGAUGAUGCCCUAAUCUAUACGUGAUAUUUCUGCUAGUGCUGGCACUAA\
) } def
/len { sequence length } bind def

/coor [
[59.75880432 101.65850830]
[44.91865158 99.47449493]
[30.07850075 97.29047394]
[15.23835087 95.10645294]
[0.39820054 92.92243958]
[-14.44194984 90.73841858]
[-29.28210068 88.55440521]
[-44.12224960 86.37038422]
[-58.96240234 84.18637085]
[-73.80255127 82.00234985]
[-88.76253510 80.90742493]
[-103.76253510 80.90742493]
[-118.76253510 80.90742493]
[-133.76254272 80.90742493]
[-148.76254272 80.90742493]
[-163.76254272 80.90742493]
[-178.76254272 80.90742493]
[-193.76254272 80.90742493]
[-208.76254272 80.90742493]
[-222.68634033 89.57112122]
[-237.02177429 81.60699463]
[-237.02177429 65.20784760]
[-222.68634033 57.24371719]
[-208.76254272 65.90742493]
[-193.76254272 65.90742493]
[-178.76254272 65.90742493]
[-163.76254272 65.90742493]
[-148.76254272 65.90742493]
[-133.76254272 65.90742493]
[-118.76253510 65.90742493]
[-103.76253510 65.90742493]
[-88.76253510 65.90742493]
[-86.62266541 63.75866318]
[-83.40296936 62.43669128]
[-79.45854187 62.39851379]
[-75.31836700 63.94544983]
[-71.61853790 67.16220093]
[-56.77838516 69.34622192]
[-41.93823242 71.53023529]
[-27.09808350 73.71425629]
[-12.25793266 75.89826965]
[2.58221817 78.08229065]
[17.42236900 80.26630402]
[32.26251984 82.45032501]
[47.10266876 84.63433838]
[61.94282150 86.81835938]
[72.92008209 70.18754578]
[90.52639008 60.85469055]
[110.45179749 61.10443878]
[127.81864929 70.87565613]
[140.01799011 62.14777374]
[152.21734619 53.41989136]
[153.24162292 37.81588745]
[164.09361267 26.55674362]
[179.64933777 24.95867920]
[192.56384277 33.77625275]
[196.73930359 48.84607315]
[190.20419312 63.05263519]
[176.04418945 69.68803406]
[160.94522095 65.61923218]
[148.74588013 74.34712219]
[136.54653931 83.07500458]
[138.80686951 89.22357178]
[140.04054260 95.65723419]
[140.21490479 102.20579529]
[139.32536316 108.69599152]
[137.39543152 114.95613861]
[134.47618103 120.82060242]
[145.64776611 130.83038330]
[156.81935120 140.84016418]
[167.99093628 150.84994507]
[179.16250610 160.85972595]
[195.31402588 163.69886780]
[200.67604065 179.19662476]
[189.73258972 191.41026306]
[173.74134827 187.77542114]
[169.15272522 172.03131104]
[157.98115540 162.02153015]
[146.80957031 152.01174927]
[135.63798523 142.00196838]
[124.46640015 131.99218750]
[111.48340607 138.60357666]
[96.99768829 140.16329956]
[82.90485382 136.46725464]
[71.04909515 127.99909973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[50 62]
[51 61]
[52 60]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
