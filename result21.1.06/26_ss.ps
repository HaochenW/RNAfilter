%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCUAAAACUAAAAGUCCUAUGACUUUUAGAGUUAUUUAGAUAAAAAUGUCGUGGUCAAUCCAGUCGGAUCUACUUCUGCAAAUUACUGCAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[58.51477432 110.82173920]
[43.56195068 112.01049042]
[28.60913086 113.19924164]
[13.65630817 114.38798523]
[-1.29651332 115.57673645]
[-16.24933434 116.76548767]
[-31.20215607 117.95423889]
[-46.15497971 119.14298248]
[-61.10779953 120.33173370]
[-78.22914124 134.62942505]
[-97.77545929 125.50904846]
[-112.45749664 128.58114624]
[-127.13953400 131.65324402]
[-141.82156372 134.72534180]
[-156.50360107 137.79743958]
[-171.18563843 140.86955261]
[-185.86767578 143.94165039]
[-200.54971313 147.01374817]
[-215.23175049 150.08584595]
[-227.08602905 161.41758728]
[-242.74868774 156.55827332]
[-246.10734558 140.50674438]
[-233.70689392 129.77543640]
[-218.30384827 135.40380859]
[-203.62181091 132.33171082]
[-188.93978882 129.25961304]
[-174.25775146 126.18750763]
[-159.57571411 123.11540985]
[-144.89367676 120.04331207]
[-130.21163940 116.97120667]
[-115.52959442 113.89910889]
[-100.84756470 110.82701111]
[-97.88705444 103.09193420]
[-91.96369934 97.16750336]
[-84.05102539 94.13732910]
[-75.49511719 94.60007477]
[-67.78564453 98.55298615]
[-62.29655075 105.37891388]
[-47.34372711 104.19016266]
[-32.39090729 103.00141144]
[-17.43808365 101.81266785]
[-2.48526263 100.62391663]
[12.46755886 99.43516541]
[27.42038155 98.24641418]
[42.37320328 97.05767059]
[57.32602310 95.86891937]
[58.51288986 89.18547821]
[60.73972702 82.77313232]
[63.95070648 76.79261780]
[68.06534576 71.39384460]
[72.98049927 66.71215057]
[78.57295990 62.86489487]
[84.70253754 59.94851303]
[91.21557617 58.03610992]
[97.94882202 57.17562866]
[104.73348236 57.38863754]
[111.39948273 58.66979599]
[117.77973938 60.98698807]
[123.71429443 64.28212738]
[129.05441284 68.47262573]
[133.66619873 73.45342255]
[146.88800049 66.36935425]
[160.10980225 59.28528595]
[173.33160400 52.20122147]
[181.51316833 37.98876190]
[197.91041565 38.23855972]
[205.65525818 52.69364166]
[196.78047180 66.48386383]
[180.41566467 65.42301941]
[167.19386292 72.50708771]
[153.97206116 79.59115601]
[140.75027466 86.67521667]
[142.71275330 96.29120636]
[142.43707275 106.10153198]
[139.93769836 115.59213257]
[135.34556580 124.26570892]
[146.03598022 134.78782654]
[156.72639465 145.30995178]
[167.41680908 155.83207703]
[178.10722351 166.35420227]
[188.79763794 176.87632751]
[199.48805237 187.39845276]
[210.17845154 197.92057800]
[225.97827148 197.54458618]
[237.35847473 208.51118469]
[237.56739807 224.31410217]
[226.48109436 235.57772827]
[210.67686462 235.61955261]
[199.53106689 224.41477966]
[199.65634155 208.61099243]
[188.96592712 198.08886719]
[178.27551270 187.56674194]
[167.58509827 177.04461670]
[156.89468384 166.52249146]
[146.20426941 156.00036621]
[135.51385498 145.47824097]
[124.82344818 134.95611572]
[98.84772491 142.85797119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[61 72]
[62 71]
[63 70]
[64 69]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
