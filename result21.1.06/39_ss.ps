%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUACAAUAAGGAACCCCGGUUCCUUUCUGAUGUAGAUGAGGUUGACCAUGAGUUCUCCAACUACGCCAUAGCGUAGUG\
) } def
/len { sequence length } bind def

/coor [
[77.96562195 106.66091156]
[62.97662735 106.08637238]
[47.98763657 105.51182556]
[32.99864197 104.93728638]
[18.00965118 104.36274719]
[3.02065754 103.78820801]
[-11.96833515 103.21366119]
[-26.95732880 102.63912201]
[-40.57969666 117.06398773]
[-60.12498474 117.23195648]
[-73.58145142 103.46443939]
[-88.53743744 104.61267853]
[-103.49342346 105.76091766]
[-118.44940948 106.90915680]
[-133.40539551 108.05739594]
[-148.36138916 109.20563507]
[-163.31736755 110.35387421]
[-176.53712463 120.05801392]
[-191.44013977 113.21461487]
[-192.69548035 96.86358643]
[-179.01176453 87.82546234]
[-164.46560669 95.39788818]
[-149.50962830 94.24964905]
[-134.55363464 93.10140991]
[-119.59764862 91.95317078]
[-104.64166260 90.80493164]
[-89.68567657 89.65669250]
[-74.72969055 88.50845337]
[-70.17632294 78.82202911]
[-61.86053848 71.95372009]
[-51.32899094 69.27194214]
[-40.57969666 71.35785675]
[-31.68298531 77.88115692]
[-26.38278770 87.65013123]
[-11.39379406 88.22467041]
[3.59519863 88.79920959]
[18.58419037 89.37375641]
[33.57318497 89.94829559]
[48.56217575 90.52283478]
[63.55117035 91.09737396]
[78.54016113 91.67192078]
[92.21913910 78.33574677]
[111.25735474 79.92131805]
[122.45565033 69.94142914]
[123.51869965 54.40091324]
[135.01753235 44.43941116]
[149.82649231 45.54863358]
[161.02478027 35.56874847]
[172.22308350 25.58886337]
[174.57632446 9.71933937]
[188.52262878 1.78963077]
[203.36357117 7.88273144]
[207.71446228 23.32453537]
[198.23767090 36.26941299]
[182.20297241 36.78716278]
[171.00466919 46.76704788]
[159.80636597 56.74693298]
[159.20993042 71.58538818]
[147.99543762 81.86593628]
[132.43553162 81.13972473]
[121.23723602 91.11961365]
[123.01493073 100.44092560]
[120.88151550 109.68731689]
[131.68933105 120.08879852]
[142.49716187 130.49029541]
[153.30497742 140.89176941]
[164.11280823 151.29325867]
[174.92062378 161.69474792]
[185.72845459 172.09623718]
[201.76855469 175.50907898]
[206.57495117 191.18804932]
[195.20324707 203.00399780]
[179.35166931 198.80166626]
[175.32696533 182.90406799]
[164.51914978 172.50257874]
[153.71131897 162.10108948]
[142.90350342 151.69960022]
[132.09567261 141.29811096]
[121.28784943 130.89662170]
[110.48002625 120.49514008]
[97.45870209 122.87844849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[43 61]
[44 60]
[47 57]
[48 56]
[49 55]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
