%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGACUAGGAUGGAGUAGAGACUCUGUAGUCCUAGUCGAACGUCCUUCAAGAUAUGGACUACCGCUAGAACUGUUUUCUUCUA\
) } def
/len { sequence length } bind def

/coor [
[79.74127197 109.03921509]
[64.78321838 110.16016388]
[49.82516098 111.28111267]
[34.86710358 112.40206909]
[19.90904617 113.52301788]
[4.95098877 114.64396667]
[-10.00706863 115.76492310]
[-24.96512604 116.88587189]
[-39.92318344 118.00682068]
[-54.88124084 119.12777710]
[-69.83929443 120.24872589]
[-84.71096802 122.20661926]
[-99.44946289 124.99529266]
[-114.18796539 127.78396606]
[-128.92646790 130.57264709]
[-143.66496277 133.36131287]
[-155.73533630 144.46257019]
[-171.30148315 139.30241394]
[-174.35026550 123.18916321]
[-161.74537659 112.69875336]
[-146.45362854 118.62281799]
[-131.71513367 115.83414459]
[-116.97663879 113.04547119]
[-102.23814392 110.25679779]
[-87.49964142 107.46812439]
[-85.15889740 104.52236176]
[-81.16082001 102.68553162]
[-76.10527802 102.77848053]
[-70.96025085 105.29067230]
[-56.00218964 104.16971588]
[-41.04413223 103.04876709]
[-26.08607674 101.92781830]
[-11.12801933 100.80686188]
[3.83003712 99.68591309]
[18.78809357 98.56496429]
[33.74615097 97.44400787]
[48.70420837 96.32305908]
[63.66226578 95.20210266]
[78.62032318 94.08115387]
[85.83852386 79.54240417]
[102.47109985 72.53293610]
[121.39799500 78.58258057]
[130.30529785 66.51361084]
[139.21260071 54.44464493]
[148.11990356 42.37567902]
[141.90454102 28.33057594]
[143.56039429 13.06120396]
[152.64202881 0.67494619]
[166.70654297 -5.49635601]
[181.97065735 -3.79265332]
[194.32838440 5.32776690]
[200.45556641 19.41155815]
[198.70404053 34.67024994]
[189.54492188 46.99933243]
[175.44200134 53.08234024]
[160.18887329 51.28298187]
[151.28157043 63.35194778]
[142.37426758 75.42091370]
[133.46696472 87.48988342]
[145.20962524 78.15662384]
[160.17948914 79.10700989]
[170.64756775 89.85034943]
[171.20918274 104.83982849]
[161.57435608 116.33635712]
[146.71757507 118.40424347]
[134.30825806 109.97415161]
[144.09257507 121.34372711]
[153.87689209 132.71330261]
[163.66119385 144.08287048]
[173.44551086 155.45245361]
[188.89843750 154.04298401]
[202.21131897 162.01461792]
[208.26507568 176.30207825]
[204.73191833 191.41156006]
[192.97041321 201.53315735]
[177.50309753 202.77490234]
[164.27748108 194.65931702]
[158.37907410 180.30702209]
[162.07592773 165.23675537]
[152.29162598 153.86718750]
[142.50730896 142.49760437]
[132.72299194 131.12803650]
[122.93869019 119.75846100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[42 59]
[43 58]
[44 57]
[45 56]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
