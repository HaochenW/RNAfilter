%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGAUUUGGGCUGACUGAAGUCAGAUCCAAAUCCGGGCCGGCUGGGAGCACGACUCCACUCAAAACGCGAUGGGUUUAACCAUCGCC\
) } def
/len { sequence length } bind def

/coor [
[73.59004974 110.76183319]
[58.69941330 112.56988525]
[43.80878067 114.37793732]
[28.91814613 116.18598175]
[14.02751350 117.99403381]
[-0.86311960 119.80208588]
[-15.75375271 121.61013794]
[-30.64438629 123.41818237]
[-45.53501892 125.22623444]
[-60.42565155 127.03428650]
[-75.31628418 128.84233093]
[-90.20691681 130.65039062]
[-105.09754944 132.45843506]
[-119.95475769 134.52323914]
[-134.77410889 136.84417725]
[-149.59346008 139.16511536]
[-164.41281128 141.48605347]
[-179.23217773 143.80700684]
[-191.64776611 154.52078247]
[-207.04283142 148.87068176]
[-209.58026123 132.66903687]
[-196.64976501 122.58270264]
[-181.55311584 128.98764038]
[-166.73376465 126.66670227]
[-151.91439819 124.34576416]
[-137.09504700 122.02482605]
[-122.27569580 119.70388794]
[-116.02162170 115.46804810]
[-106.90560150 117.56780243]
[-92.01496887 115.75975037]
[-77.12433624 113.95170593]
[-62.23370361 112.14365387]
[-47.34307098 110.33560181]
[-32.45243454 108.52754974]
[-17.56180382 106.71950531]
[-2.67116976 104.91145325]
[12.21946335 103.10340118]
[27.11009598 101.29534912]
[42.00072861 99.48730469]
[56.89136124 97.67925262]
[71.78199768 95.87120056]
[73.69013214 86.68503571]
[78.60084534 78.32869720]
[86.16558838 71.78427887]
[95.71559143 67.89100647]
[106.31929779 67.24160004]
[116.87281799 70.10126495]
[126.21491241 76.35974884]
[134.52153015 63.86975098]
[142.82815552 51.37975311]
[151.13478088 38.88975525]
[149.39335632 22.94149590]
[160.87753296 11.73911190]
[176.77761841 13.87611389]
[184.89643860 27.71317673]
[179.00592041 42.63569260]
[163.62478638 47.19638062]
[155.31816101 59.68637848]
[147.01153564 72.17637634]
[138.70491028 84.66636658]
[151.98268127 77.68777466]
[163.97946167 68.68347931]
[178.96702576 68.07306671]
[191.65631104 76.07196045]
[197.56925964 89.85735321]
[194.61921692 104.56439972]
[183.84724426 115.00300598]
[169.05474854 117.48940277]
[155.46020508 111.14451599]
[141.03105164 107.04580688]
[151.72879028 117.56047058]
[162.42654419 128.07513428]
[173.12429810 138.58979797]
[183.82203674 149.10446167]
[194.51979065 159.61912537]
[205.21754456 170.13378906]
[221.01708984 169.74678040]
[232.40493774 180.70545959]
[232.62487793 196.50820923]
[221.54643250 207.77957153]
[205.74223328 207.83241272]
[194.58863831 196.63542175]
[194.70288086 180.83154297]
[184.00512695 170.31687927]
[173.30737305 159.80221558]
[162.60963440 149.28755188]
[151.91188049 138.77288818]
[141.21412659 128.25822449]
[130.51638794 117.74355316]
[109.81028748 131.54936218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[48 60]
[49 59]
[50 58]
[51 57]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
