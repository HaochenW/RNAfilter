%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAGUCAUACUAGGGAGGGAUAAUCCCUCCAAGUUUAUGACUUAUGCCCCGGGUAGUCGAGCUAUUCGACCCUUCGAAGGCGAAGC\
) } def
/len { sequence length } bind def

/coor [
[69.50329590 102.71022797]
[54.69213486 100.33757019]
[39.88097763 97.96490479]
[25.06981468 95.59224701]
[10.25865459 93.21958160]
[-4.55250597 90.84692383]
[-19.36366653 88.47425842]
[-34.17482758 86.10160065]
[-48.98598862 83.72893524]
[-63.79714966 81.35627747]
[-78.68281555 79.50779724]
[-93.62445068 78.18581390]
[-108.56607819 76.86382294]
[-119.07270050 84.59324646]
[-131.61730957 83.04608154]
[-139.41548157 73.61717224]
[-154.30114746 71.76869965]
[-169.18681335 69.92022705]
[-184.07247925 68.07174683]
[-198.95814514 66.22327423]
[-213.84382629 64.37479401]
[-228.72949219 62.52632141]
[-245.19299316 66.57469177]
[-253.64070129 51.87528610]
[-241.85432434 39.68851471]
[-226.88101196 47.64065170]
[-211.99534607 49.48912811]
[-197.10968018 51.33760452]
[-182.22401428 53.18607712]
[-167.33833313 55.03455353]
[-152.45266724 56.88302994]
[-137.56700134 58.73150635]
[-121.92786407 50.98412704]
[-107.24409485 61.92219543]
[-92.30245972 63.24418259]
[-77.36083221 64.56616974]
[-73.03855896 62.08965302]
[-67.08267212 62.46383667]
[-61.42448807 66.54511261]
[-46.61332703 68.91777802]
[-31.80216599 71.29043579]
[-16.99100494 73.66310120]
[-2.17984438 76.03575897]
[12.63131618 78.40842438]
[27.44247627 80.78108215]
[42.25363922 83.15374756]
[57.06479645 85.52640533]
[71.87596130 87.89907074]
[81.61744690 75.51580048]
[96.22702789 69.61647034]
[111.83576965 71.76334381]
[124.31015015 81.38788605]
[138.09114075 75.46469879]
[151.87214661 69.54151154]
[165.65313721 63.61833191]
[179.43414307 57.69514465]
[193.21513367 51.77196121]
[206.99613953 45.84877396]
[220.77713013 39.92559052]
[232.94149780 28.11607742]
[247.65692139 36.53585434]
[243.63981628 53.00701904]
[226.70031738 53.70658875]
[212.91931152 59.62977219]
[199.13832092 65.55295563]
[185.35733032 71.47614288]
[171.57632446 77.39933014]
[157.79533386 83.32250977]
[144.01432800 89.24569702]
[130.23333740 95.16888428]
[130.55813599 101.89604950]
[129.40422058 108.53146362]
[126.82745361 114.75404358]
[122.95251465 120.26268005]
[131.42314148 132.64204407]
[139.89375305 145.02140808]
[148.36437988 157.40075684]
[156.83500671 169.78012085]
[171.84796143 176.37884521]
[173.37057495 192.70715332]
[159.83650208 201.96788025]
[145.16845703 194.63439941]
[144.45564270 178.25074768]
[135.98501587 165.87138367]
[127.51439667 153.49201965]
[119.04377747 141.11265564]
[110.57315826 128.73330688]
[92.15894318 129.59580994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 36]
[12 35]
[13 34]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
