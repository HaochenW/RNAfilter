%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAUAAUUGUUCUAGGCCUAGAUCAAGCAAUUAUUGAAUCGAAGUUGUCAAGCAAGGAGUACCAGCUCAUGGG\
) } def
/len { sequence length } bind def

/coor [
[53.22771072 101.72788239]
[38.34289932 99.87248993]
[23.45809174 98.01710510]
[8.57328320 96.16171265]
[-6.31152582 94.30632019]
[-21.19633484 92.45093536]
[-36.08114243 90.59554291]
[-50.96595001 88.74015808]
[-65.85076141 86.88476562]
[-80.73557281 85.02937317]
[-95.62037659 83.17398834]
[-110.50518799 81.31859589]
[-125.49237061 80.69872284]
[-140.47955322 81.31859589]
[-155.46675110 81.93846893]
[-170.45393372 82.55834961]
[-184.00781250 91.79004669]
[-198.66012573 84.42513275]
[-199.33781433 68.03999329]
[-185.34375000 59.49025726]
[-171.07380676 67.57115936]
[-156.08662415 66.95128632]
[-141.09944153 66.33141327]
[-126.11225128 65.71153259]
[-124.05460358 63.41273499]
[-120.83143616 61.92015839]
[-116.79983521 61.73746109]
[-112.51334381 63.20592880]
[-108.64979553 66.43379211]
[-93.76499176 68.28917694]
[-78.88018036 70.14456940]
[-63.99537277 71.99995422]
[-49.11056137 73.85534668]
[-34.22575378 75.71073914]
[-19.34094429 77.56612396]
[-4.45613623 79.42151642]
[10.42867279 81.27690125]
[25.31348038 83.13229370]
[40.19828796 84.98768616]
[55.08309937 86.84307098]
[62.58944702 71.87380219]
[74.88474274 60.50497818]
[90.39505768 54.19194412]
[107.13491058 53.74282837]
[122.96142578 59.21512604]
[135.84861755 69.90832520]
[148.73443604 62.23004913]
[161.62023926 54.55177307]
[169.14671326 39.98179626]
[185.53834534 39.48531723]
[193.93283081 53.57307053]
[185.69464111 67.75278473]
[169.29852295 67.43758392]
[156.41270447 75.11585999]
[143.52690125 82.79413605]
[146.14874268 92.19448090]
[146.76422119 101.93418121]
[145.34654236 111.58979034]
[141.95738220 120.74152374]
[154.16511536 129.45767212]
[166.37284851 138.17382812]
[178.58058167 146.88998413]
[194.94671631 147.92984009]
[201.98582458 162.74142456]
[192.45666504 176.08784485]
[176.16201782 174.23945618]
[169.86442566 159.09771729]
[157.65669250 150.38156128]
[145.44895935 141.66540527]
[133.24122620 132.94924927]
[120.68862915 141.98348999]
[105.87712860 146.43374634]
[90.42392731 145.81410217]
[76.01629639 140.19223022]
[64.22734070 130.18194580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 24]
[14 23]
[15 22]
[16 21]
[46 55]
[47 54]
[48 53]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
