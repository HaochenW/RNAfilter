%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUAGACCCAUUGUCCACACUAAGUCUAGACUCAAAAGGGUAUGUGACCCUAAGAUCCGGUGUGGUGGGCCACCGGU\
) } def
/len { sequence length } bind def

/coor [
[65.94020081 116.76315308]
[51.43852615 120.59740448]
[36.93685150 124.43165588]
[22.43517876 128.26589966]
[7.93350458 132.10015869]
[-6.56816864 135.93440247]
[-21.06984138 139.76864624]
[-35.57151413 143.60290527]
[-39.67817688 158.33662415]
[-50.53657532 168.96638489]
[-65.16049957 172.70901489]
[-79.59767151 168.65635681]
[-89.99784851 157.99325562]
[-104.49951935 161.82749939]
[-115.74616241 173.76252747]
[-131.64111328 169.72735596]
[-135.83300781 153.87301636]
[-124.00959015 142.50909424]
[-108.33377075 147.32582092]
[-93.83209991 143.49157715]
[-90.06124878 129.08163452]
[-79.51374054 118.42302704]
[-64.95108032 114.44869995]
[-50.25790024 118.32261658]
[-39.40576553 129.10122681]
[-24.90409088 125.26697540]
[-10.40241814 121.43272400]
[4.09925508 117.59848022]
[18.60092926 113.76422882]
[33.10260391 109.92997742]
[47.60427475 106.09572601]
[62.10594940 102.26148224]
[63.23643494 90.53884125]
[67.90528107 79.72679901]
[75.66313934 70.86598969]
[85.76333618 64.80921936]
[97.23376465 62.13945007]
[108.97042847 63.11362076]
[115.32471466 49.52601624]
[121.67900085 35.93841171]
[128.03329468 22.35080528]
[134.38757324 8.76319885]
[130.29089355 -6.74798393]
[139.97903442 -19.53546333]
[156.02006531 -19.78977776]
[166.10870361 -7.31584072]
[162.50578308 8.31741142]
[147.97518921 15.11748600]
[141.62089539 28.70509148]
[135.26660156 42.29269791]
[128.91232300 55.88030243]
[122.55803680 69.46791077]
[128.97276306 75.47139740]
[133.83557129 82.78874969]
[136.88600159 91.02801514]
[137.96063232 99.74786377]
[137.00192261 108.48122406]
[134.06121826 116.76028442]
[145.94636536 125.91140747]
[157.83152771 135.06253052]
[169.71667480 144.21366882]
[181.60182190 153.36479187]
[193.48698425 162.51591492]
[202.45324707 165.38400269]
[205.65312195 172.27474976]
[221.69616699 172.27908325]
[231.58238220 184.91406250]
[227.72789001 200.48719788]
[213.08953857 207.05210876]
[198.89660645 199.57278442]
[196.03671265 183.78669739]
[184.33586121 174.40107727]
[172.45069885 165.24993896]
[160.56555176 156.09881592]
[148.68038940 146.94769287]
[136.79524231 137.79655457]
[124.91008759 128.64543152]
[104.01756287 137.74827576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[13 20]
[14 19]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
