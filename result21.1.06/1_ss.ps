%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUUGGGGAUAGCUUAUCCGAGGGAGGCGAGGGUUUCCAGUUGGGAAAACGAAUAGAAUCGGCCCAUAUGGGCCGAUUG\
) } def
/len { sequence length } bind def

/coor [
[75.89361572 116.62702942]
[61.77651215 121.69728851]
[47.65941238 126.76753998]
[33.54231262 131.83779907]
[19.42521095 136.90805054]
[5.30810976 141.97830200]
[-1.87893534 159.28521729]
[-19.04757500 165.97946167]
[-35.48603821 158.36769104]
[-49.17359161 164.50372314]
[-62.86114502 170.63975525]
[-76.54869843 176.77578735]
[-90.23625183 182.91181946]
[-102.21614838 194.90841675]
[-117.06028748 186.71768188]
[-113.29891968 170.18624878]
[-96.37228394 169.22425842]
[-82.68473053 163.08822632]
[-68.99717712 156.95220947]
[-55.30961990 150.81617737]
[-41.62206650 144.68014526]
[-39.88345337 133.10380554]
[-32.60391617 123.78165436]
[-21.56988716 119.19542694]
[-9.58594227 120.64015198]
[0.23785636 127.86119843]
[14.35495663 122.79094696]
[28.47205734 117.72068787]
[42.58915710 112.65043640]
[56.70626068 107.58018494]
[70.82335663 102.50993347]
[77.05465698 81.80419922]
[95.79590607 71.01894379]
[86.25002289 58.70984650]
[88.20687103 43.62258911]
[100.00054169 34.59790039]
[101.72079468 19.69687080]
[103.44104004 4.79583931]
[105.16129303 -10.10519218]
[106.88154602 -25.00622368]
[99.87183380 -39.83174133]
[109.42745209 -53.15924072]
[125.71839905 -51.27853012]
[131.98594666 -36.12432480]
[121.78257751 -23.28597260]
[120.06232452 -8.38494110]
[118.34207153 6.51609039]
[116.62182617 21.41712189]
[114.90157318 36.31815338]
[124.32870483 47.79267883]
[122.79639435 62.92894745]
[110.69693756 72.73919678]
[116.42588043 75.75610352]
[121.35183716 79.95816803]
[125.23402405 85.13997650]
[127.88263702 91.04821777]
[129.16822815 97.39405823]
[129.02792358 103.86729431]
[127.46858978 110.15148163]
[139.73753357 118.78125763]
[152.00646973 127.41104126]
[164.27540588 136.04081726]
[176.54435730 144.67059326]
[188.81329346 153.30038452]
[201.08222961 161.93016052]
[213.35118103 170.55993652]
[225.62011719 179.18971252]
[241.99319458 180.11404419]
[249.13665771 194.87557983]
[239.70191956 208.28892517]
[223.39463806 206.55557251]
[216.99034119 191.45866394]
[204.72138977 182.82887268]
[192.45245361 174.19909668]
[180.18351746 165.56932068]
[167.91456604 156.93954468]
[155.64562988 148.30975342]
[143.37669373 139.67997742]
[131.10775757 131.05020142]
[118.83881378 122.42041779]
[104.18909454 128.98323059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[33 52]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
