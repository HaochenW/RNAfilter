%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACUUCGGAGGAGAAUUCUUCGACGAAGUGUCCAACAAGAAAGGGCCUCUCCCUAUUAGAGUUCAUUUUCGUUGAUGAACC\
) } def
/len { sequence length } bind def

/coor [
[60.84494019 115.72856903]
[46.15379333 118.75680542]
[31.46264648 121.78504181]
[16.77149963 124.81327820]
[2.08035398 127.84151459]
[-12.61079216 130.86975098]
[-27.30193901 133.89799500]
[-41.99308395 136.92622375]
[-56.68423080 139.95446777]
[-71.37538147 142.98269653]
[-80.07984924 155.90051270]
[-95.02190399 158.76229858]
[-107.28341675 150.38430786]
[-121.97456360 153.41253662]
[-136.66571045 156.44076538]
[-151.35685730 159.46900940]
[-163.24491882 170.76528931]
[-178.89300537 165.85922241]
[-182.20370483 149.79772949]
[-169.77125549 139.10351562]
[-154.38510132 144.77786255]
[-139.69395447 141.74963379]
[-125.00279999 138.72138977]
[-110.31165314 135.69316101]
[-102.36270142 123.14924622]
[-87.50692749 119.86890411]
[-74.40361786 128.29154968]
[-59.71246719 125.26331329]
[-45.02132034 122.23507690]
[-30.33017540 119.20684052]
[-15.63902855 116.17860413]
[-0.94788212 113.15036774]
[13.74326420 110.12213135]
[28.43441010 107.09389496]
[43.12555695 104.06566620]
[57.81670380 101.03742981]
[58.66729355 91.50798798]
[61.64274979 82.41511536]
[66.59010315 74.22625732]
[73.25502014 67.36239624]
[81.29486847 62.17639923]
[90.29631805 58.93486404]
[99.79662323 57.80443954]
[109.30738831 58.84323502]
[118.33966827 61.99785233]
[127.15644836 49.86259460]
[135.97322083 37.72734070]
[144.79000854 25.59208679]
[143.71058655 9.58538723]
[155.64884949 -1.13176012]
[171.44679260 1.66192198]
[178.98558044 15.82336044]
[172.48208618 30.48911095]
[156.92526245 34.40886688]
[148.10847473 46.54412079]
[139.29170227 58.67937469]
[130.47492981 70.81462860]
[135.35906982 76.97299194]
[139.01632690 83.93035126]
[141.31977844 91.44529724]
[142.18951416 99.25708008]
[141.59535217 107.09463501]
[139.55790710 114.68601990]
[136.14787292 121.76782990]
[147.41784668 131.66670227]
[158.68782043 141.56556702]
[169.95780945 151.46443176]
[181.22778320 161.36329651]
[192.49775696 171.26217651]
[203.76773071 181.16104126]
[219.52079773 179.88955688]
[231.50466919 190.19306946]
[232.60952759 205.95867920]
[222.17990112 217.83294678]
[206.40347290 218.77107239]
[194.64013672 208.21647644]
[193.86886597 192.43101501]
[182.59889221 182.53215027]
[171.32891846 172.63328552]
[160.05892944 162.73440552]
[148.78895569 152.83554077]
[137.51898193 142.93667603]
[126.24900055 133.03781128]
[102.16438293 142.14050293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[13 24]
[14 23]
[15 22]
[16 21]
[45 57]
[46 56]
[47 55]
[48 54]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
