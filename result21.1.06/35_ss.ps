%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCCACCCCUUAUGGGAACCAACGGUGGGGUGGCAAGUUUCCAGGCGACCGGCCGUUUAACUAAAACUUUAUCUUUUUAGG\
) } def
/len { sequence length } bind def

/coor [
[64.40409851 108.15916443]
[49.40665817 108.43634796]
[34.40921783 108.71353149]
[19.41177940 108.99071503]
[4.41434097 109.26789856]
[-10.58309746 109.54508209]
[-25.58053589 109.82226562]
[-40.57797623 110.09944916]
[-55.57541275 110.37663269]
[-70.57285309 110.65381622]
[-85.57028961 110.93099976]
[-100.56773376 111.20818329]
[-108.84530640 122.01515961]
[-121.67242432 125.94886017]
[-134.21343994 121.76442719]
[-141.87767029 111.23351288]
[-156.87510681 110.95632935]
[-166.11840820 123.41991425]
[-180.93237305 128.03794861]
[-195.62071228 123.03471375]
[-204.53546143 110.33405304]
[-204.24871826 94.81962585]
[-194.87074280 82.45704651]
[-180.00756836 77.99998474]
[-165.37437439 83.16226959]
[-156.59791565 95.95889282]
[-141.60047913 96.23607635]
[-130.12800598 84.08953094]
[-113.08683014 83.87804413]
[-100.84491730 96.21074677]
[-85.84747314 95.93356323]
[-70.85003662 95.65637970]
[-55.85259628 95.37919617]
[-40.85515976 95.10201263]
[-25.85771942 94.82482910]
[-10.86028099 94.54764557]
[4.13715744 94.27046204]
[19.13459587 93.99327850]
[34.13203430 93.71609497]
[49.12947464 93.43891144]
[64.12691498 93.16172791]
[67.97492981 82.44906616]
[74.93431091 73.44154358]
[84.32892609 67.01427460]
[95.24604797 63.79170990]
[106.62503052 64.08692169]
[117.36036682 67.87123108]
[127.04928589 56.42025375]
[136.73820496 44.96928024]
[136.84387207 28.92657471]
[149.54103088 19.12036514]
[165.08950806 23.07313538]
[171.56184387 37.75265884]
[163.99302673 51.89805984]
[148.18917847 54.65819931]
[138.50025940 66.10917664]
[128.81134033 77.56015015]
[132.15687561 82.69174957]
[134.59757996 88.31037903]
[136.06478882 94.25791931]
[136.51719666 100.36703491]
[135.94207764 106.46582794]
[134.35563660 112.38268280]
[131.80249023 117.95111084]
[143.07246399 127.84997559]
[154.34243774 137.74884033]
[165.61242676 147.64772034]
[176.88240051 157.54658508]
[188.15237427 167.44544983]
[203.25927734 163.90129089]
[217.55114746 169.94464111]
[225.53247070 183.25170898]
[224.13426208 198.70565796]
[213.89416504 210.36413574]
[198.74971008 213.74420166]
[184.52423096 207.54617310]
[176.68774414 194.15330505]
[178.25350952 178.71542358]
[166.98353577 168.81655884]
[155.71354675 158.91769409]
[144.44357300 149.01882935]
[133.17359924 139.11994934]
[121.90361786 129.22108459]
[99.28178406 136.51197815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[16 27]
[17 26]
[47 57]
[48 56]
[49 55]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
