%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCGGGGUUCAUGCCUUGGAGCCAAGGCAUGAGAGAACCCCGCGGUCUGGAGCUCAGAUAGAGCUCCAUCCUGGGUUGGCCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[77.06288910 103.92123413]
[62.25173187 101.54856873]
[47.44057083 99.17591095]
[32.62940979 96.80324554]
[17.81824875 94.43058777]
[3.00708818 92.05792236]
[-11.80407238 89.68526459]
[-26.61523247 87.31259918]
[-41.42639542 84.93994141]
[-56.23755264 82.56727600]
[-71.17918396 81.24529266]
[-86.17684937 80.98056793]
[-101.17451477 80.71583557]
[-116.17218018 80.45111084]
[-131.16984558 80.18638611]
[-146.16751099 79.92165375]
[-161.16516113 79.65692902]
[-176.16282654 79.39220428]
[-191.16049194 79.12747192]
[-206.15815735 78.86274719]
[-220.23269653 87.27936554]
[-234.42533875 79.06347656]
[-234.13592529 62.66688538]
[-219.66217041 54.95699692]
[-205.89343262 63.86508179]
[-190.89576721 64.12981415]
[-175.89810181 64.39453888]
[-160.90043640 64.65926361]
[-145.90277100 64.92399597]
[-130.90512085 65.18872070]
[-115.90744781 65.45344543]
[-100.90978241 65.71817017]
[-85.91212463 65.98290253]
[-70.91445923 66.24762726]
[-68.74028778 64.15280151]
[-65.51379395 62.89660263]
[-61.59233093 62.92203140]
[-57.50062180 64.51698303]
[-53.86489105 67.75611877]
[-39.05373383 70.12877655]
[-24.24257088 72.50144196]
[-9.43141079 74.87409973]
[5.37974977 77.24676514]
[20.19091034 79.61942291]
[35.00207138 81.99208832]
[49.81323242 84.36474609]
[64.62438965 86.73741150]
[79.43555450 89.11006927]
[96.31922913 77.02307892]
[116.13368988 83.23124695]
[129.46253967 76.35071564]
[142.79139709 69.47019196]
[156.12025452 62.58966064]
[169.44909668 55.70913315]
[182.77795410 48.82860565]
[196.10681152 41.94807816]
[209.43566895 35.06755066]
[215.66258240 20.28225708]
[231.14306641 16.07104492]
[244.00180054 25.66439819]
[244.37467957 41.70311737]
[231.97564697 51.88367081]
[216.31619263 48.39640808]
[202.98733521 55.27693558]
[189.65847778 62.15746307]
[176.32963562 69.03798676]
[163.00077820 75.91851807]
[149.67192078 82.79904175]
[136.34306335 89.67957306]
[123.01421356 96.56009674]
[123.14533997 102.40424347]
[121.81584167 108.09666443]
[119.10963440 113.27813721]
[128.01187134 125.35084534]
[136.91409302 137.42355347]
[145.81632996 149.49626160]
[154.71855164 161.56896973]
[170.30267334 165.37879944]
[176.90953064 179.99827576]
[169.47091675 194.21258545]
[153.69308472 197.11772156]
[141.67945862 186.48512268]
[142.64584351 170.47120667]
[133.74362183 158.39849854]
[124.84138489 146.32579041]
[115.93915558 134.25308228]
[107.03692627 122.18036652]
[93.96495056 122.47365570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
