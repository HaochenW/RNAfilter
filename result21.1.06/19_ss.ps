%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUAGCGUAGUUACUUAGUAUUUCCCUCUGCCUGCCCUUGAGGCCCUUCCCACACUAAGAAUAGUGUGA\
) } def
/len { sequence length } bind def

/coor [
[67.01114655 118.94190216]
[52.78572464 123.69977570]
[38.56030273 128.45764160]
[24.33487892 133.21551514]
[10.10945511 137.97338867]
[-4.11596823 142.73124695]
[-18.34139252 147.48912048]
[-25.44396210 161.35243225]
[-39.93834305 165.97492981]
[-53.11111450 159.11828613]
[-57.65035629 173.95657349]
[-70.06463623 183.26600647]
[-85.58040619 183.46688843]
[-98.23154449 174.48199463]
[-103.15342712 159.76618958]
[-98.45349121 144.97801208]
[-85.93894958 135.80381775]
[-70.42191315 135.77125549]
[-57.86898422 144.89286804]
[-51.47196960 131.49085999]
[-37.11314774 126.46305084]
[-23.09926224 133.26370239]
[-8.87383747 128.50582886]
[5.35158587 123.74796295]
[19.57700920 118.99008942]
[33.80243301 114.23222351]
[48.02785873 109.47434998]
[62.25328064 104.71648407]
[63.00772858 91.13254547]
[68.49383545 78.68283081]
[78.00988007 68.95979309]
[90.33866882 63.20708466]
[103.90322876 62.16053772]
[108.35391998 47.83603668]
[112.80461121 33.51153564]
[117.25530243 19.18703461]
[108.64650726 6.13243294]
[110.49446869 -9.39557648]
[121.92663574 -20.06514168]
[137.54508972 -20.83841896]
[149.97526550 -11.35029316]
[153.34803772 3.91923475]
[146.07086182 17.76036072]
[131.57980347 23.63772774]
[127.12911224 37.96222687]
[122.67842102 52.28672791]
[118.22772980 66.61122894]
[125.07350159 71.39266205]
[130.71110535 77.55254364]
[134.86888123 84.79405975]
[137.34651184 92.76826477]
[138.02459717 101.09094238]
[136.87045288 109.36104584]
[133.93971252 117.18009186]
[145.72447205 126.46015930]
[157.50921631 135.74023438]
[169.29396057 145.02029419]
[181.07870483 154.30036926]
[192.86346436 163.58044434]
[204.64820862 172.86051941]
[220.94741821 174.66813660]
[227.28288269 189.79408264]
[217.13719177 202.67807007]
[200.94738770 200.06616211]
[195.36813354 184.64526367]
[183.58338928 175.36518860]
[171.79864502 166.08511353]
[160.01388550 156.80505371]
[148.22914124 147.52497864]
[136.44439697 138.24490356]
[124.65964508 128.96484375]
[104.56649017 137.76515198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[10 19]
[33 47]
[34 46]
[35 45]
[36 44]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
