%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGAUCGCCCGAGCUGGUGCUCGGUGGCGAGAUCUGGGACCAUUAGAGUAUAGCUGGUGAUCACGCUCACUAAAAGCGUGA\
) } def
/len { sequence length } bind def

/coor [
[80.47959900 107.14050293]
[65.48216248 106.86331940]
[50.48472214 106.58613586]
[35.48728180 106.30895233]
[20.48984528 106.03176880]
[5.49240589 105.75458527]
[-9.50503254 105.47740173]
[-24.50247192 105.75458527]
[-39.47942734 106.58575439]
[-54.45637894 107.41693115]
[-69.43333435 108.24810028]
[-84.41028595 109.07927704]
[-99.34629822 110.46330261]
[-114.22097015 112.39828491]
[-129.09564209 114.33327484]
[-143.97030640 116.26826477]
[-158.84498596 118.20325470]
[-171.53483582 128.59072876]
[-186.77786255 122.54240417]
[-188.89334106 106.28027344]
[-175.70504761 96.53342438]
[-160.77996826 103.32858276]
[-145.90530396 101.39359283]
[-131.03062439 99.45860291]
[-116.15596008 97.52362061]
[-101.28128815 95.58863068]
[-97.58629608 92.22229767]
[-91.66571045 91.30539703]
[-85.24146271 94.10231781]
[-70.26450348 93.27114868]
[-55.28755188 92.43997955]
[-40.31059647 91.60880280]
[-25.33364296 90.77763367]
[-21.40013313 87.69338226]
[-15.42799568 87.21623230]
[-9.22784901 90.47996521]
[5.76958990 90.75714874]
[20.76702881 91.03433228]
[35.76446533 91.31151581]
[50.76190567 91.58869934]
[65.75934601 91.86588287]
[80.75678253 92.14306641]
[92.13457489 80.76025391]
[108.22803497 80.91251373]
[118.73617554 70.20835876]
[129.24432373 59.50420380]
[139.75247192 48.80005264]
[150.26062012 38.09590149]
[160.76876831 27.39174843]
[159.08198547 11.84540462]
[167.82574463 -1.11918867]
[182.87150574 -5.38054705]
[197.11511230 1.07341290]
[203.83117676 15.19532871]
[199.84857178 30.31726265]
[187.04777527 39.29910278]
[171.47291565 37.89989471]
[160.96476746 48.60404587]
[150.45661926 59.30819702]
[139.94847107 70.01235199]
[129.44033813 80.71650696]
[118.93218231 91.42065430]
[120.78185272 99.61590576]
[119.23627472 107.87390900]
[130.13278198 118.18246460]
[141.02928162 128.49101257]
[151.92578125 138.79956055]
[162.82229614 149.10810852]
[173.71879578 159.41665649]
[184.61529541 169.72521973]
[200.12782288 167.75144958]
[213.25177002 176.25415039]
[217.79043579 191.21858215]
[211.60078430 205.57902527]
[197.60537720 212.55490112]
[182.41242981 208.85241699]
[173.19558716 196.21977234]
[174.30674744 180.62171936]
[163.41024780 170.31317139]
[152.51373291 160.00462341]
[141.61723328 149.69606018]
[130.72073364 139.38751221]
[119.82422638 129.07896423]
[108.92772675 118.77041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
