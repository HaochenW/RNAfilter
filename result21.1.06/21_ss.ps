%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUAGGGAGUUCUCGGUAGCGAGCCGUCCUCCCUAGGACGCCCUUCCCACGCGUUGGGAUGAAUUUGGUUGUGGGAUGAACCG\
) } def
/len { sequence length } bind def

/coor [
[67.84146118 108.68028259]
[52.85146713 109.22811890]
[37.86147308 109.77594757]
[22.87148094 110.32377625]
[7.88148737 110.87160492]
[-7.10850525 111.41944122]
[-22.09849739 111.96726990]
[-37.08848953 112.51509857]
[-52.07848358 113.06292725]
[-67.06847382 113.61075592]
[-82.05847168 114.15859222]
[-88.47494507 124.49874878]
[-99.03466034 130.29899597]
[-110.96040344 130.16978455]
[-121.18173218 124.26352692]
[-127.12547302 114.20470428]
[-142.11546326 113.65687561]
[-157.10546875 113.10904694]
[-172.09545898 112.56121063]
[-184.77796936 122.38634491]
[-200.33233643 118.45676422]
[-206.82655334 103.78691101]
[-199.27882385 89.63023376]
[-183.47912598 86.84653473]
[-171.54762268 97.57122040]
[-156.55763245 98.11904907]
[-141.56764221 98.66687775]
[-126.57764435 99.21471405]
[-114.18016815 85.98566437]
[-95.73826599 85.77693176]
[-82.60630035 99.16859436]
[-67.61631012 98.62076569]
[-52.62631226 98.07293701]
[-37.63632202 97.52510834]
[-22.64632797 96.97727203]
[-7.65633583 96.42944336]
[7.33365726 95.88161469]
[22.32365036 95.33378601]
[37.31364441 94.78595734]
[52.30363464 94.23812103]
[67.29362488 93.69029236]
[74.09470367 79.06117249]
[86.97251892 69.34378052]
[102.90626526 66.81758118]
[118.15827179 72.07516479]
[122.72280121 56.92671204]
[137.25546265 53.66315079]
[148.05401611 43.25203705]
[158.85256958 32.84092331]
[169.65112305 22.42981148]
[180.44967651 12.01869869]
[182.17913818 -3.93086314]
[195.80393982 -12.40107632]
[210.87228394 -6.89431953]
[215.82504272 8.36509609]
[206.86286926 21.67145157]
[190.86079407 22.81725121]
[180.06224060 33.22836304]
[169.26368713 43.63947678]
[158.46513367 54.05059052]
[147.66658020 64.46170044]
[143.87443542 78.86548615]
[128.56938171 82.87371826]
[131.38313293 88.83675385]
[132.96717834 95.23720551]
[133.25944519 101.82428741]
[132.24850464 108.33988190]
[129.97392273 114.52868652]
[126.52487183 120.14820862]
[136.11996460 131.67791748]
[145.71505737 143.20762634]
[155.31015015 154.73733521]
[170.78427124 153.58341980]
[183.96360779 161.77394104]
[189.78044128 176.15950012]
[185.99807739 191.20852661]
[174.07092285 201.13438416]
[158.58520508 202.12036133]
[145.49549866 193.78735352]
[139.83506775 179.33953857]
[143.78045654 164.33242798]
[134.18534851 152.80271912]
[124.59025574 141.27301025]
[114.99516296 129.74330139]
[95.86666107 133.05200195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[16 28]
[17 27]
[18 26]
[19 25]
[45 63]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
