%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGUAUAACCGUUUAGCAUAAGCGCCGUUAUACCCGACGAUAUAGCCUGCCUAUUCUCUCAAACCUGGGCUCACAGGUC\
) } def
/len { sequence length } bind def

/coor [
[70.29112244 110.42510986]
[55.36158371 111.87727356]
[40.43204117 113.32943726]
[25.50250053 114.78160095]
[10.57295799 116.23376465]
[-4.35658407 117.68592834]
[-19.28612518 119.13809204]
[-34.21566772 120.59025574]
[-49.14521027 122.04241180]
[-64.07475281 123.49457550]
[-78.93675995 125.52455139]
[-93.70887756 128.12927246]
[-108.48098755 130.73399353]
[-123.25310516 133.33871460]
[-138.02522278 135.94343567]
[-152.79733276 138.54815674]
[-167.34590149 147.25308228]
[-179.73806763 135.68284607]
[-172.05049133 120.57199860]
[-155.40206909 123.77604675]
[-140.62994385 121.17132568]
[-125.85782623 118.56659698]
[-111.08571625 115.96187592]
[-96.31359863 113.35715485]
[-81.54148102 110.75243378]
[-77.99280548 107.20561218]
[-72.09265137 106.02504730]
[-65.52691650 108.56503296]
[-50.59737396 107.11287689]
[-35.66783142 105.66071320]
[-20.73828888 104.20854950]
[-5.80874681 102.75638580]
[9.12079525 101.30422211]
[24.05033684 99.85205841]
[38.97987747 98.39989471]
[53.90942001 96.94773102]
[68.83896637 95.49556732]
[76.87684631 78.63133240]
[93.05577087 69.29042816]
[111.67956543 70.76153564]
[120.40194702 58.55825424]
[122.94503784 49.50595093]
[129.70671082 46.05978012]
[138.89572144 34.20388794]
[148.08473206 22.34799767]
[157.27374268 10.49210835]
[156.69142151 -5.54037285]
[168.95642090 -15.88199997]
[184.66009521 -12.59956169]
[191.75590515 1.78893661]
[184.80058289 16.24587059]
[169.12963867 19.68111610]
[159.94062805 31.53700638]
[150.75161743 43.39289474]
[141.56260681 55.24878693]
[132.60522461 67.28063202]
[123.88285065 79.48391724]
[127.26734924 84.25859070]
[129.70968628 89.57718658]
[131.12545776 95.25591278]
[131.46574402 101.09856415]
[130.71881104 106.90325928]
[128.91044617 112.46942139]
[126.10313416 117.60473633]
[136.18325806 128.71289062]
[146.26336670 139.82106018]
[156.34349060 150.92921448]
[166.42359924 162.03736877]
[182.21948242 162.55285645]
[192.96324158 174.14367676]
[192.28077698 189.93322754]
[180.57701111 200.55383301]
[164.79556274 199.70448303]
[154.29928589 187.88908386]
[155.31544495 172.11749268]
[145.23532104 161.00933838]
[135.15521240 149.90116882]
[125.07508850 138.79301453]
[114.99497223 127.68485260]
[97.47843170 131.38378906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[40 57]
[41 56]
[43 55]
[44 54]
[45 53]
[46 52]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
