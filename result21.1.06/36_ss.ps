%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGGCGCUGUAACCUCCGUGCCGGAGGUUUAGCGGCGCCUCUACGACGCGGUUAAGCCGAGUCAACGCGCUGCUCUACCGCUCAGAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[74.86315918 108.75714874]
[59.88161087 109.50090790]
[44.90006256 110.24465942]
[29.91851044 110.98841858]
[14.93696117 111.73217773]
[-0.04458795 112.47592926]
[-15.02613735 113.21968842]
[-30.00768661 113.96344757]
[-44.98923492 114.70719910]
[-59.97078705 115.45095825]
[-74.95233917 116.19471741]
[-89.93388367 116.93846893]
[-104.88265228 118.17716217]
[-119.78229523 119.90943146]
[-134.68193054 121.64170074]
[-149.58157349 123.37397003]
[-164.48120117 125.10623932]
[-179.38084412 126.83850861]
[-194.28048706 128.57077026]
[-209.18013000 130.30303955]
[-224.21502686 138.13810730]
[-235.90596008 125.85974121]
[-227.34381104 111.22669983]
[-210.91239929 115.40341187]
[-196.01275635 113.67113495]
[-181.11311340 111.93886566]
[-166.21348572 110.20659637]
[-151.31384277 108.47432709]
[-136.41419983 106.74205780]
[-121.51456451 105.00978851]
[-106.61492157 103.27751923]
[-102.89672089 99.99671173]
[-97.02108765 99.15142822]
[-90.67764282 101.95691681]
[-75.69609070 101.21316528]
[-60.71454239 100.46940613]
[-45.73299408 99.72565460]
[-30.75144386 98.98189545]
[-15.76989365 98.23813629]
[-0.78834426 97.49438477]
[14.19320488 96.75062561]
[29.17475510 96.00686646]
[44.15630341 95.26311493]
[59.13785553 94.51935577]
[74.11940002 93.77560425]
[86.56385803 77.02134705]
[107.26799011 74.39287567]
[115.26346588 61.70144653]
[123.25894165 49.01001740]
[124.06837463 33.20953369]
[137.39891052 26.56527328]
[145.39437866 13.87384510]
[153.38986206 1.18241644]
[161.38533020 -11.50901222]
[164.71231079 -28.13331795]
[181.60794067 -29.53842163]
[187.63529968 -13.69206047]
[174.07676697 -3.51353645]
[166.08128357 9.17789268]
[158.08581543 21.86932182]
[150.09033203 34.56074905]
[149.85278320 49.45346069]
[135.95036316 57.00549316]
[127.95489502 69.69692230]
[119.95941925 82.38835144]
[122.94515991 86.50674438]
[125.09296417 91.11790466]
[126.32437897 96.05343628]
[126.59444427 101.13308716]
[125.89329529 106.17136383]
[124.24652863 110.98426819]
[135.61225891 120.77305603]
[146.97798157 130.56184387]
[158.34370422 140.35063171]
[169.70942688 150.13940430]
[181.07514954 159.92819214]
[192.44087219 169.71697998]
[203.80659485 179.50576782]
[219.21009827 176.81019592]
[232.71656799 184.69114685]
[237.94865417 199.42745972]
[232.43594360 214.06112671]
[218.78135681 221.68255615]
[203.43217468 218.69314575]
[193.63580322 206.50440979]
[194.01780701 190.87149048]
[182.65208435 181.08270264]
[171.28636169 171.29391479]
[159.92063904 161.50514221]
[148.55491638 151.71635437]
[137.18919373 141.92756653]
[125.82347107 132.13877869]
[114.45774841 122.34999084]
[99.22631073 126.60733032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
[53 59]
[54 58]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
