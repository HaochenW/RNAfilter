%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCUGUGAUGUGCUUAAGUAAUCGCAUCACAGGUUUGGCCAGAAUGAGGAUUUACCUUUAACUAGAGAGUUUCCGUAAACUCG\
) } def
/len { sequence length } bind def

/coor [
[69.78708649 110.26558685]
[54.84816360 111.61788940]
[39.90924454 112.97018433]
[24.97032738 114.32247925]
[10.03140736 115.67477417]
[-4.90751123 117.02706909]
[-19.84642982 118.37936401]
[-34.78534698 119.73166656]
[-49.72426605 121.08396149]
[-64.66318512 122.43625641]
[-79.60210419 123.78855133]
[-94.54102325 125.14084625]
[-109.47994232 126.49314117]
[-124.41886139 127.84544373]
[-139.35777283 129.19773865]
[-152.40422058 138.14765930]
[-165.77720642 131.58926392]
[-180.71612549 132.94155884]
[-193.80216980 142.82525635]
[-208.79721069 136.18594360]
[-210.27565002 119.85357666]
[-196.71658325 110.62949371]
[-182.06842041 118.00264740]
[-167.12950134 116.65035248]
[-155.15159607 107.79714966]
[-140.71008301 114.25881958]
[-125.77115631 112.90652466]
[-110.83223724 111.55422211]
[-95.89331818 110.20192719]
[-80.95439911 108.84963226]
[-66.01548004 107.49733734]
[-51.07656479 106.14504242]
[-36.13764572 104.79274750]
[-21.19872665 103.44044495]
[-6.25980711 102.08815002]
[8.67911148 100.73585510]
[23.61803055 99.38356018]
[38.55694962 98.03126526]
[53.49586868 96.67897034]
[68.43478394 95.32666779]
[74.62182617 80.65702057]
[87.12667084 70.80274200]
[102.83628845 68.21701813]
[117.83982086 73.54355621]
[128.91421509 63.42635345]
[127.32408142 48.10389709]
[134.97180176 34.93705750]
[148.74330139 28.86995888]
[163.27273560 32.03754044]
[174.34713745 21.92033958]
[185.42152405 11.80313683]
[196.49592590 1.68593466]
[198.65332031 -14.21139812]
[212.50079346 -22.31246185]
[227.41572571 -16.40281296]
[231.95669556 -1.01582968]
[222.64022827 12.04491234]
[206.61312866 12.76032925]
[195.53872681 22.87753105]
[184.46434021 32.99473190]
[173.38993835 43.11193466]
[175.23475647 57.86777115]
[167.95082092 71.03623199]
[154.14813232 77.46577454]
[139.03141785 74.50074768]
[127.95702362 84.61795044]
[131.17196655 93.18009949]
[131.82611084 102.30250549]
[129.86570740 111.23575592]
[125.45181274 119.24597931]
[134.95462036 130.85186768]
[144.45742798 142.45776367]
[153.96023560 154.06364441]
[163.46304321 165.66954041]
[172.96585083 177.27542114]
[188.49020386 182.55999756]
[191.40994263 198.69712830]
[178.72149658 209.08631897]
[163.47766113 203.04006958]
[161.35997009 186.77822876]
[151.85716248 175.17234802]
[142.35435486 163.56645203]
[132.85154724 151.96057129]
[123.34873199 140.35467529]
[113.84592438 128.74879456]
[96.33226013 131.69779968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[17 24]
[18 23]
[44 66]
[45 65]
[49 61]
[50 60]
[51 59]
[52 58]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
