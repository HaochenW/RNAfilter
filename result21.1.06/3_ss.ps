%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Thu Jan  7 18:57:04 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUAUAAUACUCAAGUGAGUAAAGUAUAAAAUAGUAUAUGACCGUGAGUGCACUUUGUAUACAACGUAUCUCCGUUGUAUC\
) } def
/len { sequence length } bind def

/coor [
[60.74529266 118.28283691]
[46.25640488 122.16512299]
[31.76751709 126.04740906]
[17.27862930 129.92970276]
[2.78974152 133.81198120]
[-11.69914627 137.69427490]
[-26.18803406 141.57655334]
[-40.67692184 145.45883179]
[-53.97919464 160.38237000]
[-72.45233154 155.19517517]
[-86.61058044 160.14935303]
[-100.76882935 165.10354614]
[-114.92707825 170.05772400]
[-129.08532715 175.01191711]
[-139.36633301 187.78817749]
[-155.52769470 185.00566101]
[-160.94400024 169.52677917]
[-150.04339600 157.27488708]
[-134.03952026 160.85366821]
[-119.88127136 155.89947510]
[-105.72301483 150.94529724]
[-91.56476593 145.99110413]
[-77.40651703 141.03692627]
[-73.67346191 131.20356750]
[-64.88378906 125.03055573]
[-53.92183685 124.84859467]
[-44.55920792 130.96995544]
[-30.07031822 127.08766937]
[-15.58143139 123.20538330]
[-1.09254420 119.32309723]
[13.39634323 115.44081116]
[27.88523102 111.55852509]
[42.37411880 107.67623901]
[56.86300659 103.79395294]
[56.86772919 96.15272522]
[58.21547318 88.63129425]
[60.86426926 81.46384430]
[64.73164368 74.87356567]
[69.69718170 69.06565857]
[75.60626221 64.22095490]
[82.27489471 60.49031830]
[89.49544525 57.98989868]
[97.04306793 56.79755783]
[104.68276978 56.95042419]
[112.17665863 58.44373322]
[119.29140472 61.23099136]
[128.19869995 49.16202545]
[137.10600281 37.09305573]
[138.40344238 20.74531364]
[153.32403564 13.94031620]
[166.51875305 23.67846107]
[164.41400146 39.94197845]
[149.17497253 46.00035858]
[140.26766968 58.06932449]
[131.36036682 70.13829041]
[136.75454712 77.10245514]
[140.62780762 85.01413727]
[142.81985474 93.54594421]
[143.23999023 102.34482574]
[141.87081909 111.04667664]
[138.76901245 119.29140472]
[150.83798218 128.19869995]
[162.90693665 137.10600281]
[174.97590637 146.01330566]
[187.04487610 154.92060852]
[199.11384583 163.82791138]
[211.18281555 172.73521423]
[223.25177002 181.64251709]
[238.84022522 179.03947449]
[251.65483093 188.28941345]
[254.09292603 203.90451050]
[244.70800781 216.62060547]
[229.06800842 218.89347839]
[216.45185852 209.37464905]
[214.34446716 193.71148682]
[202.27551270 184.80418396]
[190.20654297 175.89688110]
[178.13757324 166.98957825]
[166.06860352 158.08227539]
[153.99963379 149.17497253]
[141.93067932 140.26766968]
[129.86170959 131.36036682]
[105.56959534 142.94384766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[46 55]
[47 54]
[48 53]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
